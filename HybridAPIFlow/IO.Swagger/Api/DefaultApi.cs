/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// CatalogProductOfferingsResource - BuildNext
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryBuildNext"></param>
        /// <returns>CatalogProductOfferingsResponse</returns>
        CatalogProductOfferingsResponse BuildNext (CatalogProductOfferingsQueryBuildNext catalogProductOfferingsQueryBuildNext);

        /// <summary>
        /// CatalogProductOfferingsResource - BuildNext
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryBuildNext"></param>
        /// <returns>ApiResponse of CatalogProductOfferingsResponse</returns>
        ApiResponse<CatalogProductOfferingsResponse> BuildNextWithHttpInfo (CatalogProductOfferingsQueryBuildNext catalogProductOfferingsQueryBuildNext);
        /// <summary>
        /// CatalogProductOfferingsResource - BuildOptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryBuildOptions"></param>
        /// <returns>CatalogProductOfferingsResponse</returns>
        CatalogProductOfferingsResponse BuildOptions (CatalogProductOfferingsQueryBuildOptions catalogProductOfferingsQueryBuildOptions);

        /// <summary>
        /// CatalogProductOfferingsResource - BuildOptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryBuildOptions"></param>
        /// <returns>ApiResponse of CatalogProductOfferingsResponse</returns>
        ApiResponse<CatalogProductOfferingsResponse> BuildOptionsWithHttpInfo (CatalogProductOfferingsQueryBuildOptions catalogProductOfferingsQueryBuildOptions);
        /// <summary>
        /// CatalogProductOfferingsResource - Create
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryRequestWrapper"></param>
        /// <returns>CatalogProductOfferingsResponseWrapper</returns>
        CatalogProductOfferingsResponseWrapper Create (CatalogProductOfferingsQueryRequestWrapper catalogProductOfferingsQueryRequestWrapper);

        /// <summary>
        /// CatalogProductOfferingsResource - Create
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryRequestWrapper"></param>
        /// <returns>ApiResponse of CatalogProductOfferingsResponseWrapper</returns>
        ApiResponse<CatalogProductOfferingsResponseWrapper> CreateWithHttpInfo (CatalogProductOfferingsQueryRequestWrapper catalogProductOfferingsQueryRequestWrapper);
        /// <summary>
        /// CatalogProductOfferingsResource - GetPage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The Identifier of the FarFamilyOfferings from which a page is to be returned (optional)</param>
        /// <param name="pageNumber">The page number to be returned (optional)</param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <returns>CatalogProductOfferingsResponse</returns>
        CatalogProductOfferingsResponse GetPage (string identifier = null, string pageNumber = null, string view = null);

        /// <summary>
        /// CatalogProductOfferingsResource - GetPage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The Identifier of the FarFamilyOfferings from which a page is to be returned (optional)</param>
        /// <param name="pageNumber">The page number to be returned (optional)</param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <returns>ApiResponse of CatalogProductOfferingsResponse</returns>
        ApiResponse<CatalogProductOfferingsResponse> GetPageWithHttpInfo (string identifier = null, string pageNumber = null, string view = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// CatalogProductOfferingsResource - BuildNext
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryBuildNext"></param>
        /// <returns>Task of CatalogProductOfferingsResponse</returns>
        System.Threading.Tasks.Task<CatalogProductOfferingsResponse> BuildNextAsync (CatalogProductOfferingsQueryBuildNext catalogProductOfferingsQueryBuildNext);

        /// <summary>
        /// CatalogProductOfferingsResource - BuildNext
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryBuildNext"></param>
        /// <returns>Task of ApiResponse (CatalogProductOfferingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CatalogProductOfferingsResponse>> BuildNextAsyncWithHttpInfo (CatalogProductOfferingsQueryBuildNext catalogProductOfferingsQueryBuildNext);
        /// <summary>
        /// CatalogProductOfferingsResource - BuildOptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryBuildOptions"></param>
        /// <returns>Task of CatalogProductOfferingsResponse</returns>
        System.Threading.Tasks.Task<CatalogProductOfferingsResponse> BuildOptionsAsync (CatalogProductOfferingsQueryBuildOptions catalogProductOfferingsQueryBuildOptions);

        /// <summary>
        /// CatalogProductOfferingsResource - BuildOptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryBuildOptions"></param>
        /// <returns>Task of ApiResponse (CatalogProductOfferingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CatalogProductOfferingsResponse>> BuildOptionsAsyncWithHttpInfo (CatalogProductOfferingsQueryBuildOptions catalogProductOfferingsQueryBuildOptions);
        /// <summary>
        /// CatalogProductOfferingsResource - Create
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryRequestWrapper"></param>
        /// <returns>Task of CatalogProductOfferingsResponseWrapper</returns>
        System.Threading.Tasks.Task<CatalogProductOfferingsResponseWrapper> CreateAsync (CatalogProductOfferingsQueryRequestWrapper catalogProductOfferingsQueryRequestWrapper);

        /// <summary>
        /// CatalogProductOfferingsResource - Create
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryRequestWrapper"></param>
        /// <returns>Task of ApiResponse (CatalogProductOfferingsResponseWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<CatalogProductOfferingsResponseWrapper>> CreateAsyncWithHttpInfo (CatalogProductOfferingsQueryRequestWrapper catalogProductOfferingsQueryRequestWrapper);
        /// <summary>
        /// CatalogProductOfferingsResource - GetPage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The Identifier of the FarFamilyOfferings from which a page is to be returned (optional)</param>
        /// <param name="pageNumber">The page number to be returned (optional)</param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <returns>Task of CatalogProductOfferingsResponse</returns>
        System.Threading.Tasks.Task<CatalogProductOfferingsResponse> GetPageAsync (string identifier = null, string pageNumber = null, string view = null);

        /// <summary>
        /// CatalogProductOfferingsResource - GetPage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The Identifier of the FarFamilyOfferings from which a page is to be returned (optional)</param>
        /// <param name="pageNumber">The page number to be returned (optional)</param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <returns>Task of ApiResponse (CatalogProductOfferingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CatalogProductOfferingsResponse>> GetPageAsyncWithHttpInfo (string identifier = null, string pageNumber = null, string view = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// CatalogProductOfferingsResource - BuildNext 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryBuildNext"></param>
        /// <returns>CatalogProductOfferingsResponse</returns>
        public CatalogProductOfferingsResponse BuildNext (CatalogProductOfferingsQueryBuildNext catalogProductOfferingsQueryBuildNext)
        {
             ApiResponse<CatalogProductOfferingsResponse> localVarResponse = BuildNextWithHttpInfo(catalogProductOfferingsQueryBuildNext);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CatalogProductOfferingsResource - BuildNext 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryBuildNext"></param>
        /// <returns>ApiResponse of CatalogProductOfferingsResponse</returns>
        public ApiResponse< CatalogProductOfferingsResponse > BuildNextWithHttpInfo (CatalogProductOfferingsQueryBuildNext catalogProductOfferingsQueryBuildNext)
        {
            // verify the required parameter 'catalogProductOfferingsQueryBuildNext' is set
            if (catalogProductOfferingsQueryBuildNext == null)
                throw new ApiException(400, "Missing required parameter 'catalogProductOfferingsQueryBuildNext' when calling DefaultApi->BuildNext");

            var localVarPath = "/catalogproductofferings/buildnext";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catalogProductOfferingsQueryBuildNext != null && catalogProductOfferingsQueryBuildNext.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogProductOfferingsQueryBuildNext); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogProductOfferingsQueryBuildNext; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuildNext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatalogProductOfferingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CatalogProductOfferingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogProductOfferingsResponse)));
        }

        /// <summary>
        /// CatalogProductOfferingsResource - BuildNext 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryBuildNext"></param>
        /// <returns>Task of CatalogProductOfferingsResponse</returns>
        public async System.Threading.Tasks.Task<CatalogProductOfferingsResponse> BuildNextAsync (CatalogProductOfferingsQueryBuildNext catalogProductOfferingsQueryBuildNext)
        {
             ApiResponse<CatalogProductOfferingsResponse> localVarResponse = await BuildNextAsyncWithHttpInfo(catalogProductOfferingsQueryBuildNext);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CatalogProductOfferingsResource - BuildNext 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryBuildNext"></param>
        /// <returns>Task of ApiResponse (CatalogProductOfferingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CatalogProductOfferingsResponse>> BuildNextAsyncWithHttpInfo (CatalogProductOfferingsQueryBuildNext catalogProductOfferingsQueryBuildNext)
        {
            // verify the required parameter 'catalogProductOfferingsQueryBuildNext' is set
            if (catalogProductOfferingsQueryBuildNext == null)
                throw new ApiException(400, "Missing required parameter 'catalogProductOfferingsQueryBuildNext' when calling DefaultApi->BuildNext");

            var localVarPath = "/catalogproductofferings/buildnext";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catalogProductOfferingsQueryBuildNext != null && catalogProductOfferingsQueryBuildNext.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogProductOfferingsQueryBuildNext); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogProductOfferingsQueryBuildNext; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuildNext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatalogProductOfferingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CatalogProductOfferingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogProductOfferingsResponse)));
        }

        /// <summary>
        /// CatalogProductOfferingsResource - BuildOptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryBuildOptions"></param>
        /// <returns>CatalogProductOfferingsResponse</returns>
        public CatalogProductOfferingsResponse BuildOptions (CatalogProductOfferingsQueryBuildOptions catalogProductOfferingsQueryBuildOptions)
        {
             ApiResponse<CatalogProductOfferingsResponse> localVarResponse = BuildOptionsWithHttpInfo(catalogProductOfferingsQueryBuildOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CatalogProductOfferingsResource - BuildOptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryBuildOptions"></param>
        /// <returns>ApiResponse of CatalogProductOfferingsResponse</returns>
        public ApiResponse< CatalogProductOfferingsResponse > BuildOptionsWithHttpInfo (CatalogProductOfferingsQueryBuildOptions catalogProductOfferingsQueryBuildOptions)
        {
            // verify the required parameter 'catalogProductOfferingsQueryBuildOptions' is set
            if (catalogProductOfferingsQueryBuildOptions == null)
                throw new ApiException(400, "Missing required parameter 'catalogProductOfferingsQueryBuildOptions' when calling DefaultApi->BuildOptions");

            var localVarPath = "/catalogproductofferings/buildoptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catalogProductOfferingsQueryBuildOptions != null && catalogProductOfferingsQueryBuildOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogProductOfferingsQueryBuildOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogProductOfferingsQueryBuildOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuildOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatalogProductOfferingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CatalogProductOfferingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogProductOfferingsResponse)));
        }

        /// <summary>
        /// CatalogProductOfferingsResource - BuildOptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryBuildOptions"></param>
        /// <returns>Task of CatalogProductOfferingsResponse</returns>
        public async System.Threading.Tasks.Task<CatalogProductOfferingsResponse> BuildOptionsAsync (CatalogProductOfferingsQueryBuildOptions catalogProductOfferingsQueryBuildOptions)
        {
             ApiResponse<CatalogProductOfferingsResponse> localVarResponse = await BuildOptionsAsyncWithHttpInfo(catalogProductOfferingsQueryBuildOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CatalogProductOfferingsResource - BuildOptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryBuildOptions"></param>
        /// <returns>Task of ApiResponse (CatalogProductOfferingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CatalogProductOfferingsResponse>> BuildOptionsAsyncWithHttpInfo (CatalogProductOfferingsQueryBuildOptions catalogProductOfferingsQueryBuildOptions)
        {
            // verify the required parameter 'catalogProductOfferingsQueryBuildOptions' is set
            if (catalogProductOfferingsQueryBuildOptions == null)
                throw new ApiException(400, "Missing required parameter 'catalogProductOfferingsQueryBuildOptions' when calling DefaultApi->BuildOptions");

            var localVarPath = "/catalogproductofferings/buildoptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catalogProductOfferingsQueryBuildOptions != null && catalogProductOfferingsQueryBuildOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogProductOfferingsQueryBuildOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogProductOfferingsQueryBuildOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuildOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatalogProductOfferingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CatalogProductOfferingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogProductOfferingsResponse)));
        }

        /// <summary>
        /// CatalogProductOfferingsResource - Create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryRequestWrapper"></param>
        /// <returns>CatalogProductOfferingsResponseWrapper</returns>
        public CatalogProductOfferingsResponseWrapper Create (CatalogProductOfferingsQueryRequestWrapper catalogProductOfferingsQueryRequestWrapper)
        {
             ApiResponse<CatalogProductOfferingsResponseWrapper> localVarResponse = CreateWithHttpInfo(catalogProductOfferingsQueryRequestWrapper);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CatalogProductOfferingsResource - Create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryRequestWrapper"></param>
        /// <returns>ApiResponse of CatalogProductOfferingsResponseWrapper</returns>
        public ApiResponse< CatalogProductOfferingsResponseWrapper > CreateWithHttpInfo (CatalogProductOfferingsQueryRequestWrapper catalogProductOfferingsQueryRequestWrapper)
        {
            // verify the required parameter 'catalogProductOfferingsQueryRequestWrapper' is set
            if (catalogProductOfferingsQueryRequestWrapper == null)
                throw new ApiException(400, "Missing required parameter 'catalogProductOfferingsQueryRequestWrapper' when calling DefaultApi->Create");

            var localVarPath = "/catalogproductofferings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catalogProductOfferingsQueryRequestWrapper != null && catalogProductOfferingsQueryRequestWrapper.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogProductOfferingsQueryRequestWrapper); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogProductOfferingsQueryRequestWrapper; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatalogProductOfferingsResponseWrapper>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CatalogProductOfferingsResponseWrapper) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogProductOfferingsResponseWrapper)));
        }

        /// <summary>
        /// CatalogProductOfferingsResource - Create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryRequestWrapper"></param>
        /// <returns>Task of CatalogProductOfferingsResponseWrapper</returns>
        public async System.Threading.Tasks.Task<CatalogProductOfferingsResponseWrapper> CreateAsync (CatalogProductOfferingsQueryRequestWrapper catalogProductOfferingsQueryRequestWrapper)
        {
             ApiResponse<CatalogProductOfferingsResponseWrapper> localVarResponse = await CreateAsyncWithHttpInfo(catalogProductOfferingsQueryRequestWrapper);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CatalogProductOfferingsResource - Create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogProductOfferingsQueryRequestWrapper"></param>
        /// <returns>Task of ApiResponse (CatalogProductOfferingsResponseWrapper)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CatalogProductOfferingsResponseWrapper>> CreateAsyncWithHttpInfo (CatalogProductOfferingsQueryRequestWrapper catalogProductOfferingsQueryRequestWrapper)
        {
            // verify the required parameter 'catalogProductOfferingsQueryRequestWrapper' is set
            if (catalogProductOfferingsQueryRequestWrapper == null)
                throw new ApiException(400, "Missing required parameter 'catalogProductOfferingsQueryRequestWrapper' when calling DefaultApi->Create");

            var localVarPath = "/catalogproductofferings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catalogProductOfferingsQueryRequestWrapper != null && catalogProductOfferingsQueryRequestWrapper.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogProductOfferingsQueryRequestWrapper); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogProductOfferingsQueryRequestWrapper; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatalogProductOfferingsResponseWrapper>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CatalogProductOfferingsResponseWrapper) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogProductOfferingsResponseWrapper)));
        }

        /// <summary>
        /// CatalogProductOfferingsResource - GetPage 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The Identifier of the FarFamilyOfferings from which a page is to be returned (optional)</param>
        /// <param name="pageNumber">The page number to be returned (optional)</param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <returns>CatalogProductOfferingsResponse</returns>
        public CatalogProductOfferingsResponse GetPage (string identifier = null, string pageNumber = null, string view = null)
        {
             ApiResponse<CatalogProductOfferingsResponse> localVarResponse = GetPageWithHttpInfo(identifier, pageNumber, view);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CatalogProductOfferingsResource - GetPage 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The Identifier of the FarFamilyOfferings from which a page is to be returned (optional)</param>
        /// <param name="pageNumber">The page number to be returned (optional)</param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <returns>ApiResponse of CatalogProductOfferingsResponse</returns>
        public ApiResponse< CatalogProductOfferingsResponse > GetPageWithHttpInfo (string identifier = null, string pageNumber = null, string view = null)
        {

            var localVarPath = "/catalogproductofferings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "identifier", identifier)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatalogProductOfferingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CatalogProductOfferingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogProductOfferingsResponse)));
        }

        /// <summary>
        /// CatalogProductOfferingsResource - GetPage 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The Identifier of the FarFamilyOfferings from which a page is to be returned (optional)</param>
        /// <param name="pageNumber">The page number to be returned (optional)</param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <returns>Task of CatalogProductOfferingsResponse</returns>
        public async System.Threading.Tasks.Task<CatalogProductOfferingsResponse> GetPageAsync (string identifier = null, string pageNumber = null, string view = null)
        {
             ApiResponse<CatalogProductOfferingsResponse> localVarResponse = await GetPageAsyncWithHttpInfo(identifier, pageNumber, view);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CatalogProductOfferingsResource - GetPage 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The Identifier of the FarFamilyOfferings from which a page is to be returned (optional)</param>
        /// <param name="pageNumber">The page number to be returned (optional)</param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <returns>Task of ApiResponse (CatalogProductOfferingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CatalogProductOfferingsResponse>> GetPageAsyncWithHttpInfo (string identifier = null, string pageNumber = null, string view = null)
        {

            var localVarPath = "/catalogproductofferings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "identifier", identifier)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatalogProductOfferingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CatalogProductOfferingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogProductOfferingsResponse)));
        }

    }
}
