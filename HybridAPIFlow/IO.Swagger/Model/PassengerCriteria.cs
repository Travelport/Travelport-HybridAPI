/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PassengerCriteria
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(PassengerCriteriaAirChange), "PassengerCriteriaAirChange")]
    public partial class PassengerCriteria :  IEquatable<PassengerCriteria>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PassengerCriteria" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PassengerCriteria() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PassengerCriteria" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="number">Assigned Type: c-1100:NonnegativeInteger.</param>
        /// <param name="age">Assigned Type: c-1100:NumberDoubleDigit.</param>
        /// <param name="passengerTypeCode">Assigned Type: c-1100:PassengerTypeCode.</param>
        /// <param name="customerLoyalty">customerLoyalty.</param>
        /// <param name="travelerGeographicLocation">Assigned Type: ctar-1100:TravelerGeographicLocation.</param>
        /// <param name="specifiedPassengerTypeCodeOnlyInd">If true then the Offering/Offer will only be returned for the specific passengerTypeCode.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public PassengerCriteria(string type = default(string), int? number = default(int?), int? age = default(int?), string passengerTypeCode = default(string), List<CustomerLoyalty> customerLoyalty = default(List<CustomerLoyalty>), TravelerGeographicLocation travelerGeographicLocation = default(TravelerGeographicLocation), bool? specifiedPassengerTypeCodeOnlyInd = default(bool?), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for PassengerCriteria and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Number = number;
            this.Age = age;
            this.PassengerTypeCode = passengerTypeCode;
            this.CustomerLoyalty = customerLoyalty;
            this.TravelerGeographicLocation = travelerGeographicLocation;
            this.SpecifiedPassengerTypeCodeOnlyInd = specifiedPassengerTypeCodeOnlyInd;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:NonnegativeInteger
        /// </summary>
        /// <value>Assigned Type: c-1100:NonnegativeInteger</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public int? Number { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:NumberDoubleDigit
        /// </summary>
        /// <value>Assigned Type: c-1100:NumberDoubleDigit</value>
        [DataMember(Name="age", EmitDefaultValue=false)]
        public int? Age { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:PassengerTypeCode
        /// </summary>
        /// <value>Assigned Type: c-1100:PassengerTypeCode</value>
        [DataMember(Name="passengerTypeCode", EmitDefaultValue=false)]
        public string PassengerTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets CustomerLoyalty
        /// </summary>
        [DataMember(Name="CustomerLoyalty", EmitDefaultValue=false)]
        public List<CustomerLoyalty> CustomerLoyalty { get; set; }

        /// <summary>
        /// Assigned Type: ctar-1100:TravelerGeographicLocation
        /// </summary>
        /// <value>Assigned Type: ctar-1100:TravelerGeographicLocation</value>
        [DataMember(Name="TravelerGeographicLocation", EmitDefaultValue=false)]
        public TravelerGeographicLocation TravelerGeographicLocation { get; set; }

        /// <summary>
        /// If true then the Offering/Offer will only be returned for the specific passengerTypeCode
        /// </summary>
        /// <value>If true then the Offering/Offer will only be returned for the specific passengerTypeCode</value>
        [DataMember(Name="specifiedPassengerTypeCodeOnlyInd", EmitDefaultValue=false)]
        public bool? SpecifiedPassengerTypeCodeOnlyInd { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PassengerCriteria {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  PassengerTypeCode: ").Append(PassengerTypeCode).Append("\n");
            sb.Append("  CustomerLoyalty: ").Append(CustomerLoyalty).Append("\n");
            sb.Append("  TravelerGeographicLocation: ").Append(TravelerGeographicLocation).Append("\n");
            sb.Append("  SpecifiedPassengerTypeCodeOnlyInd: ").Append(SpecifiedPassengerTypeCodeOnlyInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PassengerCriteria);
        }

        /// <summary>
        /// Returns true if PassengerCriteria instances are equal
        /// </summary>
        /// <param name="input">Instance of PassengerCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PassengerCriteria input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Age == input.Age ||
                    (this.Age != null &&
                    this.Age.Equals(input.Age))
                ) && 
                (
                    this.PassengerTypeCode == input.PassengerTypeCode ||
                    (this.PassengerTypeCode != null &&
                    this.PassengerTypeCode.Equals(input.PassengerTypeCode))
                ) && 
                (
                    this.CustomerLoyalty == input.CustomerLoyalty ||
                    this.CustomerLoyalty != null &&
                    this.CustomerLoyalty.SequenceEqual(input.CustomerLoyalty)
                ) && 
                (
                    this.TravelerGeographicLocation == input.TravelerGeographicLocation ||
                    (this.TravelerGeographicLocation != null &&
                    this.TravelerGeographicLocation.Equals(input.TravelerGeographicLocation))
                ) && 
                (
                    this.SpecifiedPassengerTypeCodeOnlyInd == input.SpecifiedPassengerTypeCodeOnlyInd ||
                    (this.SpecifiedPassengerTypeCodeOnlyInd != null &&
                    this.SpecifiedPassengerTypeCodeOnlyInd.Equals(input.SpecifiedPassengerTypeCodeOnlyInd))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Age != null)
                    hashCode = hashCode * 59 + this.Age.GetHashCode();
                if (this.PassengerTypeCode != null)
                    hashCode = hashCode * 59 + this.PassengerTypeCode.GetHashCode();
                if (this.CustomerLoyalty != null)
                    hashCode = hashCode * 59 + this.CustomerLoyalty.GetHashCode();
                if (this.TravelerGeographicLocation != null)
                    hashCode = hashCode * 59 + this.TravelerGeographicLocation.GetHashCode();
                if (this.SpecifiedPassengerTypeCodeOnlyInd != null)
                    hashCode = hashCode * 59 + this.SpecifiedPassengerTypeCodeOnlyInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // Number (int?) minimum
            if(this.Number < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Number, must be a value greater than or equal to 0.", new [] { "Number" });
            }

            // PassengerTypeCode (string) maxLength
            if(this.PassengerTypeCode != null && this.PassengerTypeCode.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PassengerTypeCode, length must be less than 5.", new [] { "PassengerTypeCode" });
            }

            // PassengerTypeCode (string) minLength
            if(this.PassengerTypeCode != null && this.PassengerTypeCode.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PassengerTypeCode, length must be greater than 3.", new [] { "PassengerTypeCode" });
            }

            // PassengerTypeCode (string) pattern
            Regex regexPassengerTypeCode = new Regex(@"([a-zA-Z0-9]{3,5})", RegexOptions.CultureInvariant);
            if (false == regexPassengerTypeCode.Match(this.PassengerTypeCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PassengerTypeCode, must match a pattern of " + regexPassengerTypeCode, new [] { "PassengerTypeCode" });
            }

            yield break;
        }
    }

}
