/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PromotionalCode
    /// </summary>
    [DataContract]
    public partial class PromotionalCode :  IEquatable<PromotionalCode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PromotionalCode" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PromotionalCode() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PromotionalCode" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="supplierCode">Assigned Type: c-1100:SupplierCode (required).</param>
        public PromotionalCode(string value = default(string), string supplierCode = default(string))
        {
            // to ensure "supplierCode" is required (not null)
            if (supplierCode == null)
            {
                throw new InvalidDataException("supplierCode is a required property for PromotionalCode and cannot be null");
            }
            else
            {
                this.SupplierCode = supplierCode;
            }
            this.Value = value;
        }
        
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:SupplierCode
        /// </summary>
        /// <value>Assigned Type: c-1100:SupplierCode</value>
        [DataMember(Name="supplierCode", EmitDefaultValue=false)]
        public string SupplierCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PromotionalCode {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  SupplierCode: ").Append(SupplierCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PromotionalCode);
        }

        /// <summary>
        /// Returns true if PromotionalCode instances are equal
        /// </summary>
        /// <param name="input">Instance of PromotionalCode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PromotionalCode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.SupplierCode == input.SupplierCode ||
                    (this.SupplierCode != null &&
                    this.SupplierCode.Equals(input.SupplierCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.SupplierCode != null)
                    hashCode = hashCode * 59 + this.SupplierCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if(this.Value != null && this.Value.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 32.", new [] { "Value" });
            }

            // SupplierCode (string) maxLength
            if(this.SupplierCode != null && this.SupplierCode.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SupplierCode, length must be less than 5.", new [] { "SupplierCode" });
            }

            // SupplierCode (string) minLength
            if(this.SupplierCode != null && this.SupplierCode.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SupplierCode, length must be greater than 2.", new [] { "SupplierCode" });
            }

            // SupplierCode (string) pattern
            Regex regexSupplierCode = new Regex(@"([a-zA-Z0-9]{2,5})", RegexOptions.CultureInvariant);
            if (false == regexSupplierCode.Match(this.SupplierCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SupplierCode, must match a pattern of " + regexSupplierCode, new [] { "SupplierCode" });
            }

            yield break;
        }
    }

}
