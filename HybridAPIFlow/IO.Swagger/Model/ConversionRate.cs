/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A conversion metric from standard to another with the contextual authority such as IATA, OAG, ISO, etc.
    /// </summary>
    [DataContract]
    public partial class ConversionRate :  IEquatable<ConversionRate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversionRate" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="rateAuthority">Assigned Type: c-1100:CodeContext.</param>
        /// <param name="rateAsOf">Assigned Type: c-1100:DateTime.</param>
        public ConversionRate(float? value = default(float?), string rateAuthority = default(string), DateTime? rateAsOf = default(DateTime?))
        {
            this.Value = value;
            this.RateAuthority = rateAuthority;
            this.RateAsOf = rateAsOf;
        }
        
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public float? Value { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:CodeContext
        /// </summary>
        /// <value>Assigned Type: c-1100:CodeContext</value>
        [DataMember(Name="rateAuthority", EmitDefaultValue=false)]
        public string RateAuthority { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:DateTime
        /// </summary>
        /// <value>Assigned Type: c-1100:DateTime</value>
        [DataMember(Name="rateAsOf", EmitDefaultValue=false)]
        public DateTime? RateAsOf { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversionRate {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  RateAuthority: ").Append(RateAuthority).Append("\n");
            sb.Append("  RateAsOf: ").Append(RateAsOf).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversionRate);
        }

        /// <summary>
        /// Returns true if ConversionRate instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversionRate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversionRate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.RateAuthority == input.RateAuthority ||
                    (this.RateAuthority != null &&
                    this.RateAuthority.Equals(input.RateAuthority))
                ) && 
                (
                    this.RateAsOf == input.RateAsOf ||
                    (this.RateAsOf != null &&
                    this.RateAsOf.Equals(input.RateAsOf))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.RateAuthority != null)
                    hashCode = hashCode * 59 + this.RateAuthority.GetHashCode();
                if (this.RateAsOf != null)
                    hashCode = hashCode * 59 + this.RateAsOf.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RateAuthority (string) maxLength
            if(this.RateAuthority != null && this.RateAuthority.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RateAuthority, length must be less than 32.", new [] { "RateAuthority" });
            }

            yield break;
        }
    }

}
