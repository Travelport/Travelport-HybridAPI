/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BrandSummary
    /// </summary>
    [DataContract]
    public partial class BrandSummary : BrandID,  IEquatable<BrandSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandSummary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BrandSummary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandSummary" /> class.
        /// </summary>
        /// <param name="name">Assigned Type: ctbr-1100:BrandName (required).</param>
        /// <param name="tier">Assigned Type: c-1100:NumberSingleDigit.</param>
        /// <param name="shelfNumbers">Assigned Type: ctbr-1100:ShelfNumbers.</param>
        /// <param name="brandAttribute">brandAttribute (required).</param>
        /// <param name="additionalBrandAttribute">additionalBrandAttribute.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public BrandSummary(string name = default(string), int? tier = default(int?), List<int?> shelfNumbers = default(List<int?>), List<BrandAttribute> brandAttribute = default(List<BrandAttribute>), List<AdditionalBrandAttribute> additionalBrandAttribute = default(List<AdditionalBrandAttribute>), Object extensionPoint = default(Object), string type = "BrandSummary", string id = default(string), string brandRef = default(string), Identifier identifier = default(Identifier)) : base(type, id, brandRef, identifier)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for BrandSummary and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "brandAttribute" is required (not null)
            if (brandAttribute == null)
            {
                throw new InvalidDataException("brandAttribute is a required property for BrandSummary and cannot be null");
            }
            else
            {
                this.BrandAttribute = brandAttribute;
            }
            this.Tier = tier;
            this.ShelfNumbers = shelfNumbers;
            this.AdditionalBrandAttribute = additionalBrandAttribute;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Assigned Type: ctbr-1100:BrandName
        /// </summary>
        /// <value>Assigned Type: ctbr-1100:BrandName</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:NumberSingleDigit
        /// </summary>
        /// <value>Assigned Type: c-1100:NumberSingleDigit</value>
        [DataMember(Name="tier", EmitDefaultValue=false)]
        public int? Tier { get; set; }

        /// <summary>
        /// Assigned Type: ctbr-1100:ShelfNumbers
        /// </summary>
        /// <value>Assigned Type: ctbr-1100:ShelfNumbers</value>
        [DataMember(Name="shelfNumbers", EmitDefaultValue=false)]
        public List<int?> ShelfNumbers { get; set; }

        /// <summary>
        /// Gets or Sets BrandAttribute
        /// </summary>
        [DataMember(Name="BrandAttribute", EmitDefaultValue=false)]
        public List<BrandAttribute> BrandAttribute { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalBrandAttribute
        /// </summary>
        [DataMember(Name="AdditionalBrandAttribute", EmitDefaultValue=false)]
        public List<AdditionalBrandAttribute> AdditionalBrandAttribute { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrandSummary {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  ShelfNumbers: ").Append(ShelfNumbers).Append("\n");
            sb.Append("  BrandAttribute: ").Append(BrandAttribute).Append("\n");
            sb.Append("  AdditionalBrandAttribute: ").Append(AdditionalBrandAttribute).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrandSummary);
        }

        /// <summary>
        /// Returns true if BrandSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of BrandSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrandSummary input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && base.Equals(input) && 
                (
                    this.Tier == input.Tier ||
                    (this.Tier != null &&
                    this.Tier.Equals(input.Tier))
                ) && base.Equals(input) && 
                (
                    this.ShelfNumbers == input.ShelfNumbers ||
                    this.ShelfNumbers != null &&
                    this.ShelfNumbers.SequenceEqual(input.ShelfNumbers)
                ) && base.Equals(input) && 
                (
                    this.BrandAttribute == input.BrandAttribute ||
                    this.BrandAttribute != null &&
                    this.BrandAttribute.SequenceEqual(input.BrandAttribute)
                ) && base.Equals(input) && 
                (
                    this.AdditionalBrandAttribute == input.AdditionalBrandAttribute ||
                    this.AdditionalBrandAttribute != null &&
                    this.AdditionalBrandAttribute.SequenceEqual(input.AdditionalBrandAttribute)
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Tier != null)
                    hashCode = hashCode * 59 + this.Tier.GetHashCode();
                if (this.ShelfNumbers != null)
                    hashCode = hashCode * 59 + this.ShelfNumbers.GetHashCode();
                if (this.BrandAttribute != null)
                    hashCode = hashCode * 59 + this.BrandAttribute.GetHashCode();
                if (this.AdditionalBrandAttribute != null)
                    hashCode = hashCode * 59 + this.AdditionalBrandAttribute.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }

            yield break;
        }
    }

}
