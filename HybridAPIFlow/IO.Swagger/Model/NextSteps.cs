/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NextSteps
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class NextSteps :  IEquatable<NextSteps>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NextSteps" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NextSteps() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NextSteps" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="baseURI">The base portion of the uri in order to shorten the uri&#39;s in the individual steps (required).</param>
        /// <param name="id">Optional internally referenced id.</param>
        /// <param name="nextStep">nextStep (required).</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public NextSteps(string type = default(string), string baseURI = default(string), string id = default(string), List<NextStep> nextStep = default(List<NextStep>), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for NextSteps and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "baseURI" is required (not null)
            if (baseURI == null)
            {
                throw new InvalidDataException("baseURI is a required property for NextSteps and cannot be null");
            }
            else
            {
                this.BaseURI = baseURI;
            }
            // to ensure "nextStep" is required (not null)
            if (nextStep == null)
            {
                throw new InvalidDataException("nextStep is a required property for NextSteps and cannot be null");
            }
            else
            {
                this.NextStep = nextStep;
            }
            this.Id = id;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The base portion of the uri in order to shorten the uri&#39;s in the individual steps
        /// </summary>
        /// <value>The base portion of the uri in order to shorten the uri&#39;s in the individual steps</value>
        [DataMember(Name="baseURI", EmitDefaultValue=false)]
        public string BaseURI { get; set; }

        /// <summary>
        /// Optional internally referenced id
        /// </summary>
        /// <value>Optional internally referenced id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets NextStep
        /// </summary>
        [DataMember(Name="NextStep", EmitDefaultValue=false)]
        public List<NextStep> NextStep { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NextSteps {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  BaseURI: ").Append(BaseURI).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NextStep: ").Append(NextStep).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NextSteps);
        }

        /// <summary>
        /// Returns true if NextSteps instances are equal
        /// </summary>
        /// <param name="input">Instance of NextSteps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NextSteps input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.BaseURI == input.BaseURI ||
                    (this.BaseURI != null &&
                    this.BaseURI.Equals(input.BaseURI))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.NextStep == input.NextStep ||
                    this.NextStep != null &&
                    this.NextStep.SequenceEqual(input.NextStep)
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.BaseURI != null)
                    hashCode = hashCode * 59 + this.BaseURI.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.NextStep != null)
                    hashCode = hashCode * 59 + this.NextStep.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
