/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CustomerLoyaltyCredit
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class CustomerLoyaltyCredit :  IEquatable<CustomerLoyaltyCredit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerLoyaltyCredit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomerLoyaltyCredit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerLoyaltyCredit" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="customerLoyalty">Assigned Type: c-1100:CustomerLoyalty (required).</param>
        /// <param name="earned">Represents the amount of award credit awarded for this offer/offering. Award credit can be used for purchasing goods and services through a customer loyalty program (required).</param>
        /// <param name="status">Represents the amount of status credit awarded for this offer/offering. Status credit allow a customer to move up the ladder of a customer loyalty program (required).</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public CustomerLoyaltyCredit(string type = default(string), CustomerLoyalty customerLoyalty = default(CustomerLoyalty), string earned = default(string), string status = default(string), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for CustomerLoyaltyCredit and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "customerLoyalty" is required (not null)
            if (customerLoyalty == null)
            {
                throw new InvalidDataException("customerLoyalty is a required property for CustomerLoyaltyCredit and cannot be null");
            }
            else
            {
                this.CustomerLoyalty = customerLoyalty;
            }
            // to ensure "earned" is required (not null)
            if (earned == null)
            {
                throw new InvalidDataException("earned is a required property for CustomerLoyaltyCredit and cannot be null");
            }
            else
            {
                this.Earned = earned;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for CustomerLoyaltyCredit and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:CustomerLoyalty
        /// </summary>
        /// <value>Assigned Type: c-1100:CustomerLoyalty</value>
        [DataMember(Name="CustomerLoyalty", EmitDefaultValue=false)]
        public CustomerLoyalty CustomerLoyalty { get; set; }

        /// <summary>
        /// Represents the amount of award credit awarded for this offer/offering. Award credit can be used for purchasing goods and services through a customer loyalty program
        /// </summary>
        /// <value>Represents the amount of award credit awarded for this offer/offering. Award credit can be used for purchasing goods and services through a customer loyalty program</value>
        [DataMember(Name="Earned", EmitDefaultValue=false)]
        public string Earned { get; set; }

        /// <summary>
        /// Represents the amount of status credit awarded for this offer/offering. Status credit allow a customer to move up the ladder of a customer loyalty program
        /// </summary>
        /// <value>Represents the amount of status credit awarded for this offer/offering. Status credit allow a customer to move up the ladder of a customer loyalty program</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerLoyaltyCredit {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CustomerLoyalty: ").Append(CustomerLoyalty).Append("\n");
            sb.Append("  Earned: ").Append(Earned).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerLoyaltyCredit);
        }

        /// <summary>
        /// Returns true if CustomerLoyaltyCredit instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerLoyaltyCredit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerLoyaltyCredit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CustomerLoyalty == input.CustomerLoyalty ||
                    (this.CustomerLoyalty != null &&
                    this.CustomerLoyalty.Equals(input.CustomerLoyalty))
                ) && 
                (
                    this.Earned == input.Earned ||
                    (this.Earned != null &&
                    this.Earned.Equals(input.Earned))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.CustomerLoyalty != null)
                    hashCode = hashCode * 59 + this.CustomerLoyalty.GetHashCode();
                if (this.Earned != null)
                    hashCode = hashCode * 59 + this.Earned.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // Earned (string) maxLength
            if(this.Earned != null && this.Earned.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Earned, length must be less than 32.", new [] { "Earned" });
            }

            // Status (string) maxLength
            if(this.Status != null && this.Status.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Status, length must be less than 32.", new [] { "Status" });
            }

            yield break;
        }
    }

}
