/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Time stamp of the creation.
    /// </summary>
    [DataContract]
    public partial class DateCreateModify :  IEquatable<DateCreateModify>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DateCreateModify" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="creatorID">Assigned Type: c-1100:StringTiny.</param>
        /// <param name="lastModify">Time stamp of last modification..</param>
        /// <param name="lastModifierID">Assigned Type: c-1100:StringTiny.</param>
        /// <param name="purge">Date an item will be purged from a system of record.</param>
        public DateCreateModify(DateTime? value = default(DateTime?), string creatorID = default(string), DateTime? lastModify = default(DateTime?), string lastModifierID = default(string), DateTime? purge = default(DateTime?))
        {
            this.Value = value;
            this.CreatorID = creatorID;
            this.LastModify = lastModify;
            this.LastModifierID = lastModifierID;
            this.Purge = purge;
        }
        
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public DateTime? Value { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:StringTiny
        /// </summary>
        /// <value>Assigned Type: c-1100:StringTiny</value>
        [DataMember(Name="creatorID", EmitDefaultValue=false)]
        public string CreatorID { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        /// <value>Time stamp of last modification.</value>
        [DataMember(Name="lastModify", EmitDefaultValue=false)]
        public DateTime? LastModify { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:StringTiny
        /// </summary>
        /// <value>Assigned Type: c-1100:StringTiny</value>
        [DataMember(Name="lastModifierID", EmitDefaultValue=false)]
        public string LastModifierID { get; set; }

        /// <summary>
        /// Date an item will be purged from a system of record
        /// </summary>
        /// <value>Date an item will be purged from a system of record</value>
        [DataMember(Name="purge", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Purge { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DateCreateModify {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  CreatorID: ").Append(CreatorID).Append("\n");
            sb.Append("  LastModify: ").Append(LastModify).Append("\n");
            sb.Append("  LastModifierID: ").Append(LastModifierID).Append("\n");
            sb.Append("  Purge: ").Append(Purge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DateCreateModify);
        }

        /// <summary>
        /// Returns true if DateCreateModify instances are equal
        /// </summary>
        /// <param name="input">Instance of DateCreateModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateCreateModify input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.CreatorID == input.CreatorID ||
                    (this.CreatorID != null &&
                    this.CreatorID.Equals(input.CreatorID))
                ) && 
                (
                    this.LastModify == input.LastModify ||
                    (this.LastModify != null &&
                    this.LastModify.Equals(input.LastModify))
                ) && 
                (
                    this.LastModifierID == input.LastModifierID ||
                    (this.LastModifierID != null &&
                    this.LastModifierID.Equals(input.LastModifierID))
                ) && 
                (
                    this.Purge == input.Purge ||
                    (this.Purge != null &&
                    this.Purge.Equals(input.Purge))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.CreatorID != null)
                    hashCode = hashCode * 59 + this.CreatorID.GetHashCode();
                if (this.LastModify != null)
                    hashCode = hashCode * 59 + this.LastModify.GetHashCode();
                if (this.LastModifierID != null)
                    hashCode = hashCode * 59 + this.LastModifierID.GetHashCode();
                if (this.Purge != null)
                    hashCode = hashCode * 59 + this.Purge.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CreatorID (string) maxLength
            if(this.CreatorID != null && this.CreatorID.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreatorID, length must be less than 32.", new [] { "CreatorID" });
            }

            // LastModifierID (string) maxLength
            if(this.LastModifierID != null && this.LastModifierID.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastModifierID, length must be less than 32.", new [] { "LastModifierID" });
            }

            yield break;
        }
    }

}
