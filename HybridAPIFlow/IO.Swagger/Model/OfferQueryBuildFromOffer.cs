/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// OfferQueryBuildFromOffer
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class OfferQueryBuildFromOffer :  IEquatable<OfferQueryBuildFromOffer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferQueryBuildFromOffer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OfferQueryBuildFromOffer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferQueryBuildFromOffer" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="buildFromOffer">Assigned Type: ctlg-1100:BuildFromOffer (required).</param>
        /// <param name="priceHistoricalOfferInd">If true, the new Offer should be priced using the original Offer create date..</param>
        /// <param name="priceHistoricalTaxInd">if true, the taxes in the new Offer should be priced using the original Offer create date..</param>
        /// <param name="priceHistoricalFeeInd">if true, the fees in the new Offer should be priced using the original Offer create date..</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public OfferQueryBuildFromOffer(string type = default(string), BuildFromOffer buildFromOffer = default(BuildFromOffer), bool? priceHistoricalOfferInd = default(bool?), bool? priceHistoricalTaxInd = default(bool?), bool? priceHistoricalFeeInd = default(bool?), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for OfferQueryBuildFromOffer and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "buildFromOffer" is required (not null)
            if (buildFromOffer == null)
            {
                throw new InvalidDataException("buildFromOffer is a required property for OfferQueryBuildFromOffer and cannot be null");
            }
            else
            {
                this.BuildFromOffer = buildFromOffer;
            }
            this.PriceHistoricalOfferInd = priceHistoricalOfferInd;
            this.PriceHistoricalTaxInd = priceHistoricalTaxInd;
            this.PriceHistoricalFeeInd = priceHistoricalFeeInd;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Assigned Type: ctlg-1100:BuildFromOffer
        /// </summary>
        /// <value>Assigned Type: ctlg-1100:BuildFromOffer</value>
        [DataMember(Name="BuildFromOffer", EmitDefaultValue=false)]
        public BuildFromOffer BuildFromOffer { get; set; }

        /// <summary>
        /// If true, the new Offer should be priced using the original Offer create date.
        /// </summary>
        /// <value>If true, the new Offer should be priced using the original Offer create date.</value>
        [DataMember(Name="priceHistoricalOfferInd", EmitDefaultValue=false)]
        public bool? PriceHistoricalOfferInd { get; set; }

        /// <summary>
        /// if true, the taxes in the new Offer should be priced using the original Offer create date.
        /// </summary>
        /// <value>if true, the taxes in the new Offer should be priced using the original Offer create date.</value>
        [DataMember(Name="priceHistoricalTaxInd", EmitDefaultValue=false)]
        public bool? PriceHistoricalTaxInd { get; set; }

        /// <summary>
        /// if true, the fees in the new Offer should be priced using the original Offer create date.
        /// </summary>
        /// <value>if true, the fees in the new Offer should be priced using the original Offer create date.</value>
        [DataMember(Name="priceHistoricalFeeInd", EmitDefaultValue=false)]
        public bool? PriceHistoricalFeeInd { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OfferQueryBuildFromOffer {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  BuildFromOffer: ").Append(BuildFromOffer).Append("\n");
            sb.Append("  PriceHistoricalOfferInd: ").Append(PriceHistoricalOfferInd).Append("\n");
            sb.Append("  PriceHistoricalTaxInd: ").Append(PriceHistoricalTaxInd).Append("\n");
            sb.Append("  PriceHistoricalFeeInd: ").Append(PriceHistoricalFeeInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OfferQueryBuildFromOffer);
        }

        /// <summary>
        /// Returns true if OfferQueryBuildFromOffer instances are equal
        /// </summary>
        /// <param name="input">Instance of OfferQueryBuildFromOffer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OfferQueryBuildFromOffer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.BuildFromOffer == input.BuildFromOffer ||
                    (this.BuildFromOffer != null &&
                    this.BuildFromOffer.Equals(input.BuildFromOffer))
                ) && 
                (
                    this.PriceHistoricalOfferInd == input.PriceHistoricalOfferInd ||
                    (this.PriceHistoricalOfferInd != null &&
                    this.PriceHistoricalOfferInd.Equals(input.PriceHistoricalOfferInd))
                ) && 
                (
                    this.PriceHistoricalTaxInd == input.PriceHistoricalTaxInd ||
                    (this.PriceHistoricalTaxInd != null &&
                    this.PriceHistoricalTaxInd.Equals(input.PriceHistoricalTaxInd))
                ) && 
                (
                    this.PriceHistoricalFeeInd == input.PriceHistoricalFeeInd ||
                    (this.PriceHistoricalFeeInd != null &&
                    this.PriceHistoricalFeeInd.Equals(input.PriceHistoricalFeeInd))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.BuildFromOffer != null)
                    hashCode = hashCode * 59 + this.BuildFromOffer.GetHashCode();
                if (this.PriceHistoricalOfferInd != null)
                    hashCode = hashCode * 59 + this.PriceHistoricalOfferInd.GetHashCode();
                if (this.PriceHistoricalTaxInd != null)
                    hashCode = hashCode * 59 + this.PriceHistoricalTaxInd.GetHashCode();
                if (this.PriceHistoricalFeeInd != null)
                    hashCode = hashCode * 59 + this.PriceHistoricalFeeInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
