/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// StopoverCharge
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class StopoverCharge :  IEquatable<StopoverCharge>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StopoverCharge" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StopoverCharge() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StopoverCharge" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="id">The ID of the stopoverCharge (required).</param>
        /// <param name="quantity">The quantity of stopovers permitted at this charge (required).</param>
        /// <param name="amount">Assigned Type: c-1100:CurrencyAmount (required).</param>
        /// <param name="alternativeAmount">Assigned Type: c-1100:CurrencyAmount.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public StopoverCharge(string type = default(string), string id = default(string), int? quantity = default(int?), CurrencyAmount amount = default(CurrencyAmount), CurrencyAmount alternativeAmount = default(CurrencyAmount), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for StopoverCharge and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for StopoverCharge and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for StopoverCharge and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for StopoverCharge and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            this.AlternativeAmount = alternativeAmount;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The ID of the stopoverCharge
        /// </summary>
        /// <value>The ID of the stopoverCharge</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The quantity of stopovers permitted at this charge
        /// </summary>
        /// <value>The quantity of stopovers permitted at this charge</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:CurrencyAmount
        /// </summary>
        /// <value>Assigned Type: c-1100:CurrencyAmount</value>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public CurrencyAmount Amount { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:CurrencyAmount
        /// </summary>
        /// <value>Assigned Type: c-1100:CurrencyAmount</value>
        [DataMember(Name="AlternativeAmount", EmitDefaultValue=false)]
        public CurrencyAmount AlternativeAmount { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StopoverCharge {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AlternativeAmount: ").Append(AlternativeAmount).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StopoverCharge);
        }

        /// <summary>
        /// Returns true if StopoverCharge instances are equal
        /// </summary>
        /// <param name="input">Instance of StopoverCharge to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StopoverCharge input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.AlternativeAmount == input.AlternativeAmount ||
                    (this.AlternativeAmount != null &&
                    this.AlternativeAmount.Equals(input.AlternativeAmount))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.AlternativeAmount != null)
                    hashCode = hashCode * 59 + this.AlternativeAmount.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
