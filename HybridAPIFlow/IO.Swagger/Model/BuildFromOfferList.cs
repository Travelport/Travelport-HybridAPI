/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BuildFromOfferList
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class BuildFromOfferList :  IEquatable<BuildFromOfferList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildFromOfferList" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BuildFromOfferList() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildFromOfferList" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="offerListIdentifier">The OfferListIdentifer (GUID) to retrieve the OfferList from cache (required).</param>
        /// <param name="offerIdentifier">offerIdentifier (required).</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public BuildFromOfferList(string type = default(string), string offerListIdentifier = default(string), List<OfferIdentifier> offerIdentifier = default(List<OfferIdentifier>), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for BuildFromOfferList and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "offerListIdentifier" is required (not null)
            if (offerListIdentifier == null)
            {
                throw new InvalidDataException("offerListIdentifier is a required property for BuildFromOfferList and cannot be null");
            }
            else
            {
                this.OfferListIdentifier = offerListIdentifier;
            }
            // to ensure "offerIdentifier" is required (not null)
            if (offerIdentifier == null)
            {
                throw new InvalidDataException("offerIdentifier is a required property for BuildFromOfferList and cannot be null");
            }
            else
            {
                this.OfferIdentifier = offerIdentifier;
            }
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The OfferListIdentifer (GUID) to retrieve the OfferList from cache
        /// </summary>
        /// <value>The OfferListIdentifer (GUID) to retrieve the OfferList from cache</value>
        [DataMember(Name="OfferListIdentifier", EmitDefaultValue=false)]
        public string OfferListIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets OfferIdentifier
        /// </summary>
        [DataMember(Name="OfferIdentifier", EmitDefaultValue=false)]
        public List<OfferIdentifier> OfferIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildFromOfferList {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  OfferListIdentifier: ").Append(OfferListIdentifier).Append("\n");
            sb.Append("  OfferIdentifier: ").Append(OfferIdentifier).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildFromOfferList);
        }

        /// <summary>
        /// Returns true if BuildFromOfferList instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildFromOfferList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildFromOfferList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.OfferListIdentifier == input.OfferListIdentifier ||
                    (this.OfferListIdentifier != null &&
                    this.OfferListIdentifier.Equals(input.OfferListIdentifier))
                ) && 
                (
                    this.OfferIdentifier == input.OfferIdentifier ||
                    this.OfferIdentifier != null &&
                    this.OfferIdentifier.SequenceEqual(input.OfferIdentifier)
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.OfferListIdentifier != null)
                    hashCode = hashCode * 59 + this.OfferListIdentifier.GetHashCode();
                if (this.OfferIdentifier != null)
                    hashCode = hashCode * 59 + this.OfferIdentifier.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // OfferListIdentifier (string) maxLength
            if(this.OfferListIdentifier != null && this.OfferListIdentifier.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OfferListIdentifier, length must be less than 128.", new [] { "OfferListIdentifier" });
            }

            yield break;
        }
    }

}
