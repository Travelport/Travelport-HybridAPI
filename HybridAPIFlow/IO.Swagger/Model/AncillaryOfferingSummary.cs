/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AncillaryOfferingSummary
    /// </summary>
    [DataContract]
    public partial class AncillaryOfferingSummary : AncillaryOfferingID,  IEquatable<AncillaryOfferingSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AncillaryOfferingSummary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AncillaryOfferingSummary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AncillaryOfferingSummary" /> class.
        /// </summary>
        /// <param name="productRefs">The product references that the AncillaryOffering must be sold in conjunction with.</param>
        /// <param name="productOptions">productOptions (required).</param>
        /// <param name="price">Assigned Type: c-1100:Price (required).</param>
        /// <param name="termsAndConditions">Assigned Type: ctlg-1100:TermsAndConditions.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public AncillaryOfferingSummary(List<string> productRefs = default(List<string>), List<ProductOptionsID> productOptions = default(List<ProductOptionsID>), Price price = default(Price), TermsAndConditionsID termsAndConditions = default(TermsAndConditionsID), Object extensionPoint = default(Object), string type = "AncillaryOfferingSummary", string id = default(string), string catalogOfferingRef = default(string), string ancillaryOfferingRef = default(string), Identifier identifier = default(Identifier)) : base(type, id, catalogOfferingRef, ancillaryOfferingRef, identifier)
        {
            // to ensure "productOptions" is required (not null)
            if (productOptions == null)
            {
                throw new InvalidDataException("productOptions is a required property for AncillaryOfferingSummary and cannot be null");
            }
            else
            {
                this.ProductOptions = productOptions;
            }
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new InvalidDataException("price is a required property for AncillaryOfferingSummary and cannot be null");
            }
            else
            {
                this.Price = price;
            }
            this.ProductRefs = productRefs;
            this.TermsAndConditions = termsAndConditions;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// The product references that the AncillaryOffering must be sold in conjunction with
        /// </summary>
        /// <value>The product references that the AncillaryOffering must be sold in conjunction with</value>
        [DataMember(Name="productRefs", EmitDefaultValue=false)]
        public List<string> ProductRefs { get; set; }

        /// <summary>
        /// Gets or Sets ProductOptions
        /// </summary>
        [DataMember(Name="ProductOptions", EmitDefaultValue=false)]
        public List<ProductOptionsID> ProductOptions { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:Price
        /// </summary>
        /// <value>Assigned Type: c-1100:Price</value>
        [DataMember(Name="Price", EmitDefaultValue=false)]
        public Price Price { get; set; }

        /// <summary>
        /// Assigned Type: ctlg-1100:TermsAndConditions
        /// </summary>
        /// <value>Assigned Type: ctlg-1100:TermsAndConditions</value>
        [DataMember(Name="TermsAndConditions", EmitDefaultValue=false)]
        public TermsAndConditionsID TermsAndConditions { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AncillaryOfferingSummary {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ProductRefs: ").Append(ProductRefs).Append("\n");
            sb.Append("  ProductOptions: ").Append(ProductOptions).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  TermsAndConditions: ").Append(TermsAndConditions).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AncillaryOfferingSummary);
        }

        /// <summary>
        /// Returns true if AncillaryOfferingSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of AncillaryOfferingSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AncillaryOfferingSummary input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.ProductRefs == input.ProductRefs ||
                    this.ProductRefs != null &&
                    this.ProductRefs.SequenceEqual(input.ProductRefs)
                ) && base.Equals(input) && 
                (
                    this.ProductOptions == input.ProductOptions ||
                    this.ProductOptions != null &&
                    this.ProductOptions.SequenceEqual(input.ProductOptions)
                ) && base.Equals(input) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && base.Equals(input) && 
                (
                    this.TermsAndConditions == input.TermsAndConditions ||
                    (this.TermsAndConditions != null &&
                    this.TermsAndConditions.Equals(input.TermsAndConditions))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ProductRefs != null)
                    hashCode = hashCode * 59 + this.ProductRefs.GetHashCode();
                if (this.ProductOptions != null)
                    hashCode = hashCode * 59 + this.ProductOptions.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.TermsAndConditions != null)
                    hashCode = hashCode * 59 + this.TermsAndConditions.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
