/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ModifyPrice
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(ModifyPriceDetail), "ModifyPriceDetail")]
    public partial class ModifyPrice :  IEquatable<ModifyPrice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModifyPrice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModifyPrice() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModifyPrice" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="id">Internally referenced id.</param>
        /// <param name="currencyCode">Assigned Type: c-1100:CurrencyCode.</param>
        /// <param name="_base">The total amount not including taxes and/or fees.</param>
        /// <param name="totalTaxes">The total of the taxes included in the total price.</param>
        /// <param name="totalFees">The total of the fees included in the total price.</param>
        /// <param name="totalPrice">The total price of the product in the currency indicated.</param>
        /// <param name="vendorCurrencyTotal">Assigned Type: c-1100:VendorCurrencyTotal.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public ModifyPrice(string type = default(string), string id = default(string), CurrencyCode currencyCode = default(CurrencyCode), float? _base = default(float?), float? totalTaxes = default(float?), float? totalFees = default(float?), float? totalPrice = default(float?), VendorCurrencyTotal vendorCurrencyTotal = default(VendorCurrencyTotal), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ModifyPrice and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Id = id;
            this.CurrencyCode = currencyCode;
            this.Base = _base;
            this.TotalTaxes = totalTaxes;
            this.TotalFees = totalFees;
            this.TotalPrice = totalPrice;
            this.VendorCurrencyTotal = vendorCurrencyTotal;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Internally referenced id
        /// </summary>
        /// <value>Internally referenced id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:CurrencyCode
        /// </summary>
        /// <value>Assigned Type: c-1100:CurrencyCode</value>
        [DataMember(Name="CurrencyCode", EmitDefaultValue=false)]
        public CurrencyCode CurrencyCode { get; set; }

        /// <summary>
        /// The total amount not including taxes and/or fees
        /// </summary>
        /// <value>The total amount not including taxes and/or fees</value>
        [DataMember(Name="Base", EmitDefaultValue=false)]
        public float? Base { get; set; }

        /// <summary>
        /// The total of the taxes included in the total price
        /// </summary>
        /// <value>The total of the taxes included in the total price</value>
        [DataMember(Name="TotalTaxes", EmitDefaultValue=false)]
        public float? TotalTaxes { get; set; }

        /// <summary>
        /// The total of the fees included in the total price
        /// </summary>
        /// <value>The total of the fees included in the total price</value>
        [DataMember(Name="TotalFees", EmitDefaultValue=false)]
        public float? TotalFees { get; set; }

        /// <summary>
        /// The total price of the product in the currency indicated
        /// </summary>
        /// <value>The total price of the product in the currency indicated</value>
        [DataMember(Name="TotalPrice", EmitDefaultValue=false)]
        public float? TotalPrice { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:VendorCurrencyTotal
        /// </summary>
        /// <value>Assigned Type: c-1100:VendorCurrencyTotal</value>
        [DataMember(Name="VendorCurrencyTotal", EmitDefaultValue=false)]
        public VendorCurrencyTotal VendorCurrencyTotal { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModifyPrice {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Base: ").Append(Base).Append("\n");
            sb.Append("  TotalTaxes: ").Append(TotalTaxes).Append("\n");
            sb.Append("  TotalFees: ").Append(TotalFees).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  VendorCurrencyTotal: ").Append(VendorCurrencyTotal).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModifyPrice);
        }

        /// <summary>
        /// Returns true if ModifyPrice instances are equal
        /// </summary>
        /// <param name="input">Instance of ModifyPrice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModifyPrice input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.Base == input.Base ||
                    (this.Base != null &&
                    this.Base.Equals(input.Base))
                ) && 
                (
                    this.TotalTaxes == input.TotalTaxes ||
                    (this.TotalTaxes != null &&
                    this.TotalTaxes.Equals(input.TotalTaxes))
                ) && 
                (
                    this.TotalFees == input.TotalFees ||
                    (this.TotalFees != null &&
                    this.TotalFees.Equals(input.TotalFees))
                ) && 
                (
                    this.TotalPrice == input.TotalPrice ||
                    (this.TotalPrice != null &&
                    this.TotalPrice.Equals(input.TotalPrice))
                ) && 
                (
                    this.VendorCurrencyTotal == input.VendorCurrencyTotal ||
                    (this.VendorCurrencyTotal != null &&
                    this.VendorCurrencyTotal.Equals(input.VendorCurrencyTotal))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.Base != null)
                    hashCode = hashCode * 59 + this.Base.GetHashCode();
                if (this.TotalTaxes != null)
                    hashCode = hashCode * 59 + this.TotalTaxes.GetHashCode();
                if (this.TotalFees != null)
                    hashCode = hashCode * 59 + this.TotalFees.GetHashCode();
                if (this.TotalPrice != null)
                    hashCode = hashCode * 59 + this.TotalPrice.GetHashCode();
                if (this.VendorCurrencyTotal != null)
                    hashCode = hashCode * 59 + this.VendorCurrencyTotal.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
