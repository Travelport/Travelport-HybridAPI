/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Offer
    /// </summary>
    [DataContract]
    public partial class Offer : OfferID,  IEquatable<Offer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Offer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Offer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Offer" /> class.
        /// </summary>
        /// <param name="parentOfferRef">A reference to the Offer this offer is sold in conjunction with.</param>
        /// <param name="product">product (required).</param>
        /// <param name="price">Assigned Type: c-1100:Price (required).</param>
        /// <param name="termsAndConditionsFull">termsAndConditionsFull (required).</param>
        /// <param name="passiveOfferInd">If true, the Offer is passive for booking purposes..</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public Offer(string parentOfferRef = default(string), List<ProductID> product = default(List<ProductID>), Price price = default(Price), List<TermsAndConditionsFullID> termsAndConditionsFull = default(List<TermsAndConditionsFullID>), bool? passiveOfferInd = default(bool?), Object extensionPoint = default(Object), string type = "Offer", string id = default(string), string offerRef = default(string), Identifier identifier = default(Identifier)) : base(type, id, offerRef, identifier)
        {
            // to ensure "product" is required (not null)
            if (product == null)
            {
                throw new InvalidDataException("product is a required property for Offer and cannot be null");
            }
            else
            {
                this.Product = product;
            }
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new InvalidDataException("price is a required property for Offer and cannot be null");
            }
            else
            {
                this.Price = price;
            }
            // to ensure "termsAndConditionsFull" is required (not null)
            if (termsAndConditionsFull == null)
            {
                throw new InvalidDataException("termsAndConditionsFull is a required property for Offer and cannot be null");
            }
            else
            {
                this.TermsAndConditionsFull = termsAndConditionsFull;
            }
            this.ParentOfferRef = parentOfferRef;
            this.PassiveOfferInd = passiveOfferInd;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// A reference to the Offer this offer is sold in conjunction with
        /// </summary>
        /// <value>A reference to the Offer this offer is sold in conjunction with</value>
        [DataMember(Name="parentOfferRef", EmitDefaultValue=false)]
        public string ParentOfferRef { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="Product", EmitDefaultValue=false)]
        public List<ProductID> Product { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:Price
        /// </summary>
        /// <value>Assigned Type: c-1100:Price</value>
        [DataMember(Name="Price", EmitDefaultValue=false)]
        public Price Price { get; set; }

        /// <summary>
        /// Gets or Sets TermsAndConditionsFull
        /// </summary>
        [DataMember(Name="TermsAndConditionsFull", EmitDefaultValue=false)]
        public List<TermsAndConditionsFullID> TermsAndConditionsFull { get; set; }

        /// <summary>
        /// If true, the Offer is passive for booking purposes.
        /// </summary>
        /// <value>If true, the Offer is passive for booking purposes.</value>
        [DataMember(Name="passiveOfferInd", EmitDefaultValue=false)]
        public bool? PassiveOfferInd { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Offer {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ParentOfferRef: ").Append(ParentOfferRef).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  TermsAndConditionsFull: ").Append(TermsAndConditionsFull).Append("\n");
            sb.Append("  PassiveOfferInd: ").Append(PassiveOfferInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Offer);
        }

        /// <summary>
        /// Returns true if Offer instances are equal
        /// </summary>
        /// <param name="input">Instance of Offer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Offer input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.ParentOfferRef == input.ParentOfferRef ||
                    (this.ParentOfferRef != null &&
                    this.ParentOfferRef.Equals(input.ParentOfferRef))
                ) && base.Equals(input) && 
                (
                    this.Product == input.Product ||
                    this.Product != null &&
                    this.Product.SequenceEqual(input.Product)
                ) && base.Equals(input) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && base.Equals(input) && 
                (
                    this.TermsAndConditionsFull == input.TermsAndConditionsFull ||
                    this.TermsAndConditionsFull != null &&
                    this.TermsAndConditionsFull.SequenceEqual(input.TermsAndConditionsFull)
                ) && base.Equals(input) && 
                (
                    this.PassiveOfferInd == input.PassiveOfferInd ||
                    (this.PassiveOfferInd != null &&
                    this.PassiveOfferInd.Equals(input.PassiveOfferInd))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ParentOfferRef != null)
                    hashCode = hashCode * 59 + this.ParentOfferRef.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.TermsAndConditionsFull != null)
                    hashCode = hashCode * 59 + this.TermsAndConditionsFull.GetHashCode();
                if (this.PassiveOfferInd != null)
                    hashCode = hashCode * 59 + this.PassiveOfferInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
