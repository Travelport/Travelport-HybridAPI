/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CurrencyRateConversion
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class CurrencyRateConversion :  IEquatable<CurrencyRateConversion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyRateConversion" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CurrencyRateConversion() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyRateConversion" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="sourceCurrency">Assigned Type: c-1100:CurrencyCode (required).</param>
        /// <param name="targetCurrency">Assigned Type: c-1100:CurrencyCode (required).</param>
        /// <param name="conversionRate">Assigned Type: c-1100:ConversionRate (required).</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public CurrencyRateConversion(string type = default(string), CurrencyCode sourceCurrency = default(CurrencyCode), CurrencyCode targetCurrency = default(CurrencyCode), ConversionRate conversionRate = default(ConversionRate), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for CurrencyRateConversion and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "sourceCurrency" is required (not null)
            if (sourceCurrency == null)
            {
                throw new InvalidDataException("sourceCurrency is a required property for CurrencyRateConversion and cannot be null");
            }
            else
            {
                this.SourceCurrency = sourceCurrency;
            }
            // to ensure "targetCurrency" is required (not null)
            if (targetCurrency == null)
            {
                throw new InvalidDataException("targetCurrency is a required property for CurrencyRateConversion and cannot be null");
            }
            else
            {
                this.TargetCurrency = targetCurrency;
            }
            // to ensure "conversionRate" is required (not null)
            if (conversionRate == null)
            {
                throw new InvalidDataException("conversionRate is a required property for CurrencyRateConversion and cannot be null");
            }
            else
            {
                this.ConversionRate = conversionRate;
            }
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:CurrencyCode
        /// </summary>
        /// <value>Assigned Type: c-1100:CurrencyCode</value>
        [DataMember(Name="SourceCurrency", EmitDefaultValue=false)]
        public CurrencyCode SourceCurrency { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:CurrencyCode
        /// </summary>
        /// <value>Assigned Type: c-1100:CurrencyCode</value>
        [DataMember(Name="TargetCurrency", EmitDefaultValue=false)]
        public CurrencyCode TargetCurrency { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:ConversionRate
        /// </summary>
        /// <value>Assigned Type: c-1100:ConversionRate</value>
        [DataMember(Name="ConversionRate", EmitDefaultValue=false)]
        public ConversionRate ConversionRate { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurrencyRateConversion {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SourceCurrency: ").Append(SourceCurrency).Append("\n");
            sb.Append("  TargetCurrency: ").Append(TargetCurrency).Append("\n");
            sb.Append("  ConversionRate: ").Append(ConversionRate).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurrencyRateConversion);
        }

        /// <summary>
        /// Returns true if CurrencyRateConversion instances are equal
        /// </summary>
        /// <param name="input">Instance of CurrencyRateConversion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrencyRateConversion input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SourceCurrency == input.SourceCurrency ||
                    (this.SourceCurrency != null &&
                    this.SourceCurrency.Equals(input.SourceCurrency))
                ) && 
                (
                    this.TargetCurrency == input.TargetCurrency ||
                    (this.TargetCurrency != null &&
                    this.TargetCurrency.Equals(input.TargetCurrency))
                ) && 
                (
                    this.ConversionRate == input.ConversionRate ||
                    (this.ConversionRate != null &&
                    this.ConversionRate.Equals(input.ConversionRate))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SourceCurrency != null)
                    hashCode = hashCode * 59 + this.SourceCurrency.GetHashCode();
                if (this.TargetCurrency != null)
                    hashCode = hashCode * 59 + this.TargetCurrency.GetHashCode();
                if (this.ConversionRate != null)
                    hashCode = hashCode * 59 + this.ConversionRate.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
