/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FlightSegment
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class FlightSegment :  IEquatable<FlightSegment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightSegment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlightSegment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightSegment" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="id">Local indentifier within a given message for this object..</param>
        /// <param name="sequence">Assigned Type: c-1100:SegmentSequence (required).</param>
        /// <param name="connectionDuration">The actual duration (in minutes) between\\nThe actual.</param>
        /// <param name="flight">Assigned Type: ctar-1100:Flight (required).</param>
        /// <param name="boundFlightsInd">If present and true, the Segments in this Connection must be sold and cancelled together..</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public FlightSegment(string type = default(string), string id = default(string), int? sequence = default(int?), string connectionDuration = default(string), FlightID flight = default(FlightID), bool? boundFlightsInd = default(bool?), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for FlightSegment and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "sequence" is required (not null)
            if (sequence == null)
            {
                throw new InvalidDataException("sequence is a required property for FlightSegment and cannot be null");
            }
            else
            {
                this.Sequence = sequence;
            }
            // to ensure "flight" is required (not null)
            if (flight == null)
            {
                throw new InvalidDataException("flight is a required property for FlightSegment and cannot be null");
            }
            else
            {
                this.Flight = flight;
            }
            this.Id = id;
            this.ConnectionDuration = connectionDuration;
            this.BoundFlightsInd = boundFlightsInd;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Local indentifier within a given message for this object.
        /// </summary>
        /// <value>Local indentifier within a given message for this object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:SegmentSequence
        /// </summary>
        /// <value>Assigned Type: c-1100:SegmentSequence</value>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public int? Sequence { get; set; }

        /// <summary>
        /// The actual duration (in minutes) between\\nThe actual
        /// </summary>
        /// <value>The actual duration (in minutes) between\\nThe actual</value>
        [DataMember(Name="connectionDuration", EmitDefaultValue=false)]
        public string ConnectionDuration { get; set; }

        /// <summary>
        /// Assigned Type: ctar-1100:Flight
        /// </summary>
        /// <value>Assigned Type: ctar-1100:Flight</value>
        [DataMember(Name="Flight", EmitDefaultValue=false)]
        public FlightID Flight { get; set; }

        /// <summary>
        /// If present and true, the Segments in this Connection must be sold and cancelled together.
        /// </summary>
        /// <value>If present and true, the Segments in this Connection must be sold and cancelled together.</value>
        [DataMember(Name="boundFlightsInd", EmitDefaultValue=false)]
        public bool? BoundFlightsInd { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightSegment {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  ConnectionDuration: ").Append(ConnectionDuration).Append("\n");
            sb.Append("  Flight: ").Append(Flight).Append("\n");
            sb.Append("  BoundFlightsInd: ").Append(BoundFlightsInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlightSegment);
        }

        /// <summary>
        /// Returns true if FlightSegment instances are equal
        /// </summary>
        /// <param name="input">Instance of FlightSegment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightSegment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                ) && 
                (
                    this.ConnectionDuration == input.ConnectionDuration ||
                    (this.ConnectionDuration != null &&
                    this.ConnectionDuration.Equals(input.ConnectionDuration))
                ) && 
                (
                    this.Flight == input.Flight ||
                    (this.Flight != null &&
                    this.Flight.Equals(input.Flight))
                ) && 
                (
                    this.BoundFlightsInd == input.BoundFlightsInd ||
                    (this.BoundFlightsInd != null &&
                    this.BoundFlightsInd.Equals(input.BoundFlightsInd))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Sequence != null)
                    hashCode = hashCode * 59 + this.Sequence.GetHashCode();
                if (this.ConnectionDuration != null)
                    hashCode = hashCode * 59 + this.ConnectionDuration.GetHashCode();
                if (this.Flight != null)
                    hashCode = hashCode * 59 + this.Flight.GetHashCode();
                if (this.BoundFlightsInd != null)
                    hashCode = hashCode * 59 + this.BoundFlightsInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
