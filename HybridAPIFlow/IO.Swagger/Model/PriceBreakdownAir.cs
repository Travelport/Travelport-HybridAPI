/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PriceBreakdownAir
    /// </summary>
    [DataContract]
    public partial class PriceBreakdownAir : PriceBreakdown,  IEquatable<PriceBreakdownAir>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceBreakdownAir" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PriceBreakdownAir() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceBreakdownAir" /> class.
        /// </summary>
        /// <param name="quantity">Assigned Type: c-1100:NumberDoubleDigit.</param>
        /// <param name="requestedPassengerType">Assigned Type: c-1100:PassengerTypeCode.</param>
        /// <param name="filedAmount">Assigned Type: c-1100:FiledAmount.</param>
        /// <param name="discount">Assigned Type: c-1100:Discount.</param>
        /// <param name="travelerIdentifierRef">Assigned Type: c-1100:TravelerIdentifierRef.</param>
        /// <param name="netBaseAmount">Assigned Type: c-1100:FiledAmount.</param>
        /// <param name="extensionPointChoice">extensionPointChoice.</param>
        public PriceBreakdownAir(int? quantity = default(int?), string requestedPassengerType = default(string), FiledAmount filedAmount = default(FiledAmount), Discount discount = default(Discount), TravelerIdentifierRef travelerIdentifierRef = default(TravelerIdentifierRef), FiledAmount netBaseAmount = default(FiledAmount), ExtensionPointChoice extensionPointChoice = default(ExtensionPointChoice), string type = "PriceBreakdownAir", Amount amount = default(Amount), Commission commission = default(Commission), Object extensionPoint = default(Object)) : base(type, amount, commission, extensionPoint)
        {
            this.Quantity = quantity;
            this.RequestedPassengerType = requestedPassengerType;
            this.FiledAmount = filedAmount;
            this.Discount = discount;
            this.TravelerIdentifierRef = travelerIdentifierRef;
            this.NetBaseAmount = netBaseAmount;
            this.ExtensionPointChoice = extensionPointChoice;
        }
        
        /// <summary>
        /// Assigned Type: c-1100:NumberDoubleDigit
        /// </summary>
        /// <value>Assigned Type: c-1100:NumberDoubleDigit</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:PassengerTypeCode
        /// </summary>
        /// <value>Assigned Type: c-1100:PassengerTypeCode</value>
        [DataMember(Name="requestedPassengerType", EmitDefaultValue=false)]
        public string RequestedPassengerType { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:FiledAmount
        /// </summary>
        /// <value>Assigned Type: c-1100:FiledAmount</value>
        [DataMember(Name="FiledAmount", EmitDefaultValue=false)]
        public FiledAmount FiledAmount { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:Discount
        /// </summary>
        /// <value>Assigned Type: c-1100:Discount</value>
        [DataMember(Name="Discount", EmitDefaultValue=false)]
        public Discount Discount { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:TravelerIdentifierRef
        /// </summary>
        /// <value>Assigned Type: c-1100:TravelerIdentifierRef</value>
        [DataMember(Name="TravelerIdentifierRef", EmitDefaultValue=false)]
        public TravelerIdentifierRef TravelerIdentifierRef { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:FiledAmount
        /// </summary>
        /// <value>Assigned Type: c-1100:FiledAmount</value>
        [DataMember(Name="NetBaseAmount", EmitDefaultValue=false)]
        public FiledAmount NetBaseAmount { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPointChoice
        /// </summary>
        [DataMember(Name="ExtensionPoint_Choice", EmitDefaultValue=false)]
        public ExtensionPointChoice ExtensionPointChoice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PriceBreakdownAir {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  RequestedPassengerType: ").Append(RequestedPassengerType).Append("\n");
            sb.Append("  FiledAmount: ").Append(FiledAmount).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  TravelerIdentifierRef: ").Append(TravelerIdentifierRef).Append("\n");
            sb.Append("  NetBaseAmount: ").Append(NetBaseAmount).Append("\n");
            sb.Append("  ExtensionPointChoice: ").Append(ExtensionPointChoice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PriceBreakdownAir);
        }

        /// <summary>
        /// Returns true if PriceBreakdownAir instances are equal
        /// </summary>
        /// <param name="input">Instance of PriceBreakdownAir to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriceBreakdownAir input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && base.Equals(input) && 
                (
                    this.RequestedPassengerType == input.RequestedPassengerType ||
                    (this.RequestedPassengerType != null &&
                    this.RequestedPassengerType.Equals(input.RequestedPassengerType))
                ) && base.Equals(input) && 
                (
                    this.FiledAmount == input.FiledAmount ||
                    (this.FiledAmount != null &&
                    this.FiledAmount.Equals(input.FiledAmount))
                ) && base.Equals(input) && 
                (
                    this.Discount == input.Discount ||
                    (this.Discount != null &&
                    this.Discount.Equals(input.Discount))
                ) && base.Equals(input) && 
                (
                    this.TravelerIdentifierRef == input.TravelerIdentifierRef ||
                    (this.TravelerIdentifierRef != null &&
                    this.TravelerIdentifierRef.Equals(input.TravelerIdentifierRef))
                ) && base.Equals(input) && 
                (
                    this.NetBaseAmount == input.NetBaseAmount ||
                    (this.NetBaseAmount != null &&
                    this.NetBaseAmount.Equals(input.NetBaseAmount))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointChoice == input.ExtensionPointChoice ||
                    (this.ExtensionPointChoice != null &&
                    this.ExtensionPointChoice.Equals(input.ExtensionPointChoice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.RequestedPassengerType != null)
                    hashCode = hashCode * 59 + this.RequestedPassengerType.GetHashCode();
                if (this.FiledAmount != null)
                    hashCode = hashCode * 59 + this.FiledAmount.GetHashCode();
                if (this.Discount != null)
                    hashCode = hashCode * 59 + this.Discount.GetHashCode();
                if (this.TravelerIdentifierRef != null)
                    hashCode = hashCode * 59 + this.TravelerIdentifierRef.GetHashCode();
                if (this.NetBaseAmount != null)
                    hashCode = hashCode * 59 + this.NetBaseAmount.GetHashCode();
                if (this.ExtensionPointChoice != null)
                    hashCode = hashCode * 59 + this.ExtensionPointChoice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // RequestedPassengerType (string) maxLength
            if(this.RequestedPassengerType != null && this.RequestedPassengerType.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestedPassengerType, length must be less than 5.", new [] { "RequestedPassengerType" });
            }

            // RequestedPassengerType (string) minLength
            if(this.RequestedPassengerType != null && this.RequestedPassengerType.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestedPassengerType, length must be greater than 3.", new [] { "RequestedPassengerType" });
            }

            // RequestedPassengerType (string) pattern
            Regex regexRequestedPassengerType = new Regex(@"([a-zA-Z0-9]{3,5})", RegexOptions.CultureInvariant);
            if (false == regexRequestedPassengerType.Match(this.RequestedPassengerType).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestedPassengerType, must match a pattern of " + regexRequestedPassengerType, new [] { "RequestedPassengerType" });
            }

            yield break;
        }
    }

}
