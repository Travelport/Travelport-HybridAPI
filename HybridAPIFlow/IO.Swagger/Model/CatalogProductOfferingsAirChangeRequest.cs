/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CatalogProductOfferingsAirChangeRequest
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(CatalogProductOfferingsAirChangeRequestReservation), "CatalogProductOfferingsAirChangeRequestReservation")]
    [JsonSubtypes.KnownSubType(typeof(CatalogProductOfferingsAirChangeRequestDocument), "CatalogProductOfferingsAirChangeRequestDocument")]
    public partial class CatalogProductOfferingsAirChangeRequest :  IEquatable<CatalogProductOfferingsAirChangeRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogProductOfferingsAirChangeRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogProductOfferingsAirChangeRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogProductOfferingsAirChangeRequest" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="catalogProductOfferingsPerPage">Assigned Type: c-1100:NonnegativeInteger.</param>
        /// <param name="searchCriteriaFlight">searchCriteriaFlight (required).</param>
        /// <param name="passengerCriteria">passengerCriteria (required).</param>
        /// <param name="searchModifiersAir">Assigned Type: ctar-1100:SearchModifiersAir.</param>
        /// <param name="pricingModifiersAirChange">Assigned Type: ctar-1100:PricingModifiersAirChange.</param>
        /// <param name="searchControlConsoleChannelID">Assigned Type: c-1100:SearchControlConsoleChannelID.</param>
        /// <param name="returnBrandedFaresInd">returnBrandedFaresInd.</param>
        /// <param name="upsellInd">upsellInd.</param>
        /// <param name="detailViewInd">detailViewInd.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public CatalogProductOfferingsAirChangeRequest(string type = default(string), int? catalogProductOfferingsPerPage = default(int?), List<SearchCriteriaFlight> searchCriteriaFlight = default(List<SearchCriteriaFlight>), List<PassengerCriteria> passengerCriteria = default(List<PassengerCriteria>), SearchModifiersAir searchModifiersAir = default(SearchModifiersAir), PricingModifiersAirChange pricingModifiersAirChange = default(PricingModifiersAirChange), SearchControlConsoleChannelID searchControlConsoleChannelID = default(SearchControlConsoleChannelID), bool? returnBrandedFaresInd = default(bool?), bool? upsellInd = default(bool?), bool? detailViewInd = default(bool?), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for CatalogProductOfferingsAirChangeRequest and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "searchCriteriaFlight" is required (not null)
            if (searchCriteriaFlight == null)
            {
                throw new InvalidDataException("searchCriteriaFlight is a required property for CatalogProductOfferingsAirChangeRequest and cannot be null");
            }
            else
            {
                this.SearchCriteriaFlight = searchCriteriaFlight;
            }
            // to ensure "passengerCriteria" is required (not null)
            if (passengerCriteria == null)
            {
                throw new InvalidDataException("passengerCriteria is a required property for CatalogProductOfferingsAirChangeRequest and cannot be null");
            }
            else
            {
                this.PassengerCriteria = passengerCriteria;
            }
            this.CatalogProductOfferingsPerPage = catalogProductOfferingsPerPage;
            this.SearchModifiersAir = searchModifiersAir;
            this.PricingModifiersAirChange = pricingModifiersAirChange;
            this.SearchControlConsoleChannelID = searchControlConsoleChannelID;
            this.ReturnBrandedFaresInd = returnBrandedFaresInd;
            this.UpsellInd = upsellInd;
            this.DetailViewInd = detailViewInd;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:NonnegativeInteger
        /// </summary>
        /// <value>Assigned Type: c-1100:NonnegativeInteger</value>
        [DataMember(Name="catalogProductOfferingsPerPage", EmitDefaultValue=false)]
        public int? CatalogProductOfferingsPerPage { get; set; }

        /// <summary>
        /// Gets or Sets SearchCriteriaFlight
        /// </summary>
        [DataMember(Name="SearchCriteriaFlight", EmitDefaultValue=false)]
        public List<SearchCriteriaFlight> SearchCriteriaFlight { get; set; }

        /// <summary>
        /// Gets or Sets PassengerCriteria
        /// </summary>
        [DataMember(Name="PassengerCriteria", EmitDefaultValue=false)]
        public List<PassengerCriteria> PassengerCriteria { get; set; }

        /// <summary>
        /// Assigned Type: ctar-1100:SearchModifiersAir
        /// </summary>
        /// <value>Assigned Type: ctar-1100:SearchModifiersAir</value>
        [DataMember(Name="SearchModifiersAir", EmitDefaultValue=false)]
        public SearchModifiersAir SearchModifiersAir { get; set; }

        /// <summary>
        /// Assigned Type: ctar-1100:PricingModifiersAirChange
        /// </summary>
        /// <value>Assigned Type: ctar-1100:PricingModifiersAirChange</value>
        [DataMember(Name="PricingModifiersAirChange", EmitDefaultValue=false)]
        public PricingModifiersAirChange PricingModifiersAirChange { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:SearchControlConsoleChannelID
        /// </summary>
        /// <value>Assigned Type: c-1100:SearchControlConsoleChannelID</value>
        [DataMember(Name="SearchControlConsoleChannelID", EmitDefaultValue=false)]
        public SearchControlConsoleChannelID SearchControlConsoleChannelID { get; set; }

        /// <summary>
        /// Gets or Sets ReturnBrandedFaresInd
        /// </summary>
        [DataMember(Name="returnBrandedFaresInd", EmitDefaultValue=false)]
        public bool? ReturnBrandedFaresInd { get; set; }

        /// <summary>
        /// Gets or Sets UpsellInd
        /// </summary>
        [DataMember(Name="upsellInd", EmitDefaultValue=false)]
        public bool? UpsellInd { get; set; }

        /// <summary>
        /// Gets or Sets DetailViewInd
        /// </summary>
        [DataMember(Name="detailViewInd", EmitDefaultValue=false)]
        public bool? DetailViewInd { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogProductOfferingsAirChangeRequest {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CatalogProductOfferingsPerPage: ").Append(CatalogProductOfferingsPerPage).Append("\n");
            sb.Append("  SearchCriteriaFlight: ").Append(SearchCriteriaFlight).Append("\n");
            sb.Append("  PassengerCriteria: ").Append(PassengerCriteria).Append("\n");
            sb.Append("  SearchModifiersAir: ").Append(SearchModifiersAir).Append("\n");
            sb.Append("  PricingModifiersAirChange: ").Append(PricingModifiersAirChange).Append("\n");
            sb.Append("  SearchControlConsoleChannelID: ").Append(SearchControlConsoleChannelID).Append("\n");
            sb.Append("  ReturnBrandedFaresInd: ").Append(ReturnBrandedFaresInd).Append("\n");
            sb.Append("  UpsellInd: ").Append(UpsellInd).Append("\n");
            sb.Append("  DetailViewInd: ").Append(DetailViewInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CatalogProductOfferingsAirChangeRequest);
        }

        /// <summary>
        /// Returns true if CatalogProductOfferingsAirChangeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CatalogProductOfferingsAirChangeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogProductOfferingsAirChangeRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CatalogProductOfferingsPerPage == input.CatalogProductOfferingsPerPage ||
                    (this.CatalogProductOfferingsPerPage != null &&
                    this.CatalogProductOfferingsPerPage.Equals(input.CatalogProductOfferingsPerPage))
                ) && 
                (
                    this.SearchCriteriaFlight == input.SearchCriteriaFlight ||
                    this.SearchCriteriaFlight != null &&
                    this.SearchCriteriaFlight.SequenceEqual(input.SearchCriteriaFlight)
                ) && 
                (
                    this.PassengerCriteria == input.PassengerCriteria ||
                    this.PassengerCriteria != null &&
                    this.PassengerCriteria.SequenceEqual(input.PassengerCriteria)
                ) && 
                (
                    this.SearchModifiersAir == input.SearchModifiersAir ||
                    (this.SearchModifiersAir != null &&
                    this.SearchModifiersAir.Equals(input.SearchModifiersAir))
                ) && 
                (
                    this.PricingModifiersAirChange == input.PricingModifiersAirChange ||
                    (this.PricingModifiersAirChange != null &&
                    this.PricingModifiersAirChange.Equals(input.PricingModifiersAirChange))
                ) && 
                (
                    this.SearchControlConsoleChannelID == input.SearchControlConsoleChannelID ||
                    (this.SearchControlConsoleChannelID != null &&
                    this.SearchControlConsoleChannelID.Equals(input.SearchControlConsoleChannelID))
                ) && 
                (
                    this.ReturnBrandedFaresInd == input.ReturnBrandedFaresInd ||
                    (this.ReturnBrandedFaresInd != null &&
                    this.ReturnBrandedFaresInd.Equals(input.ReturnBrandedFaresInd))
                ) && 
                (
                    this.UpsellInd == input.UpsellInd ||
                    (this.UpsellInd != null &&
                    this.UpsellInd.Equals(input.UpsellInd))
                ) && 
                (
                    this.DetailViewInd == input.DetailViewInd ||
                    (this.DetailViewInd != null &&
                    this.DetailViewInd.Equals(input.DetailViewInd))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.CatalogProductOfferingsPerPage != null)
                    hashCode = hashCode * 59 + this.CatalogProductOfferingsPerPage.GetHashCode();
                if (this.SearchCriteriaFlight != null)
                    hashCode = hashCode * 59 + this.SearchCriteriaFlight.GetHashCode();
                if (this.PassengerCriteria != null)
                    hashCode = hashCode * 59 + this.PassengerCriteria.GetHashCode();
                if (this.SearchModifiersAir != null)
                    hashCode = hashCode * 59 + this.SearchModifiersAir.GetHashCode();
                if (this.PricingModifiersAirChange != null)
                    hashCode = hashCode * 59 + this.PricingModifiersAirChange.GetHashCode();
                if (this.SearchControlConsoleChannelID != null)
                    hashCode = hashCode * 59 + this.SearchControlConsoleChannelID.GetHashCode();
                if (this.ReturnBrandedFaresInd != null)
                    hashCode = hashCode * 59 + this.ReturnBrandedFaresInd.GetHashCode();
                if (this.UpsellInd != null)
                    hashCode = hashCode * 59 + this.UpsellInd.GetHashCode();
                if (this.DetailViewInd != null)
                    hashCode = hashCode * 59 + this.DetailViewInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // CatalogProductOfferingsPerPage (int?) minimum
            if(this.CatalogProductOfferingsPerPage < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CatalogProductOfferingsPerPage, must be a value greater than or equal to 0.", new [] { "CatalogProductOfferingsPerPage" });
            }

            yield break;
        }
    }

}
