/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BaggageRecheck
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class BaggageRecheck :  IEquatable<BaggageRecheck>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BaggageRecheck" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BaggageRecheck() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BaggageRecheck" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="at">The city where the baggage recheck is required (required).</param>
        /// <param name="arrivalFlight">Assigned Type: ctar-1100:ArrivalFlight (required).</param>
        /// <param name="departureFlight">Assigned Type: ctar-1100:DepartureFlight (required).</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public BaggageRecheck(string type = default(string), string at = default(string), ArrivalFlightID arrivalFlight = default(ArrivalFlightID), DepartureFlightID departureFlight = default(DepartureFlightID), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for BaggageRecheck and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "at" is required (not null)
            if (at == null)
            {
                throw new InvalidDataException("at is a required property for BaggageRecheck and cannot be null");
            }
            else
            {
                this.At = at;
            }
            // to ensure "arrivalFlight" is required (not null)
            if (arrivalFlight == null)
            {
                throw new InvalidDataException("arrivalFlight is a required property for BaggageRecheck and cannot be null");
            }
            else
            {
                this.ArrivalFlight = arrivalFlight;
            }
            // to ensure "departureFlight" is required (not null)
            if (departureFlight == null)
            {
                throw new InvalidDataException("departureFlight is a required property for BaggageRecheck and cannot be null");
            }
            else
            {
                this.DepartureFlight = departureFlight;
            }
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The city where the baggage recheck is required
        /// </summary>
        /// <value>The city where the baggage recheck is required</value>
        [DataMember(Name="At", EmitDefaultValue=false)]
        public string At { get; set; }

        /// <summary>
        /// Assigned Type: ctar-1100:ArrivalFlight
        /// </summary>
        /// <value>Assigned Type: ctar-1100:ArrivalFlight</value>
        [DataMember(Name="ArrivalFlight", EmitDefaultValue=false)]
        public ArrivalFlightID ArrivalFlight { get; set; }

        /// <summary>
        /// Assigned Type: ctar-1100:DepartureFlight
        /// </summary>
        /// <value>Assigned Type: ctar-1100:DepartureFlight</value>
        [DataMember(Name="DepartureFlight", EmitDefaultValue=false)]
        public DepartureFlightID DepartureFlight { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaggageRecheck {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  At: ").Append(At).Append("\n");
            sb.Append("  ArrivalFlight: ").Append(ArrivalFlight).Append("\n");
            sb.Append("  DepartureFlight: ").Append(DepartureFlight).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BaggageRecheck);
        }

        /// <summary>
        /// Returns true if BaggageRecheck instances are equal
        /// </summary>
        /// <param name="input">Instance of BaggageRecheck to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaggageRecheck input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.At == input.At ||
                    (this.At != null &&
                    this.At.Equals(input.At))
                ) && 
                (
                    this.ArrivalFlight == input.ArrivalFlight ||
                    (this.ArrivalFlight != null &&
                    this.ArrivalFlight.Equals(input.ArrivalFlight))
                ) && 
                (
                    this.DepartureFlight == input.DepartureFlight ||
                    (this.DepartureFlight != null &&
                    this.DepartureFlight.Equals(input.DepartureFlight))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.At != null)
                    hashCode = hashCode * 59 + this.At.GetHashCode();
                if (this.ArrivalFlight != null)
                    hashCode = hashCode * 59 + this.ArrivalFlight.GetHashCode();
                if (this.DepartureFlight != null)
                    hashCode = hashCode * 59 + this.DepartureFlight.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // At (string) maxLength
            if(this.At != null && this.At.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for At, length must be less than 3.", new [] { "At" });
            }

            // At (string) minLength
            if(this.At != null && this.At.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for At, length must be greater than 3.", new [] { "At" });
            }

            // At (string) pattern
            Regex regexAt = new Regex(@"([a-zA-Z]{3})", RegexOptions.CultureInvariant);
            if (false == regexAt.Match(this.At).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for At, must match a pattern of " + regexAt, new [] { "At" });
            }

            yield break;
        }
    }

}
