/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TermsAndConditionsAncillary
    /// </summary>
    [DataContract]
    public partial class TermsAndConditionsAncillary : TermsAndConditions,  IEquatable<TermsAndConditionsAncillary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TermsAndConditionsAncillary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TermsAndConditionsAncillary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TermsAndConditionsAncillary" /> class.
        /// </summary>
        /// <param name="applicationLimit">Assigned Type: ctan-1100:ApplicationLimit (required).</param>
        /// <param name="refundability">Assigned Type: ctan-1100:RefundabilityEnum.</param>
        /// <param name="unsellableInd">If true, this ancillary product can not be sold through Travelport systems.</param>
        /// <param name="extensionPointCustom">extensionPointCustom.</param>
        public TermsAndConditionsAncillary(ApplicationLimit applicationLimit = default(ApplicationLimit), RefundabilityEnum refundability = default(RefundabilityEnum), bool? unsellableInd = default(bool?), ExtensionPointCustom extensionPointCustom = default(ExtensionPointCustom), string type = default(string), string id = default(string), string termsAndConditionsRef = default(string), Identifier identifier = default(Identifier), DateTime? expiryDate = default(DateTime?), List<CustomerLoyalty> customerLoyalty = default(List<CustomerLoyalty>), List<TravelerProduct> travelerProduct = default(List<TravelerProduct>), Object extensionPoint = default(Object)) : base(expiryDate, customerLoyalty, travelerProduct, extensionPoint)
        {
            // to ensure "applicationLimit" is required (not null)
            if (applicationLimit == null)
            {
                throw new InvalidDataException("applicationLimit is a required property for TermsAndConditionsAncillary and cannot be null");
            }
            else
            {
                this.ApplicationLimit = applicationLimit;
            }
            this.Refundability = refundability;
            this.UnsellableInd = unsellableInd;
            this.ExtensionPointCustom = extensionPointCustom;
        }
        
        /// <summary>
        /// Assigned Type: ctan-1100:ApplicationLimit
        /// </summary>
        /// <value>Assigned Type: ctan-1100:ApplicationLimit</value>
        [DataMember(Name="ApplicationLimit", EmitDefaultValue=false)]
        public ApplicationLimit ApplicationLimit { get; set; }

        /// <summary>
        /// Assigned Type: ctan-1100:RefundabilityEnum
        /// </summary>
        /// <value>Assigned Type: ctan-1100:RefundabilityEnum</value>
        [DataMember(Name="Refundability", EmitDefaultValue=false)]
        public RefundabilityEnum Refundability { get; set; }

        /// <summary>
        /// If true, this ancillary product can not be sold through Travelport systems
        /// </summary>
        /// <value>If true, this ancillary product can not be sold through Travelport systems</value>
        [DataMember(Name="unsellableInd", EmitDefaultValue=false)]
        public bool? UnsellableInd { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPointCustom
        /// </summary>
        [DataMember(Name="ExtensionPoint_Custom", EmitDefaultValue=false)]
        public ExtensionPointCustom ExtensionPointCustom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TermsAndConditionsAncillary {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ApplicationLimit: ").Append(ApplicationLimit).Append("\n");
            sb.Append("  Refundability: ").Append(Refundability).Append("\n");
            sb.Append("  UnsellableInd: ").Append(UnsellableInd).Append("\n");
            sb.Append("  ExtensionPointCustom: ").Append(ExtensionPointCustom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TermsAndConditionsAncillary);
        }

        /// <summary>
        /// Returns true if TermsAndConditionsAncillary instances are equal
        /// </summary>
        /// <param name="input">Instance of TermsAndConditionsAncillary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TermsAndConditionsAncillary input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.ApplicationLimit == input.ApplicationLimit ||
                    (this.ApplicationLimit != null &&
                    this.ApplicationLimit.Equals(input.ApplicationLimit))
                ) && base.Equals(input) && 
                (
                    this.Refundability == input.Refundability ||
                    (this.Refundability != null &&
                    this.Refundability.Equals(input.Refundability))
                ) && base.Equals(input) && 
                (
                    this.UnsellableInd == input.UnsellableInd ||
                    (this.UnsellableInd != null &&
                    this.UnsellableInd.Equals(input.UnsellableInd))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointCustom == input.ExtensionPointCustom ||
                    (this.ExtensionPointCustom != null &&
                    this.ExtensionPointCustom.Equals(input.ExtensionPointCustom))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ApplicationLimit != null)
                    hashCode = hashCode * 59 + this.ApplicationLimit.GetHashCode();
                if (this.Refundability != null)
                    hashCode = hashCode * 59 + this.Refundability.GetHashCode();
                if (this.UnsellableInd != null)
                    hashCode = hashCode * 59 + this.UnsellableInd.GetHashCode();
                if (this.ExtensionPointCustom != null)
                    hashCode = hashCode * 59 + this.ExtensionPointCustom.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
