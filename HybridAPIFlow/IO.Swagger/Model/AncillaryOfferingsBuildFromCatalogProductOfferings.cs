/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AncillaryOfferingsBuildFromCatalogProductOfferings
    /// </summary>
    [DataContract]
    public partial class AncillaryOfferingsBuildFromCatalogProductOfferings : AncillaryOfferings,  IEquatable<AncillaryOfferingsBuildFromCatalogProductOfferings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AncillaryOfferingsBuildFromCatalogProductOfferings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AncillaryOfferingsBuildFromCatalogProductOfferings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AncillaryOfferingsBuildFromCatalogProductOfferings" /> class.
        /// </summary>
        /// <param name="buildFromCatalogProductOfferingsRequest">Assigned Type: ctlg-1100:BuildFromCatalogProductOfferingsRequest (required).</param>
        /// <param name="extensionPointChoice">extensionPointChoice.</param>
        public AncillaryOfferingsBuildFromCatalogProductOfferings(BuildFromCatalogProductOfferingsRequest buildFromCatalogProductOfferingsRequest = default(BuildFromCatalogProductOfferingsRequest), ExtensionPointChoice extensionPointChoice = default(ExtensionPointChoice), string type = "AncillaryOfferingsBuildFromCatalogProductOfferings", bool? includeUnsellableAncillariesInd = default(bool?), Object extensionPoint = default(Object)) : base(type, includeUnsellableAncillariesInd, extensionPoint)
        {
            // to ensure "buildFromCatalogProductOfferingsRequest" is required (not null)
            if (buildFromCatalogProductOfferingsRequest == null)
            {
                throw new InvalidDataException("buildFromCatalogProductOfferingsRequest is a required property for AncillaryOfferingsBuildFromCatalogProductOfferings and cannot be null");
            }
            else
            {
                this.BuildFromCatalogProductOfferingsRequest = buildFromCatalogProductOfferingsRequest;
            }
            this.ExtensionPointChoice = extensionPointChoice;
        }
        
        /// <summary>
        /// Assigned Type: ctlg-1100:BuildFromCatalogProductOfferingsRequest
        /// </summary>
        /// <value>Assigned Type: ctlg-1100:BuildFromCatalogProductOfferingsRequest</value>
        [DataMember(Name="BuildFromCatalogProductOfferingsRequest", EmitDefaultValue=false)]
        public BuildFromCatalogProductOfferingsRequest BuildFromCatalogProductOfferingsRequest { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPointChoice
        /// </summary>
        [DataMember(Name="ExtensionPoint_Choice", EmitDefaultValue=false)]
        public ExtensionPointChoice ExtensionPointChoice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AncillaryOfferingsBuildFromCatalogProductOfferings {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BuildFromCatalogProductOfferingsRequest: ").Append(BuildFromCatalogProductOfferingsRequest).Append("\n");
            sb.Append("  ExtensionPointChoice: ").Append(ExtensionPointChoice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AncillaryOfferingsBuildFromCatalogProductOfferings);
        }

        /// <summary>
        /// Returns true if AncillaryOfferingsBuildFromCatalogProductOfferings instances are equal
        /// </summary>
        /// <param name="input">Instance of AncillaryOfferingsBuildFromCatalogProductOfferings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AncillaryOfferingsBuildFromCatalogProductOfferings input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.BuildFromCatalogProductOfferingsRequest == input.BuildFromCatalogProductOfferingsRequest ||
                    (this.BuildFromCatalogProductOfferingsRequest != null &&
                    this.BuildFromCatalogProductOfferingsRequest.Equals(input.BuildFromCatalogProductOfferingsRequest))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointChoice == input.ExtensionPointChoice ||
                    (this.ExtensionPointChoice != null &&
                    this.ExtensionPointChoice.Equals(input.ExtensionPointChoice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.BuildFromCatalogProductOfferingsRequest != null)
                    hashCode = hashCode * 59 + this.BuildFromCatalogProductOfferingsRequest.GetHashCode();
                if (this.ExtensionPointChoice != null)
                    hashCode = hashCode * 59 + this.ExtensionPointChoice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
