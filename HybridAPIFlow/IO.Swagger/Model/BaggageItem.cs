/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BaggageItem
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class BaggageItem :  IEquatable<BaggageItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BaggageItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BaggageItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BaggageItem" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="quantity">Assigned Type: c-1100:NumberSingleDigit.</param>
        /// <param name="measurement">measurement.</param>
        /// <param name="baggageFee">Assigned Type: c-1100:CurrencyAmount.</param>
        /// <param name="text">Text returned from the shop response.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public BaggageItem(string type = default(string), int? quantity = default(int?), List<Measurement> measurement = default(List<Measurement>), CurrencyAmount baggageFee = default(CurrencyAmount), string text = default(string), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for BaggageItem and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Quantity = quantity;
            this.Measurement = measurement;
            this.BaggageFee = baggageFee;
            this.Text = text;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:NumberSingleDigit
        /// </summary>
        /// <value>Assigned Type: c-1100:NumberSingleDigit</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Measurement
        /// </summary>
        [DataMember(Name="Measurement", EmitDefaultValue=false)]
        public List<Measurement> Measurement { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:CurrencyAmount
        /// </summary>
        /// <value>Assigned Type: c-1100:CurrencyAmount</value>
        [DataMember(Name="BaggageFee", EmitDefaultValue=false)]
        public CurrencyAmount BaggageFee { get; set; }

        /// <summary>
        /// Text returned from the shop response
        /// </summary>
        /// <value>Text returned from the shop response</value>
        [DataMember(Name="Text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaggageItem {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Measurement: ").Append(Measurement).Append("\n");
            sb.Append("  BaggageFee: ").Append(BaggageFee).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BaggageItem);
        }

        /// <summary>
        /// Returns true if BaggageItem instances are equal
        /// </summary>
        /// <param name="input">Instance of BaggageItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaggageItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Measurement == input.Measurement ||
                    this.Measurement != null &&
                    this.Measurement.SequenceEqual(input.Measurement)
                ) && 
                (
                    this.BaggageFee == input.BaggageFee ||
                    (this.BaggageFee != null &&
                    this.BaggageFee.Equals(input.BaggageFee))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Measurement != null)
                    hashCode = hashCode * 59 + this.Measurement.GetHashCode();
                if (this.BaggageFee != null)
                    hashCode = hashCode * 59 + this.BaggageFee.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // Text (string) maxLength
            if(this.Text != null && this.Text.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Text, length must be less than 128.", new [] { "Text" });
            }

            yield break;
        }
    }

}
