/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ProductAncillary
    /// </summary>
    [DataContract]
    public partial class ProductAncillary : Product,  IEquatable<ProductAncillary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductAncillary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductAncillary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductAncillary" /> class.
        /// </summary>
        /// <param name="ancillary">Assigned Type: ctan-1100:Ancillary.</param>
        /// <param name="selectedByDefaultInd">selectedByDefaultInd.</param>
        /// <param name="extensionPointCustom">extensionPointCustom.</param>
        public ProductAncillary(Ancillary ancillary = default(Ancillary), bool? selectedByDefaultInd = default(bool?), ExtensionPointCustom extensionPointCustom = default(ExtensionPointCustom), string type = default(string), string id = default(string), string productRef = default(string), Identifier identifier = default(Identifier), int? quantity = default(int?), Object extensionPoint = default(Object)) : base(quantity, extensionPoint)
        {
            this.Ancillary = ancillary;
            this.SelectedByDefaultInd = selectedByDefaultInd;
            this.ExtensionPointCustom = extensionPointCustom;
        }
        
        /// <summary>
        /// Assigned Type: ctan-1100:Ancillary
        /// </summary>
        /// <value>Assigned Type: ctan-1100:Ancillary</value>
        [DataMember(Name="Ancillary", EmitDefaultValue=false)]
        public Ancillary Ancillary { get; set; }

        /// <summary>
        /// Gets or Sets SelectedByDefaultInd
        /// </summary>
        [DataMember(Name="selectedByDefaultInd", EmitDefaultValue=false)]
        public bool? SelectedByDefaultInd { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPointCustom
        /// </summary>
        [DataMember(Name="ExtensionPoint_Custom", EmitDefaultValue=false)]
        public ExtensionPointCustom ExtensionPointCustom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductAncillary {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Ancillary: ").Append(Ancillary).Append("\n");
            sb.Append("  SelectedByDefaultInd: ").Append(SelectedByDefaultInd).Append("\n");
            sb.Append("  ExtensionPointCustom: ").Append(ExtensionPointCustom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductAncillary);
        }

        /// <summary>
        /// Returns true if ProductAncillary instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductAncillary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductAncillary input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Ancillary == input.Ancillary ||
                    (this.Ancillary != null &&
                    this.Ancillary.Equals(input.Ancillary))
                ) && base.Equals(input) && 
                (
                    this.SelectedByDefaultInd == input.SelectedByDefaultInd ||
                    (this.SelectedByDefaultInd != null &&
                    this.SelectedByDefaultInd.Equals(input.SelectedByDefaultInd))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointCustom == input.ExtensionPointCustom ||
                    (this.ExtensionPointCustom != null &&
                    this.ExtensionPointCustom.Equals(input.ExtensionPointCustom))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Ancillary != null)
                    hashCode = hashCode * 59 + this.Ancillary.GetHashCode();
                if (this.SelectedByDefaultInd != null)
                    hashCode = hashCode * 59 + this.SelectedByDefaultInd.GetHashCode();
                if (this.ExtensionPointCustom != null)
                    hashCode = hashCode * 59 + this.ExtensionPointCustom.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
