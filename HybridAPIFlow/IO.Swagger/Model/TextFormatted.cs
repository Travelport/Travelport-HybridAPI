/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Provides text and indicates whether it is formatted or not.
    /// </summary>
    [DataContract]
    public partial class TextFormatted :  IEquatable<TextFormatted>, IValidatableObject
    {
        /// <summary>
        /// Indicates the format of text used in the description e.g. plain text or html.
        /// </summary>
        /// <value>Indicates the format of text used in the description e.g. plain text or html.</value>
        [DataMember(Name="textFormat", EmitDefaultValue=false)]
        public TextFormatEnum? TextFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextFormatted" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="language">The language in which the text is provided..</param>
        /// <param name="textFormat">Indicates the format of text used in the description e.g. plain text or html..</param>
        public TextFormatted(string value = default(string), string language = default(string), TextFormatEnum? textFormat = default(TextFormatEnum?))
        {
            this.Value = value;
            this.Language = language;
            this.TextFormat = textFormat;
        }
        
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// The language in which the text is provided.
        /// </summary>
        /// <value>The language in which the text is provided.</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TextFormatted {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  TextFormat: ").Append(TextFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TextFormatted);
        }

        /// <summary>
        /// Returns true if TextFormatted instances are equal
        /// </summary>
        /// <param name="input">Instance of TextFormatted to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TextFormatted input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.TextFormat == input.TextFormat ||
                    (this.TextFormat != null &&
                    this.TextFormat.Equals(input.TextFormat))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.TextFormat != null)
                    hashCode = hashCode * 59 + this.TextFormat.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if(this.Value != null && this.Value.Length > 4096)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 4096.", new [] { "Value" });
            }

            yield break;
        }
    }

}
