/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BuildFromCatalogProductOfferingsRequestAir
    /// </summary>
    [DataContract]
    public partial class BuildFromCatalogProductOfferingsRequestAir : BuildFromCatalogProductOfferingsRequest,  IEquatable<BuildFromCatalogProductOfferingsRequestAir>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildFromCatalogProductOfferingsRequestAir" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BuildFromCatalogProductOfferingsRequestAir() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildFromCatalogProductOfferingsRequestAir" /> class.
        /// </summary>
        /// <param name="pricingModifiersAir">Assigned Type: ctar-1100:PricingModifiersAir.</param>
        /// <param name="cabinPreference">Assigned Type: ctar-1100:CabinPreference.</param>
        /// <param name="fareRuleCategory">fareRuleCategory.</param>
        /// <param name="fareRuleType">Assigned Type: ctlg-1100:FareRuleEnum.</param>
        /// <param name="lowFareFinderInd">If true, the price service will return the lowest fare available for the itinerary requested.</param>
        /// <param name="reCheckInventoryInd">If true, the price service will recheck inventory at the time of pricing the Offer.</param>
        /// <param name="inhibitBrandContentInd">If true, Brand content will not be returned with the Offer.</param>
        /// <param name="extensionPointChoice">extensionPointChoice.</param>
        public BuildFromCatalogProductOfferingsRequestAir(PricingModifiersAir pricingModifiersAir = default(PricingModifiersAir), CabinPreference cabinPreference = default(CabinPreference), List<FareRuleCategoryEnum> fareRuleCategory = default(List<FareRuleCategoryEnum>), FareRuleEnum fareRuleType = default(FareRuleEnum), bool? lowFareFinderInd = default(bool?), bool? reCheckInventoryInd = default(bool?), bool? inhibitBrandContentInd = default(bool?), ExtensionPointChoice extensionPointChoice = default(ExtensionPointChoice), string type = "BuildFromCatalogProductOfferingsRequestAir", CatalogProductOfferingsIdentifier catalogProductOfferingsIdentifier = default(CatalogProductOfferingsIdentifier), List<CatalogProductOfferingSelection> catalogProductOfferingSelection = default(List<CatalogProductOfferingSelection>), UpsellOfferingIdentifier upsellOfferingIdentifier = default(UpsellOfferingIdentifier), Object extensionPoint = default(Object)) : base(type, catalogProductOfferingsIdentifier, catalogProductOfferingSelection, upsellOfferingIdentifier, extensionPoint)
        {
            this.PricingModifiersAir = pricingModifiersAir;
            this.CabinPreference = cabinPreference;
            this.FareRuleCategory = fareRuleCategory;
            this.FareRuleType = fareRuleType;
            this.LowFareFinderInd = lowFareFinderInd;
            this.ReCheckInventoryInd = reCheckInventoryInd;
            this.InhibitBrandContentInd = inhibitBrandContentInd;
            this.ExtensionPointChoice = extensionPointChoice;
        }
        
        /// <summary>
        /// Assigned Type: ctar-1100:PricingModifiersAir
        /// </summary>
        /// <value>Assigned Type: ctar-1100:PricingModifiersAir</value>
        [DataMember(Name="PricingModifiersAir", EmitDefaultValue=false)]
        public PricingModifiersAir PricingModifiersAir { get; set; }

        /// <summary>
        /// Assigned Type: ctar-1100:CabinPreference
        /// </summary>
        /// <value>Assigned Type: ctar-1100:CabinPreference</value>
        [DataMember(Name="CabinPreference", EmitDefaultValue=false)]
        public CabinPreference CabinPreference { get; set; }

        /// <summary>
        /// Gets or Sets FareRuleCategory
        /// </summary>
        [DataMember(Name="FareRuleCategory", EmitDefaultValue=false)]
        public List<FareRuleCategoryEnum> FareRuleCategory { get; set; }

        /// <summary>
        /// Assigned Type: ctlg-1100:FareRuleEnum
        /// </summary>
        /// <value>Assigned Type: ctlg-1100:FareRuleEnum</value>
        [DataMember(Name="FareRuleType", EmitDefaultValue=false)]
        public FareRuleEnum FareRuleType { get; set; }

        /// <summary>
        /// If true, the price service will return the lowest fare available for the itinerary requested
        /// </summary>
        /// <value>If true, the price service will return the lowest fare available for the itinerary requested</value>
        [DataMember(Name="lowFareFinderInd", EmitDefaultValue=false)]
        public bool? LowFareFinderInd { get; set; }

        /// <summary>
        /// If true, the price service will recheck inventory at the time of pricing the Offer
        /// </summary>
        /// <value>If true, the price service will recheck inventory at the time of pricing the Offer</value>
        [DataMember(Name="reCheckInventoryInd", EmitDefaultValue=false)]
        public bool? ReCheckInventoryInd { get; set; }

        /// <summary>
        /// If true, Brand content will not be returned with the Offer
        /// </summary>
        /// <value>If true, Brand content will not be returned with the Offer</value>
        [DataMember(Name="inhibitBrandContentInd", EmitDefaultValue=false)]
        public bool? InhibitBrandContentInd { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPointChoice
        /// </summary>
        [DataMember(Name="ExtensionPoint_Choice", EmitDefaultValue=false)]
        public ExtensionPointChoice ExtensionPointChoice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildFromCatalogProductOfferingsRequestAir {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  PricingModifiersAir: ").Append(PricingModifiersAir).Append("\n");
            sb.Append("  CabinPreference: ").Append(CabinPreference).Append("\n");
            sb.Append("  FareRuleCategory: ").Append(FareRuleCategory).Append("\n");
            sb.Append("  FareRuleType: ").Append(FareRuleType).Append("\n");
            sb.Append("  LowFareFinderInd: ").Append(LowFareFinderInd).Append("\n");
            sb.Append("  ReCheckInventoryInd: ").Append(ReCheckInventoryInd).Append("\n");
            sb.Append("  InhibitBrandContentInd: ").Append(InhibitBrandContentInd).Append("\n");
            sb.Append("  ExtensionPointChoice: ").Append(ExtensionPointChoice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildFromCatalogProductOfferingsRequestAir);
        }

        /// <summary>
        /// Returns true if BuildFromCatalogProductOfferingsRequestAir instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildFromCatalogProductOfferingsRequestAir to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildFromCatalogProductOfferingsRequestAir input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.PricingModifiersAir == input.PricingModifiersAir ||
                    (this.PricingModifiersAir != null &&
                    this.PricingModifiersAir.Equals(input.PricingModifiersAir))
                ) && base.Equals(input) && 
                (
                    this.CabinPreference == input.CabinPreference ||
                    (this.CabinPreference != null &&
                    this.CabinPreference.Equals(input.CabinPreference))
                ) && base.Equals(input) && 
                (
                    this.FareRuleCategory == input.FareRuleCategory ||
                    this.FareRuleCategory != null &&
                    this.FareRuleCategory.SequenceEqual(input.FareRuleCategory)
                ) && base.Equals(input) && 
                (
                    this.FareRuleType == input.FareRuleType ||
                    (this.FareRuleType != null &&
                    this.FareRuleType.Equals(input.FareRuleType))
                ) && base.Equals(input) && 
                (
                    this.LowFareFinderInd == input.LowFareFinderInd ||
                    (this.LowFareFinderInd != null &&
                    this.LowFareFinderInd.Equals(input.LowFareFinderInd))
                ) && base.Equals(input) && 
                (
                    this.ReCheckInventoryInd == input.ReCheckInventoryInd ||
                    (this.ReCheckInventoryInd != null &&
                    this.ReCheckInventoryInd.Equals(input.ReCheckInventoryInd))
                ) && base.Equals(input) && 
                (
                    this.InhibitBrandContentInd == input.InhibitBrandContentInd ||
                    (this.InhibitBrandContentInd != null &&
                    this.InhibitBrandContentInd.Equals(input.InhibitBrandContentInd))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointChoice == input.ExtensionPointChoice ||
                    (this.ExtensionPointChoice != null &&
                    this.ExtensionPointChoice.Equals(input.ExtensionPointChoice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.PricingModifiersAir != null)
                    hashCode = hashCode * 59 + this.PricingModifiersAir.GetHashCode();
                if (this.CabinPreference != null)
                    hashCode = hashCode * 59 + this.CabinPreference.GetHashCode();
                if (this.FareRuleCategory != null)
                    hashCode = hashCode * 59 + this.FareRuleCategory.GetHashCode();
                if (this.FareRuleType != null)
                    hashCode = hashCode * 59 + this.FareRuleType.GetHashCode();
                if (this.LowFareFinderInd != null)
                    hashCode = hashCode * 59 + this.LowFareFinderInd.GetHashCode();
                if (this.ReCheckInventoryInd != null)
                    hashCode = hashCode * 59 + this.ReCheckInventoryInd.GetHashCode();
                if (this.InhibitBrandContentInd != null)
                    hashCode = hashCode * 59 + this.InhibitBrandContentInd.GetHashCode();
                if (this.ExtensionPointChoice != null)
                    hashCode = hashCode * 59 + this.ExtensionPointChoice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
