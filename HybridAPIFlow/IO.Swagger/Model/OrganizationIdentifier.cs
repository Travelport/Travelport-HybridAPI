/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The organization identifier
    /// </summary>
    [DataContract]
    public partial class OrganizationIdentifier :  IEquatable<OrganizationIdentifier>, IValidatableObject
    {
        /// <summary>
        /// The type od code.  Organization or account
        /// </summary>
        /// <value>The type od code.  Organization or account</value>
        [DataMember(Name="organizationCodeType", EmitDefaultValue=false)]
        public OrganizationCodeTypeEnum? OrganizationCodeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationIdentifier" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="supplier">Assigned Type: c-1100:AirlineCode.</param>
        /// <param name="organizationCodeType">The type od code.  Organization or account.</param>
        /// <param name="segmentSequenceList">Assigned Type: c-1100:SegmentSequenceList.</param>
        /// <param name="productRef">The productRef which the OrganizationIdentifier applies to.</param>
        public OrganizationIdentifier(string value = default(string), string supplier = default(string), OrganizationCodeTypeEnum? organizationCodeType = default(OrganizationCodeTypeEnum?), List<int?> segmentSequenceList = default(List<int?>), List<string> productRef = default(List<string>))
        {
            this.Value = value;
            this.Supplier = supplier;
            this.OrganizationCodeType = organizationCodeType;
            this.SegmentSequenceList = segmentSequenceList;
            this.ProductRef = productRef;
        }
        
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:AirlineCode
        /// </summary>
        /// <value>Assigned Type: c-1100:AirlineCode</value>
        [DataMember(Name="supplier", EmitDefaultValue=false)]
        public string Supplier { get; set; }


        /// <summary>
        /// Assigned Type: c-1100:SegmentSequenceList
        /// </summary>
        /// <value>Assigned Type: c-1100:SegmentSequenceList</value>
        [DataMember(Name="segmentSequenceList", EmitDefaultValue=false)]
        public List<int?> SegmentSequenceList { get; set; }

        /// <summary>
        /// The productRef which the OrganizationIdentifier applies to
        /// </summary>
        /// <value>The productRef which the OrganizationIdentifier applies to</value>
        [DataMember(Name="productRef", EmitDefaultValue=false)]
        public List<string> ProductRef { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrganizationIdentifier {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  OrganizationCodeType: ").Append(OrganizationCodeType).Append("\n");
            sb.Append("  SegmentSequenceList: ").Append(SegmentSequenceList).Append("\n");
            sb.Append("  ProductRef: ").Append(ProductRef).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrganizationIdentifier);
        }

        /// <summary>
        /// Returns true if OrganizationIdentifier instances are equal
        /// </summary>
        /// <param name="input">Instance of OrganizationIdentifier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationIdentifier input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Supplier == input.Supplier ||
                    (this.Supplier != null &&
                    this.Supplier.Equals(input.Supplier))
                ) && 
                (
                    this.OrganizationCodeType == input.OrganizationCodeType ||
                    (this.OrganizationCodeType != null &&
                    this.OrganizationCodeType.Equals(input.OrganizationCodeType))
                ) && 
                (
                    this.SegmentSequenceList == input.SegmentSequenceList ||
                    this.SegmentSequenceList != null &&
                    this.SegmentSequenceList.SequenceEqual(input.SegmentSequenceList)
                ) && 
                (
                    this.ProductRef == input.ProductRef ||
                    this.ProductRef != null &&
                    this.ProductRef.SequenceEqual(input.ProductRef)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Supplier != null)
                    hashCode = hashCode * 59 + this.Supplier.GetHashCode();
                if (this.OrganizationCodeType != null)
                    hashCode = hashCode * 59 + this.OrganizationCodeType.GetHashCode();
                if (this.SegmentSequenceList != null)
                    hashCode = hashCode * 59 + this.SegmentSequenceList.GetHashCode();
                if (this.ProductRef != null)
                    hashCode = hashCode * 59 + this.ProductRef.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if(this.Value != null && this.Value.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 32.", new [] { "Value" });
            }

            // Supplier (string) pattern
            Regex regexSupplier = new Regex(@"([a-zA-Z0-9]{2,3})", RegexOptions.CultureInvariant);
            if (false == regexSupplier.Match(this.Supplier).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Supplier, must match a pattern of " + regexSupplier, new [] { "Supplier" });
            }

            yield break;
        }
    }

}
