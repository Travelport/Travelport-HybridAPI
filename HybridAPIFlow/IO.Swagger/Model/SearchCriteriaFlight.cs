/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SearchCriteriaFlight
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class SearchCriteriaFlight :  IEquatable<SearchCriteriaFlight>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchCriteriaFlight" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchCriteriaFlight() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchCriteriaFlight" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="departureDate">Departure date (required).</param>
        /// <param name="departureTime">The preferred departure time.</param>
        /// <param name="legSequence">Assigned Type: c-1100:SegmentSequence.</param>
        /// <param name="from">Assigned Type: ctar-1100:FromTo (required).</param>
        /// <param name="to">Assigned Type: ctar-1100:FromTo (required).</param>
        /// <param name="departureTimeRange">Assigned Type: c-1100:TimeRange.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public SearchCriteriaFlight(string type = default(string), DateTime? departureDate = default(DateTime?), string departureTime = default(string), int? legSequence = default(int?), FromTo from = default(FromTo), FromTo to = default(FromTo), TimeRange departureTimeRange = default(TimeRange), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for SearchCriteriaFlight and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "departureDate" is required (not null)
            if (departureDate == null)
            {
                throw new InvalidDataException("departureDate is a required property for SearchCriteriaFlight and cannot be null");
            }
            else
            {
                this.DepartureDate = departureDate;
            }
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new InvalidDataException("from is a required property for SearchCriteriaFlight and cannot be null");
            }
            else
            {
                this.From = from;
            }
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new InvalidDataException("to is a required property for SearchCriteriaFlight and cannot be null");
            }
            else
            {
                this.To = to;
            }
            this.DepartureTime = departureTime;
            this.LegSequence = legSequence;
            this.DepartureTimeRange = departureTimeRange;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Departure date
        /// </summary>
        /// <value>Departure date</value>
        [DataMember(Name="departureDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DepartureDate { get; set; }

        /// <summary>
        /// The preferred departure time
        /// </summary>
        /// <value>The preferred departure time</value>
        [DataMember(Name="departureTime", EmitDefaultValue=false)]
        public string DepartureTime { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:SegmentSequence
        /// </summary>
        /// <value>Assigned Type: c-1100:SegmentSequence</value>
        [DataMember(Name="legSequence", EmitDefaultValue=false)]
        public int? LegSequence { get; set; }

        /// <summary>
        /// Assigned Type: ctar-1100:FromTo
        /// </summary>
        /// <value>Assigned Type: ctar-1100:FromTo</value>
        [DataMember(Name="From", EmitDefaultValue=false)]
        public FromTo From { get; set; }

        /// <summary>
        /// Assigned Type: ctar-1100:FromTo
        /// </summary>
        /// <value>Assigned Type: ctar-1100:FromTo</value>
        [DataMember(Name="To", EmitDefaultValue=false)]
        public FromTo To { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:TimeRange
        /// </summary>
        /// <value>Assigned Type: c-1100:TimeRange</value>
        [DataMember(Name="DepartureTimeRange", EmitDefaultValue=false)]
        public TimeRange DepartureTimeRange { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchCriteriaFlight {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DepartureDate: ").Append(DepartureDate).Append("\n");
            sb.Append("  DepartureTime: ").Append(DepartureTime).Append("\n");
            sb.Append("  LegSequence: ").Append(LegSequence).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  DepartureTimeRange: ").Append(DepartureTimeRange).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchCriteriaFlight);
        }

        /// <summary>
        /// Returns true if SearchCriteriaFlight instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchCriteriaFlight to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchCriteriaFlight input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.DepartureDate == input.DepartureDate ||
                    (this.DepartureDate != null &&
                    this.DepartureDate.Equals(input.DepartureDate))
                ) && 
                (
                    this.DepartureTime == input.DepartureTime ||
                    (this.DepartureTime != null &&
                    this.DepartureTime.Equals(input.DepartureTime))
                ) && 
                (
                    this.LegSequence == input.LegSequence ||
                    (this.LegSequence != null &&
                    this.LegSequence.Equals(input.LegSequence))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.DepartureTimeRange == input.DepartureTimeRange ||
                    (this.DepartureTimeRange != null &&
                    this.DepartureTimeRange.Equals(input.DepartureTimeRange))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.DepartureDate != null)
                    hashCode = hashCode * 59 + this.DepartureDate.GetHashCode();
                if (this.DepartureTime != null)
                    hashCode = hashCode * 59 + this.DepartureTime.GetHashCode();
                if (this.LegSequence != null)
                    hashCode = hashCode * 59 + this.LegSequence.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.DepartureTimeRange != null)
                    hashCode = hashCode * 59 + this.DepartureTimeRange.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
