/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BuildOptions
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(BuildOptionsFromCatalogProductOptions), "BuildOptionsFromCatalogProductOptions")]
    [JsonSubtypes.KnownSubType(typeof(BuildOptionsFromProducts), "BuildOptionsFromProducts")]
    public partial class BuildOptions :  IEquatable<BuildOptions>, IValidatableObject
    {
        /// <summary>
        /// Assigned Type: ctlg-1100:FareRuleEnum
        /// </summary>
        /// <value>Assigned Type: ctlg-1100:FareRuleEnum</value>
        [DataMember(Name="FareRuleType", EmitDefaultValue=false)]
        public FareRuleEnum? FareRuleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BuildOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildOptions" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="maxNumberOfUpsellsToReturn">Assigned Type: c-1100:NonnegativeInteger.</param>
        /// <param name="paymentCriteria">Assigned Type: ctlg-1100:PaymentCriteria.</param>
        /// <param name="fareRuleType">Assigned Type: ctlg-1100:FareRuleEnum.</param>
        /// <param name="fareRuleCategory">fareRuleCategory.</param>
        /// <param name="returnBrandedFaresInd">returnBrandedFaresInd.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public BuildOptions(string type = default(string), int? maxNumberOfUpsellsToReturn = default(int?), PaymentCriteria paymentCriteria = default(PaymentCriteria), FareRuleEnum? fareRuleType = default(FareRuleEnum?), List<FareRuleCategoryEnum> fareRuleCategory = default(List<FareRuleCategoryEnum>), bool? returnBrandedFaresInd = default(bool?), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for BuildOptions and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.MaxNumberOfUpsellsToReturn = maxNumberOfUpsellsToReturn;
            this.PaymentCriteria = paymentCriteria;
            this.FareRuleType = fareRuleType;
            this.FareRuleCategory = fareRuleCategory;
            this.ReturnBrandedFaresInd = returnBrandedFaresInd;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:NonnegativeInteger
        /// </summary>
        /// <value>Assigned Type: c-1100:NonnegativeInteger</value>
        [DataMember(Name="maxNumberOfUpsellsToReturn", EmitDefaultValue=false)]
        public int? MaxNumberOfUpsellsToReturn { get; set; }

        /// <summary>
        /// Assigned Type: ctlg-1100:PaymentCriteria
        /// </summary>
        /// <value>Assigned Type: ctlg-1100:PaymentCriteria</value>
        [DataMember(Name="PaymentCriteria", EmitDefaultValue=false)]
        public PaymentCriteria PaymentCriteria { get; set; }


        /// <summary>
        /// Gets or Sets FareRuleCategory
        /// </summary>
        [DataMember(Name="FareRuleCategory", EmitDefaultValue=false)]
        public List<FareRuleCategoryEnum> FareRuleCategory { get; set; }

        /// <summary>
        /// Gets or Sets ReturnBrandedFaresInd
        /// </summary>
        [DataMember(Name="returnBrandedFaresInd", EmitDefaultValue=false)]
        public bool? ReturnBrandedFaresInd { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildOptions {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MaxNumberOfUpsellsToReturn: ").Append(MaxNumberOfUpsellsToReturn).Append("\n");
            sb.Append("  PaymentCriteria: ").Append(PaymentCriteria).Append("\n");
            sb.Append("  FareRuleType: ").Append(FareRuleType).Append("\n");
            sb.Append("  FareRuleCategory: ").Append(FareRuleCategory).Append("\n");
            sb.Append("  ReturnBrandedFaresInd: ").Append(ReturnBrandedFaresInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildOptions);
        }

        /// <summary>
        /// Returns true if BuildOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.MaxNumberOfUpsellsToReturn == input.MaxNumberOfUpsellsToReturn ||
                    (this.MaxNumberOfUpsellsToReturn != null &&
                    this.MaxNumberOfUpsellsToReturn.Equals(input.MaxNumberOfUpsellsToReturn))
                ) && 
                (
                    this.PaymentCriteria == input.PaymentCriteria ||
                    (this.PaymentCriteria != null &&
                    this.PaymentCriteria.Equals(input.PaymentCriteria))
                ) && 
                (
                    this.FareRuleType == input.FareRuleType ||
                    (this.FareRuleType != null &&
                    this.FareRuleType.Equals(input.FareRuleType))
                ) && 
                (
                    this.FareRuleCategory == input.FareRuleCategory ||
                    this.FareRuleCategory != null &&
                    this.FareRuleCategory.SequenceEqual(input.FareRuleCategory)
                ) && 
                (
                    this.ReturnBrandedFaresInd == input.ReturnBrandedFaresInd ||
                    (this.ReturnBrandedFaresInd != null &&
                    this.ReturnBrandedFaresInd.Equals(input.ReturnBrandedFaresInd))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.MaxNumberOfUpsellsToReturn != null)
                    hashCode = hashCode * 59 + this.MaxNumberOfUpsellsToReturn.GetHashCode();
                if (this.PaymentCriteria != null)
                    hashCode = hashCode * 59 + this.PaymentCriteria.GetHashCode();
                if (this.FareRuleType != null)
                    hashCode = hashCode * 59 + this.FareRuleType.GetHashCode();
                if (this.FareRuleCategory != null)
                    hashCode = hashCode * 59 + this.FareRuleCategory.GetHashCode();
                if (this.ReturnBrandedFaresInd != null)
                    hashCode = hashCode * 59 + this.ReturnBrandedFaresInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // MaxNumberOfUpsellsToReturn (int?) minimum
            if(this.MaxNumberOfUpsellsToReturn < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxNumberOfUpsellsToReturn, must be a value greater than or equal to 0.", new [] { "MaxNumberOfUpsellsToReturn" });
            }

            yield break;
        }
    }

}
