/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BrandCompleteInfo
    /// </summary>
    [DataContract]
    public partial class BrandCompleteInfo : Brand,  IEquatable<BrandCompleteInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandCompleteInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BrandCompleteInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandCompleteInfo" /> class.
        /// </summary>
        /// <param name="brandText">brandText (required).</param>
        /// <param name="extensionPointCustom">extensionPointCustom.</param>
        public BrandCompleteInfo(List<BrandText> brandText = default(List<BrandText>), ExtensionPointCustom extensionPointCustom = default(ExtensionPointCustom), string type = default(string), string id = default(string), string brandRef = default(string), Identifier identifier = default(Identifier), string name = default(string), int? tier = default(int?), List<int?> shelfNumbers = default(List<int?>), List<BrandAttribute> brandAttribute = default(List<BrandAttribute>), List<AdditionalBrandAttribute> additionalBrandAttribute = default(List<AdditionalBrandAttribute>), Object extensionPoint = default(Object)) : base(name, tier, shelfNumbers, brandAttribute, additionalBrandAttribute, extensionPoint)
        {
            // to ensure "brandText" is required (not null)
            if (brandText == null)
            {
                throw new InvalidDataException("brandText is a required property for BrandCompleteInfo and cannot be null");
            }
            else
            {
                this.BrandText = brandText;
            }
            this.ExtensionPointCustom = extensionPointCustom;
        }
        
        /// <summary>
        /// Gets or Sets BrandText
        /// </summary>
        [DataMember(Name="BrandText", EmitDefaultValue=false)]
        public List<BrandText> BrandText { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPointCustom
        /// </summary>
        [DataMember(Name="ExtensionPoint_Custom", EmitDefaultValue=false)]
        public ExtensionPointCustom ExtensionPointCustom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrandCompleteInfo {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BrandText: ").Append(BrandText).Append("\n");
            sb.Append("  ExtensionPointCustom: ").Append(ExtensionPointCustom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrandCompleteInfo);
        }

        /// <summary>
        /// Returns true if BrandCompleteInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of BrandCompleteInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrandCompleteInfo input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.BrandText == input.BrandText ||
                    this.BrandText != null &&
                    this.BrandText.SequenceEqual(input.BrandText)
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointCustom == input.ExtensionPointCustom ||
                    (this.ExtensionPointCustom != null &&
                    this.ExtensionPointCustom.Equals(input.ExtensionPointCustom))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.BrandText != null)
                    hashCode = hashCode * 59 + this.BrandText.GetHashCode();
                if (this.ExtensionPointCustom != null)
                    hashCode = hashCode * 59 + this.ExtensionPointCustom.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
