/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TaxExemption
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class TaxExemption :  IEquatable<TaxExemption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxExemption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TaxExemption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxExemption" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="countries">Assigned Type: c-1100:CountryCodesISO.</param>
        /// <param name="taxCodes">Assigned Type: c-1100:TinyStrings.</param>
        /// <param name="allTaxesExemptInd">If true, the Offer/Offering is exempt from all taxes.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public TaxExemption(string type = default(string), List<string> countries = default(List<string>), List<string> taxCodes = default(List<string>), bool? allTaxesExemptInd = default(bool?), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for TaxExemption and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Countries = countries;
            this.TaxCodes = taxCodes;
            this.AllTaxesExemptInd = allTaxesExemptInd;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:CountryCodesISO
        /// </summary>
        /// <value>Assigned Type: c-1100:CountryCodesISO</value>
        [DataMember(Name="countries", EmitDefaultValue=false)]
        public List<string> Countries { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:TinyStrings
        /// </summary>
        /// <value>Assigned Type: c-1100:TinyStrings</value>
        [DataMember(Name="taxCodes", EmitDefaultValue=false)]
        public List<string> TaxCodes { get; set; }

        /// <summary>
        /// If true, the Offer/Offering is exempt from all taxes
        /// </summary>
        /// <value>If true, the Offer/Offering is exempt from all taxes</value>
        [DataMember(Name="allTaxesExemptInd", EmitDefaultValue=false)]
        public bool? AllTaxesExemptInd { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxExemption {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Countries: ").Append(Countries).Append("\n");
            sb.Append("  TaxCodes: ").Append(TaxCodes).Append("\n");
            sb.Append("  AllTaxesExemptInd: ").Append(AllTaxesExemptInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxExemption);
        }

        /// <summary>
        /// Returns true if TaxExemption instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxExemption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxExemption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Countries == input.Countries ||
                    this.Countries != null &&
                    this.Countries.SequenceEqual(input.Countries)
                ) && 
                (
                    this.TaxCodes == input.TaxCodes ||
                    this.TaxCodes != null &&
                    this.TaxCodes.SequenceEqual(input.TaxCodes)
                ) && 
                (
                    this.AllTaxesExemptInd == input.AllTaxesExemptInd ||
                    (this.AllTaxesExemptInd != null &&
                    this.AllTaxesExemptInd.Equals(input.AllTaxesExemptInd))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Countries != null)
                    hashCode = hashCode * 59 + this.Countries.GetHashCode();
                if (this.TaxCodes != null)
                    hashCode = hashCode * 59 + this.TaxCodes.GetHashCode();
                if (this.AllTaxesExemptInd != null)
                    hashCode = hashCode * 59 + this.AllTaxesExemptInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
