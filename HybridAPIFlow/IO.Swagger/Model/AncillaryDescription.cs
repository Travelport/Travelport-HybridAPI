/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A description of the ancillary with two description codes
    /// </summary>
    [DataContract]
    public partial class AncillaryDescription :  IEquatable<AncillaryDescription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AncillaryDescription" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="code">Assigned Type: c-1100:StringUpperCaseAlphaNumericMax10.</param>
        /// <param name="subCode">Assigned Type: c-1100:StringUpperCaseAlphaNumericMax10.</param>
        /// <param name="codeContext">Assigned Type: c-1100:CodeContext.</param>
        public AncillaryDescription(string value = default(string), string code = default(string), string subCode = default(string), string codeContext = default(string))
        {
            this.Value = value;
            this.Code = code;
            this.SubCode = subCode;
            this.CodeContext = codeContext;
        }
        
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:StringUpperCaseAlphaNumericMax10
        /// </summary>
        /// <value>Assigned Type: c-1100:StringUpperCaseAlphaNumericMax10</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:StringUpperCaseAlphaNumericMax10
        /// </summary>
        /// <value>Assigned Type: c-1100:StringUpperCaseAlphaNumericMax10</value>
        [DataMember(Name="subCode", EmitDefaultValue=false)]
        public string SubCode { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:CodeContext
        /// </summary>
        /// <value>Assigned Type: c-1100:CodeContext</value>
        [DataMember(Name="codeContext", EmitDefaultValue=false)]
        public string CodeContext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AncillaryDescription {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  SubCode: ").Append(SubCode).Append("\n");
            sb.Append("  CodeContext: ").Append(CodeContext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AncillaryDescription);
        }

        /// <summary>
        /// Returns true if AncillaryDescription instances are equal
        /// </summary>
        /// <param name="input">Instance of AncillaryDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AncillaryDescription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.SubCode == input.SubCode ||
                    (this.SubCode != null &&
                    this.SubCode.Equals(input.SubCode))
                ) && 
                (
                    this.CodeContext == input.CodeContext ||
                    (this.CodeContext != null &&
                    this.CodeContext.Equals(input.CodeContext))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.SubCode != null)
                    hashCode = hashCode * 59 + this.SubCode.GetHashCode();
                if (this.CodeContext != null)
                    hashCode = hashCode * 59 + this.CodeContext.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if(this.Value != null && this.Value.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 512.", new [] { "Value" });
            }

            // Code (string) maxLength
            if(this.Code != null && this.Code.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be less than 10.", new [] { "Code" });
            }

            // Code (string) pattern
            Regex regexCode = new Regex(@"([A-Z0-9]+)?", RegexOptions.CultureInvariant);
            if (false == regexCode.Match(this.Code).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, must match a pattern of " + regexCode, new [] { "Code" });
            }

            // SubCode (string) maxLength
            if(this.SubCode != null && this.SubCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubCode, length must be less than 10.", new [] { "SubCode" });
            }

            // SubCode (string) pattern
            Regex regexSubCode = new Regex(@"([A-Z0-9]+)?", RegexOptions.CultureInvariant);
            if (false == regexSubCode.Match(this.SubCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubCode, must match a pattern of " + regexSubCode, new [] { "SubCode" });
            }

            // CodeContext (string) maxLength
            if(this.CodeContext != null && this.CodeContext.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CodeContext, length must be less than 32.", new [] { "CodeContext" });
            }

            yield break;
        }
    }

}
