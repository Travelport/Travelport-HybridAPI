/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UpsellOfferingSummary
    /// </summary>
    [DataContract]
    public partial class UpsellOfferingSummary : UpsellOfferingID,  IEquatable<UpsellOfferingSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsellOfferingSummary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpsellOfferingSummary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsellOfferingSummary" /> class.
        /// </summary>
        /// <param name="sequence">Assigned Type: c-1100:NumberDoubleDigit.</param>
        /// <param name="productRefs">An unsolicited Offering, offered in conjunction with specified product(s).</param>
        /// <param name="departure">Departure location.</param>
        /// <param name="arrival">Arrival location.</param>
        /// <param name="brand">brand.</param>
        /// <param name="productBrandOptions">productBrandOptions (required).</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public UpsellOfferingSummary(int? sequence = default(int?), List<string> productRefs = default(List<string>), string departure = default(string), string arrival = default(string), List<BrandID> brand = default(List<BrandID>), List<ProductBrandOptions> productBrandOptions = default(List<ProductBrandOptions>), Object extensionPoint = default(Object), string type = "UpsellOfferingSummary", string id = default(string), Identifier identifier = default(Identifier), string catalogProductOfferingRef = default(string)) : base(type, id, identifier, catalogProductOfferingRef)
        {
            // to ensure "productBrandOptions" is required (not null)
            if (productBrandOptions == null)
            {
                throw new InvalidDataException("productBrandOptions is a required property for UpsellOfferingSummary and cannot be null");
            }
            else
            {
                this.ProductBrandOptions = productBrandOptions;
            }
            this.Sequence = sequence;
            this.ProductRefs = productRefs;
            this.Departure = departure;
            this.Arrival = arrival;
            this.Brand = brand;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Assigned Type: c-1100:NumberDoubleDigit
        /// </summary>
        /// <value>Assigned Type: c-1100:NumberDoubleDigit</value>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public int? Sequence { get; set; }

        /// <summary>
        /// An unsolicited Offering, offered in conjunction with specified product(s)
        /// </summary>
        /// <value>An unsolicited Offering, offered in conjunction with specified product(s)</value>
        [DataMember(Name="productRefs", EmitDefaultValue=false)]
        public List<string> ProductRefs { get; set; }

        /// <summary>
        /// Departure location
        /// </summary>
        /// <value>Departure location</value>
        [DataMember(Name="Departure", EmitDefaultValue=false)]
        public string Departure { get; set; }

        /// <summary>
        /// Arrival location
        /// </summary>
        /// <value>Arrival location</value>
        [DataMember(Name="Arrival", EmitDefaultValue=false)]
        public string Arrival { get; set; }

        /// <summary>
        /// Gets or Sets Brand
        /// </summary>
        [DataMember(Name="Brand", EmitDefaultValue=false)]
        public List<BrandID> Brand { get; set; }

        /// <summary>
        /// Gets or Sets ProductBrandOptions
        /// </summary>
        [DataMember(Name="ProductBrandOptions", EmitDefaultValue=false)]
        public List<ProductBrandOptions> ProductBrandOptions { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpsellOfferingSummary {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  ProductRefs: ").Append(ProductRefs).Append("\n");
            sb.Append("  Departure: ").Append(Departure).Append("\n");
            sb.Append("  Arrival: ").Append(Arrival).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  ProductBrandOptions: ").Append(ProductBrandOptions).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpsellOfferingSummary);
        }

        /// <summary>
        /// Returns true if UpsellOfferingSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of UpsellOfferingSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpsellOfferingSummary input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                ) && base.Equals(input) && 
                (
                    this.ProductRefs == input.ProductRefs ||
                    this.ProductRefs != null &&
                    this.ProductRefs.SequenceEqual(input.ProductRefs)
                ) && base.Equals(input) && 
                (
                    this.Departure == input.Departure ||
                    (this.Departure != null &&
                    this.Departure.Equals(input.Departure))
                ) && base.Equals(input) && 
                (
                    this.Arrival == input.Arrival ||
                    (this.Arrival != null &&
                    this.Arrival.Equals(input.Arrival))
                ) && base.Equals(input) && 
                (
                    this.Brand == input.Brand ||
                    this.Brand != null &&
                    this.Brand.SequenceEqual(input.Brand)
                ) && base.Equals(input) && 
                (
                    this.ProductBrandOptions == input.ProductBrandOptions ||
                    this.ProductBrandOptions != null &&
                    this.ProductBrandOptions.SequenceEqual(input.ProductBrandOptions)
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Sequence != null)
                    hashCode = hashCode * 59 + this.Sequence.GetHashCode();
                if (this.ProductRefs != null)
                    hashCode = hashCode * 59 + this.ProductRefs.GetHashCode();
                if (this.Departure != null)
                    hashCode = hashCode * 59 + this.Departure.GetHashCode();
                if (this.Arrival != null)
                    hashCode = hashCode * 59 + this.Arrival.GetHashCode();
                if (this.Brand != null)
                    hashCode = hashCode * 59 + this.Brand.GetHashCode();
                if (this.ProductBrandOptions != null)
                    hashCode = hashCode * 59 + this.ProductBrandOptions.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // Departure (string) maxLength
            if(this.Departure != null && this.Departure.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Departure, length must be less than 3.", new [] { "Departure" });
            }

            // Departure (string) minLength
            if(this.Departure != null && this.Departure.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Departure, length must be greater than 3.", new [] { "Departure" });
            }

            // Departure (string) pattern
            Regex regexDeparture = new Regex(@"([a-zA-Z]{3})", RegexOptions.CultureInvariant);
            if (false == regexDeparture.Match(this.Departure).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Departure, must match a pattern of " + regexDeparture, new [] { "Departure" });
            }

            // Arrival (string) maxLength
            if(this.Arrival != null && this.Arrival.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Arrival, length must be less than 3.", new [] { "Arrival" });
            }

            // Arrival (string) minLength
            if(this.Arrival != null && this.Arrival.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Arrival, length must be greater than 3.", new [] { "Arrival" });
            }

            // Arrival (string) pattern
            Regex regexArrival = new Regex(@"([a-zA-Z]{3})", RegexOptions.CultureInvariant);
            if (false == regexArrival.Match(this.Arrival).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Arrival, must match a pattern of " + regexArrival, new [] { "Arrival" });
            }

            yield break;
        }
    }

}
