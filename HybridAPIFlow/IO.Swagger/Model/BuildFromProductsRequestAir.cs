/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BuildFromProductsRequestAir
    /// </summary>
    [DataContract]
    public partial class BuildFromProductsRequestAir : BuildFromProductsRequest,  IEquatable<BuildFromProductsRequestAir>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildFromProductsRequestAir" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BuildFromProductsRequestAir() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildFromProductsRequestAir" /> class.
        /// </summary>
        /// <param name="pricingModifiersAir">Assigned Type: ctar-1100:PricingModifiersAir (required).</param>
        /// <param name="passengerCriteria">passengerCriteria (required).</param>
        /// <param name="productCriteriaAir">productCriteriaAir (required).</param>
        /// <param name="extensionPointChoice">extensionPointChoice.</param>
        public BuildFromProductsRequestAir(PricingModifiersAir pricingModifiersAir = default(PricingModifiersAir), List<PassengerCriteria> passengerCriteria = default(List<PassengerCriteria>), List<ProductCriteriaAir> productCriteriaAir = default(List<ProductCriteriaAir>), ExtensionPointChoice extensionPointChoice = default(ExtensionPointChoice), string type = "BuildFromProductsRequestAir", Object extensionPoint = default(Object)) : base(type, extensionPoint)
        {
            // to ensure "pricingModifiersAir" is required (not null)
            if (pricingModifiersAir == null)
            {
                throw new InvalidDataException("pricingModifiersAir is a required property for BuildFromProductsRequestAir and cannot be null");
            }
            else
            {
                this.PricingModifiersAir = pricingModifiersAir;
            }
            // to ensure "passengerCriteria" is required (not null)
            if (passengerCriteria == null)
            {
                throw new InvalidDataException("passengerCriteria is a required property for BuildFromProductsRequestAir and cannot be null");
            }
            else
            {
                this.PassengerCriteria = passengerCriteria;
            }
            // to ensure "productCriteriaAir" is required (not null)
            if (productCriteriaAir == null)
            {
                throw new InvalidDataException("productCriteriaAir is a required property for BuildFromProductsRequestAir and cannot be null");
            }
            else
            {
                this.ProductCriteriaAir = productCriteriaAir;
            }
            this.ExtensionPointChoice = extensionPointChoice;
        }
        
        /// <summary>
        /// Assigned Type: ctar-1100:PricingModifiersAir
        /// </summary>
        /// <value>Assigned Type: ctar-1100:PricingModifiersAir</value>
        [DataMember(Name="PricingModifiersAir", EmitDefaultValue=false)]
        public PricingModifiersAir PricingModifiersAir { get; set; }

        /// <summary>
        /// Gets or Sets PassengerCriteria
        /// </summary>
        [DataMember(Name="PassengerCriteria", EmitDefaultValue=false)]
        public List<PassengerCriteria> PassengerCriteria { get; set; }

        /// <summary>
        /// Gets or Sets ProductCriteriaAir
        /// </summary>
        [DataMember(Name="ProductCriteriaAir", EmitDefaultValue=false)]
        public List<ProductCriteriaAir> ProductCriteriaAir { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPointChoice
        /// </summary>
        [DataMember(Name="ExtensionPoint_Choice", EmitDefaultValue=false)]
        public ExtensionPointChoice ExtensionPointChoice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildFromProductsRequestAir {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  PricingModifiersAir: ").Append(PricingModifiersAir).Append("\n");
            sb.Append("  PassengerCriteria: ").Append(PassengerCriteria).Append("\n");
            sb.Append("  ProductCriteriaAir: ").Append(ProductCriteriaAir).Append("\n");
            sb.Append("  ExtensionPointChoice: ").Append(ExtensionPointChoice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildFromProductsRequestAir);
        }

        /// <summary>
        /// Returns true if BuildFromProductsRequestAir instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildFromProductsRequestAir to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildFromProductsRequestAir input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.PricingModifiersAir == input.PricingModifiersAir ||
                    (this.PricingModifiersAir != null &&
                    this.PricingModifiersAir.Equals(input.PricingModifiersAir))
                ) && base.Equals(input) && 
                (
                    this.PassengerCriteria == input.PassengerCriteria ||
                    this.PassengerCriteria != null &&
                    this.PassengerCriteria.SequenceEqual(input.PassengerCriteria)
                ) && base.Equals(input) && 
                (
                    this.ProductCriteriaAir == input.ProductCriteriaAir ||
                    this.ProductCriteriaAir != null &&
                    this.ProductCriteriaAir.SequenceEqual(input.ProductCriteriaAir)
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointChoice == input.ExtensionPointChoice ||
                    (this.ExtensionPointChoice != null &&
                    this.ExtensionPointChoice.Equals(input.ExtensionPointChoice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.PricingModifiersAir != null)
                    hashCode = hashCode * 59 + this.PricingModifiersAir.GetHashCode();
                if (this.PassengerCriteria != null)
                    hashCode = hashCode * 59 + this.PassengerCriteria.GetHashCode();
                if (this.ProductCriteriaAir != null)
                    hashCode = hashCode * 59 + this.ProductCriteriaAir.GetHashCode();
                if (this.ExtensionPointChoice != null)
                    hashCode = hashCode * 59 + this.ExtensionPointChoice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
