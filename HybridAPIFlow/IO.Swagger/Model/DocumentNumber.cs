/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DocumentNumber
    /// </summary>
    [DataContract]
    public partial class DocumentNumber :  IEquatable<DocumentNumber>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentNumber" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="documentIssuer">Assigned Type: c-1100:StringTiny.</param>
        /// <param name="documentType">documentType.</param>
        /// <param name="documentTypeExtension">documentTypeExtension.</param>
        public DocumentNumber(string value = default(string), string documentIssuer = default(string), DocumentTypeEnumBase documentType = default(DocumentTypeEnumBase), string documentTypeExtension = default(string))
        {
            this.Value = value;
            this.DocumentIssuer = documentIssuer;
            this.DocumentType = documentType;
            this.DocumentTypeExtension = documentTypeExtension;
        }
        
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:StringTiny
        /// </summary>
        /// <value>Assigned Type: c-1100:StringTiny</value>
        [DataMember(Name="documentIssuer", EmitDefaultValue=false)]
        public string DocumentIssuer { get; set; }

        /// <summary>
        /// Gets or Sets DocumentType
        /// </summary>
        [DataMember(Name="documentType", EmitDefaultValue=false)]
        public DocumentTypeEnumBase DocumentType { get; set; }

        /// <summary>
        /// Gets or Sets DocumentTypeExtension
        /// </summary>
        [DataMember(Name="documentTypeExtension", EmitDefaultValue=false)]
        public string DocumentTypeExtension { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentNumber {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  DocumentIssuer: ").Append(DocumentIssuer).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  DocumentTypeExtension: ").Append(DocumentTypeExtension).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentNumber);
        }

        /// <summary>
        /// Returns true if DocumentNumber instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentNumber to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentNumber input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.DocumentIssuer == input.DocumentIssuer ||
                    (this.DocumentIssuer != null &&
                    this.DocumentIssuer.Equals(input.DocumentIssuer))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.DocumentTypeExtension == input.DocumentTypeExtension ||
                    (this.DocumentTypeExtension != null &&
                    this.DocumentTypeExtension.Equals(input.DocumentTypeExtension))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.DocumentIssuer != null)
                    hashCode = hashCode * 59 + this.DocumentIssuer.GetHashCode();
                if (this.DocumentType != null)
                    hashCode = hashCode * 59 + this.DocumentType.GetHashCode();
                if (this.DocumentTypeExtension != null)
                    hashCode = hashCode * 59 + this.DocumentTypeExtension.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if(this.Value != null && this.Value.Length > 4096)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 4096.", new [] { "Value" });
            }

            // Value (string) pattern
            Regex regexValue = new Regex(@"([0-9]+)?", RegexOptions.CultureInvariant);
            if (false == regexValue.Match(this.Value).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, must match a pattern of " + regexValue, new [] { "Value" });
            }

            // DocumentIssuer (string) maxLength
            if(this.DocumentIssuer != null && this.DocumentIssuer.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DocumentIssuer, length must be less than 32.", new [] { "DocumentIssuer" });
            }

            // DocumentTypeExtension (string) maxLength
            if(this.DocumentTypeExtension != null && this.DocumentTypeExtension.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DocumentTypeExtension, length must be less than 128.", new [] { "DocumentTypeExtension" });
            }

            // DocumentTypeExtension (string) minLength
            if(this.DocumentTypeExtension != null && this.DocumentTypeExtension.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DocumentTypeExtension, length must be greater than 1.", new [] { "DocumentTypeExtension" });
            }

            yield break;
        }
    }

}
