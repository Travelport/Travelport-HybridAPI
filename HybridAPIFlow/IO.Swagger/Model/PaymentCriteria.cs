/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PaymentCriteria
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class PaymentCriteria :  IEquatable<PaymentCriteria>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentCriteria" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentCriteria() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentCriteria" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="issuerIdentificationNumber">This the BIN/IIN.</param>
        /// <param name="paymentCardCode">A two character code for a credit card, like MC, AX.</param>
        /// <param name="documentNumber">documentNumber.</param>
        /// <param name="agencyAccountInd">If true, payment will be made by agency account.</param>
        /// <param name="bspInd">If true, payment will be made by BSP.</param>
        /// <param name="cashInd">If true, payment will be made by cash.</param>
        /// <param name="invoiceInd">If true, payment will be made by invoice.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public PaymentCriteria(string type = default(string), string issuerIdentificationNumber = default(string), string paymentCardCode = default(string), List<DocumentNumber> documentNumber = default(List<DocumentNumber>), bool? agencyAccountInd = default(bool?), bool? bspInd = default(bool?), bool? cashInd = default(bool?), bool? invoiceInd = default(bool?), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for PaymentCriteria and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.IssuerIdentificationNumber = issuerIdentificationNumber;
            this.PaymentCardCode = paymentCardCode;
            this.DocumentNumber = documentNumber;
            this.AgencyAccountInd = agencyAccountInd;
            this.BspInd = bspInd;
            this.CashInd = cashInd;
            this.InvoiceInd = invoiceInd;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// This the BIN/IIN
        /// </summary>
        /// <value>This the BIN/IIN</value>
        [DataMember(Name="IssuerIdentificationNumber", EmitDefaultValue=false)]
        public string IssuerIdentificationNumber { get; set; }

        /// <summary>
        /// A two character code for a credit card, like MC, AX
        /// </summary>
        /// <value>A two character code for a credit card, like MC, AX</value>
        [DataMember(Name="PaymentCardCode", EmitDefaultValue=false)]
        public string PaymentCardCode { get; set; }

        /// <summary>
        /// Gets or Sets DocumentNumber
        /// </summary>
        [DataMember(Name="DocumentNumber", EmitDefaultValue=false)]
        public List<DocumentNumber> DocumentNumber { get; set; }

        /// <summary>
        /// If true, payment will be made by agency account
        /// </summary>
        /// <value>If true, payment will be made by agency account</value>
        [DataMember(Name="agencyAccountInd", EmitDefaultValue=false)]
        public bool? AgencyAccountInd { get; set; }

        /// <summary>
        /// If true, payment will be made by BSP
        /// </summary>
        /// <value>If true, payment will be made by BSP</value>
        [DataMember(Name="bspInd", EmitDefaultValue=false)]
        public bool? BspInd { get; set; }

        /// <summary>
        /// If true, payment will be made by cash
        /// </summary>
        /// <value>If true, payment will be made by cash</value>
        [DataMember(Name="cashInd", EmitDefaultValue=false)]
        public bool? CashInd { get; set; }

        /// <summary>
        /// If true, payment will be made by invoice
        /// </summary>
        /// <value>If true, payment will be made by invoice</value>
        [DataMember(Name="invoiceInd", EmitDefaultValue=false)]
        public bool? InvoiceInd { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentCriteria {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IssuerIdentificationNumber: ").Append(IssuerIdentificationNumber).Append("\n");
            sb.Append("  PaymentCardCode: ").Append(PaymentCardCode).Append("\n");
            sb.Append("  DocumentNumber: ").Append(DocumentNumber).Append("\n");
            sb.Append("  AgencyAccountInd: ").Append(AgencyAccountInd).Append("\n");
            sb.Append("  BspInd: ").Append(BspInd).Append("\n");
            sb.Append("  CashInd: ").Append(CashInd).Append("\n");
            sb.Append("  InvoiceInd: ").Append(InvoiceInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentCriteria);
        }

        /// <summary>
        /// Returns true if PaymentCriteria instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentCriteria input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.IssuerIdentificationNumber == input.IssuerIdentificationNumber ||
                    (this.IssuerIdentificationNumber != null &&
                    this.IssuerIdentificationNumber.Equals(input.IssuerIdentificationNumber))
                ) && 
                (
                    this.PaymentCardCode == input.PaymentCardCode ||
                    (this.PaymentCardCode != null &&
                    this.PaymentCardCode.Equals(input.PaymentCardCode))
                ) && 
                (
                    this.DocumentNumber == input.DocumentNumber ||
                    this.DocumentNumber != null &&
                    this.DocumentNumber.SequenceEqual(input.DocumentNumber)
                ) && 
                (
                    this.AgencyAccountInd == input.AgencyAccountInd ||
                    (this.AgencyAccountInd != null &&
                    this.AgencyAccountInd.Equals(input.AgencyAccountInd))
                ) && 
                (
                    this.BspInd == input.BspInd ||
                    (this.BspInd != null &&
                    this.BspInd.Equals(input.BspInd))
                ) && 
                (
                    this.CashInd == input.CashInd ||
                    (this.CashInd != null &&
                    this.CashInd.Equals(input.CashInd))
                ) && 
                (
                    this.InvoiceInd == input.InvoiceInd ||
                    (this.InvoiceInd != null &&
                    this.InvoiceInd.Equals(input.InvoiceInd))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.IssuerIdentificationNumber != null)
                    hashCode = hashCode * 59 + this.IssuerIdentificationNumber.GetHashCode();
                if (this.PaymentCardCode != null)
                    hashCode = hashCode * 59 + this.PaymentCardCode.GetHashCode();
                if (this.DocumentNumber != null)
                    hashCode = hashCode * 59 + this.DocumentNumber.GetHashCode();
                if (this.AgencyAccountInd != null)
                    hashCode = hashCode * 59 + this.AgencyAccountInd.GetHashCode();
                if (this.BspInd != null)
                    hashCode = hashCode * 59 + this.BspInd.GetHashCode();
                if (this.CashInd != null)
                    hashCode = hashCode * 59 + this.CashInd.GetHashCode();
                if (this.InvoiceInd != null)
                    hashCode = hashCode * 59 + this.InvoiceInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // IssuerIdentificationNumber (string) maxLength
            if(this.IssuerIdentificationNumber != null && this.IssuerIdentificationNumber.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IssuerIdentificationNumber, length must be less than 32.", new [] { "IssuerIdentificationNumber" });
            }

            // IssuerIdentificationNumber (string) pattern
            Regex regexIssuerIdentificationNumber = new Regex(@"[0-9]{6,11}", RegexOptions.CultureInvariant);
            if (false == regexIssuerIdentificationNumber.Match(this.IssuerIdentificationNumber).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IssuerIdentificationNumber, must match a pattern of " + regexIssuerIdentificationNumber, new [] { "IssuerIdentificationNumber" });
            }

            // PaymentCardCode (string) maxLength
            if(this.PaymentCardCode != null && this.PaymentCardCode.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentCardCode, length must be less than 2.", new [] { "PaymentCardCode" });
            }

            // PaymentCardCode (string) pattern
            Regex regexPaymentCardCode = new Regex(@"([A-Z0-9]+)?", RegexOptions.CultureInvariant);
            if (false == regexPaymentCardCode.Match(this.PaymentCardCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentCardCode, must match a pattern of " + regexPaymentCardCode, new [] { "PaymentCardCode" });
            }

            yield break;
        }
    }

}
