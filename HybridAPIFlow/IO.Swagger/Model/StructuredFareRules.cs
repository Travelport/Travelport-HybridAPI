/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// StructuredFareRules
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class StructuredFareRules :  IEquatable<StructuredFareRules>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StructuredFareRules" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StructuredFareRules() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StructuredFareRules" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="passengerTypeCodes">Assigned Type: c-1100:PassengerTypeCodeList.</param>
        /// <param name="penalties">penalties.</param>
        /// <param name="minimumStay">minimumStay.</param>
        /// <param name="maximumStay">maximumStay.</param>
        /// <param name="advanceReservation">advanceReservation.</param>
        /// <param name="advancePayment">advancePayment.</param>
        /// <param name="stopover">stopover.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public StructuredFareRules(string type = default(string), List<string> passengerTypeCodes = default(List<string>), List<Penalties> penalties = default(List<Penalties>), List<MinimumStay> minimumStay = default(List<MinimumStay>), List<MaximumStay> maximumStay = default(List<MaximumStay>), List<AdvanceReservation> advanceReservation = default(List<AdvanceReservation>), List<AdvancePayment> advancePayment = default(List<AdvancePayment>), List<Stopover> stopover = default(List<Stopover>), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for StructuredFareRules and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.PassengerTypeCodes = passengerTypeCodes;
            this.Penalties = penalties;
            this.MinimumStay = minimumStay;
            this.MaximumStay = maximumStay;
            this.AdvanceReservation = advanceReservation;
            this.AdvancePayment = advancePayment;
            this.Stopover = stopover;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:PassengerTypeCodeList
        /// </summary>
        /// <value>Assigned Type: c-1100:PassengerTypeCodeList</value>
        [DataMember(Name="passengerTypeCodes", EmitDefaultValue=false)]
        public List<string> PassengerTypeCodes { get; set; }

        /// <summary>
        /// Gets or Sets Penalties
        /// </summary>
        [DataMember(Name="Penalties", EmitDefaultValue=false)]
        public List<Penalties> Penalties { get; set; }

        /// <summary>
        /// Gets or Sets MinimumStay
        /// </summary>
        [DataMember(Name="MinimumStay", EmitDefaultValue=false)]
        public List<MinimumStay> MinimumStay { get; set; }

        /// <summary>
        /// Gets or Sets MaximumStay
        /// </summary>
        [DataMember(Name="MaximumStay", EmitDefaultValue=false)]
        public List<MaximumStay> MaximumStay { get; set; }

        /// <summary>
        /// Gets or Sets AdvanceReservation
        /// </summary>
        [DataMember(Name="AdvanceReservation", EmitDefaultValue=false)]
        public List<AdvanceReservation> AdvanceReservation { get; set; }

        /// <summary>
        /// Gets or Sets AdvancePayment
        /// </summary>
        [DataMember(Name="AdvancePayment", EmitDefaultValue=false)]
        public List<AdvancePayment> AdvancePayment { get; set; }

        /// <summary>
        /// Gets or Sets Stopover
        /// </summary>
        [DataMember(Name="Stopover", EmitDefaultValue=false)]
        public List<Stopover> Stopover { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StructuredFareRules {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PassengerTypeCodes: ").Append(PassengerTypeCodes).Append("\n");
            sb.Append("  Penalties: ").Append(Penalties).Append("\n");
            sb.Append("  MinimumStay: ").Append(MinimumStay).Append("\n");
            sb.Append("  MaximumStay: ").Append(MaximumStay).Append("\n");
            sb.Append("  AdvanceReservation: ").Append(AdvanceReservation).Append("\n");
            sb.Append("  AdvancePayment: ").Append(AdvancePayment).Append("\n");
            sb.Append("  Stopover: ").Append(Stopover).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StructuredFareRules);
        }

        /// <summary>
        /// Returns true if StructuredFareRules instances are equal
        /// </summary>
        /// <param name="input">Instance of StructuredFareRules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StructuredFareRules input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.PassengerTypeCodes == input.PassengerTypeCodes ||
                    this.PassengerTypeCodes != null &&
                    this.PassengerTypeCodes.SequenceEqual(input.PassengerTypeCodes)
                ) && 
                (
                    this.Penalties == input.Penalties ||
                    this.Penalties != null &&
                    this.Penalties.SequenceEqual(input.Penalties)
                ) && 
                (
                    this.MinimumStay == input.MinimumStay ||
                    this.MinimumStay != null &&
                    this.MinimumStay.SequenceEqual(input.MinimumStay)
                ) && 
                (
                    this.MaximumStay == input.MaximumStay ||
                    this.MaximumStay != null &&
                    this.MaximumStay.SequenceEqual(input.MaximumStay)
                ) && 
                (
                    this.AdvanceReservation == input.AdvanceReservation ||
                    this.AdvanceReservation != null &&
                    this.AdvanceReservation.SequenceEqual(input.AdvanceReservation)
                ) && 
                (
                    this.AdvancePayment == input.AdvancePayment ||
                    this.AdvancePayment != null &&
                    this.AdvancePayment.SequenceEqual(input.AdvancePayment)
                ) && 
                (
                    this.Stopover == input.Stopover ||
                    this.Stopover != null &&
                    this.Stopover.SequenceEqual(input.Stopover)
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.PassengerTypeCodes != null)
                    hashCode = hashCode * 59 + this.PassengerTypeCodes.GetHashCode();
                if (this.Penalties != null)
                    hashCode = hashCode * 59 + this.Penalties.GetHashCode();
                if (this.MinimumStay != null)
                    hashCode = hashCode * 59 + this.MinimumStay.GetHashCode();
                if (this.MaximumStay != null)
                    hashCode = hashCode * 59 + this.MaximumStay.GetHashCode();
                if (this.AdvanceReservation != null)
                    hashCode = hashCode * 59 + this.AdvanceReservation.GetHashCode();
                if (this.AdvancePayment != null)
                    hashCode = hashCode * 59 + this.AdvancePayment.GetHashCode();
                if (this.Stopover != null)
                    hashCode = hashCode * 59 + this.Stopover.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
