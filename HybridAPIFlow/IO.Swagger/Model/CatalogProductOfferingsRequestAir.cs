/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CatalogProductOfferingsRequestAir
    /// </summary>
    [DataContract]
    public partial class CatalogProductOfferingsRequestAir : CatalogProductOfferingsRequest,  IEquatable<CatalogProductOfferingsRequestAir>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogProductOfferingsRequestAir" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogProductOfferingsRequestAir() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogProductOfferingsRequestAir" /> class.
        /// </summary>
        /// <param name="maxNumberOfOffersToReturn">Assigned Type: c-1100:NonnegativeInteger.</param>
        /// <param name="offersPerPage">Assigned Type: c-1100:NonnegativeInteger.</param>
        /// <param name="contentSourceList">contentSourceList.</param>
        /// <param name="maxNumberOfUpsellsToReturn">Assigned Type: c-1100:NonnegativeInteger.</param>
        /// <param name="numberOfDownsellsToReturn">Assigned Type: c-1100:NonnegativeInteger.</param>
        /// <param name="passengerCriteria">passengerCriteria.</param>
        /// <param name="searchCriteriaFlight">searchCriteriaFlight.</param>
        /// <param name="searchModifiersAir">Assigned Type: ctar-1100:SearchModifiersAir.</param>
        /// <param name="paymentCriteria">Assigned Type: ctlg-1100:PaymentCriteria.</param>
        /// <param name="pricingModifiersAir">Assigned Type: ctar-1100:PricingModifiersAir.</param>
        /// <param name="pseudoCityInfo">Assigned Type: c-1100:PseudoCityInfo.</param>
        /// <param name="searchType">Assigned Type: ctar-1100:SearchTypeEnum.</param>
        /// <param name="customResponseModifiersAir">Assigned Type: ctar-1101:CustomResponseModifiersAir.</param>
        /// <param name="inhibitBrandContentInd">if true, brand infromation will be supressed..</param>
        /// <param name="detailViewInd">if true, detail view should be returned.</param>
        /// <param name="excludeMixedBrandsInd">If true, mixed brands will be inhibited from the response.</param>
        /// <param name="extensionPointChoice">extensionPointChoice.</param>
        public CatalogProductOfferingsRequestAir(int? maxNumberOfOffersToReturn = default(int?), int? offersPerPage = default(int?), List<ContentSourceEnum> contentSourceList = default(List<ContentSourceEnum>), int? maxNumberOfUpsellsToReturn = default(int?), int? numberOfDownsellsToReturn = default(int?), List<PassengerCriteria> passengerCriteria = default(List<PassengerCriteria>), List<SearchCriteriaFlight> searchCriteriaFlight = default(List<SearchCriteriaFlight>), SearchModifiersAir searchModifiersAir = default(SearchModifiersAir), PaymentCriteria paymentCriteria = default(PaymentCriteria), PricingModifiersAir pricingModifiersAir = default(PricingModifiersAir), PseudoCityInfo pseudoCityInfo = default(PseudoCityInfo), SearchTypeEnum searchType = default(SearchTypeEnum), CustomResponseModifiersAir customResponseModifiersAir = default(CustomResponseModifiersAir), bool? inhibitBrandContentInd = default(bool?), bool? detailViewInd = default(bool?), bool? excludeMixedBrandsInd = default(bool?), ExtensionPointChoice extensionPointChoice = default(ExtensionPointChoice), string type = "CatalogProductOfferingsRequestAir", SearchControlConsoleChannelID searchControlConsoleChannelID = default(SearchControlConsoleChannelID), Object extensionPoint = default(Object)) : base(type, searchControlConsoleChannelID, extensionPoint)
        {
            this.MaxNumberOfOffersToReturn = maxNumberOfOffersToReturn;
            this.OffersPerPage = offersPerPage;
            this.ContentSourceList = contentSourceList;
            this.MaxNumberOfUpsellsToReturn = maxNumberOfUpsellsToReturn;
            this.NumberOfDownsellsToReturn = numberOfDownsellsToReturn;
            this.PassengerCriteria = passengerCriteria;
            this.SearchCriteriaFlight = searchCriteriaFlight;
            this.SearchModifiersAir = searchModifiersAir;
            this.PaymentCriteria = paymentCriteria;
            this.PricingModifiersAir = pricingModifiersAir;
            this.PseudoCityInfo = pseudoCityInfo;
            this.SearchType = searchType;
            this.CustomResponseModifiersAir = customResponseModifiersAir;
            this.InhibitBrandContentInd = inhibitBrandContentInd;
            this.DetailViewInd = detailViewInd;
            this.ExcludeMixedBrandsInd = excludeMixedBrandsInd;
            this.ExtensionPointChoice = extensionPointChoice;
        }
        
        /// <summary>
        /// Assigned Type: c-1100:NonnegativeInteger
        /// </summary>
        /// <value>Assigned Type: c-1100:NonnegativeInteger</value>
        [DataMember(Name="maxNumberOfOffersToReturn", EmitDefaultValue=false)]
        public int? MaxNumberOfOffersToReturn { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:NonnegativeInteger
        /// </summary>
        /// <value>Assigned Type: c-1100:NonnegativeInteger</value>
        [DataMember(Name="offersPerPage", EmitDefaultValue=false)]
        public int? OffersPerPage { get; set; }

        /// <summary>
        /// Gets or Sets ContentSourceList
        /// </summary>
        [DataMember(Name="contentSourceList", EmitDefaultValue=false)]
        public List<ContentSourceEnum> ContentSourceList { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:NonnegativeInteger
        /// </summary>
        /// <value>Assigned Type: c-1100:NonnegativeInteger</value>
        [DataMember(Name="maxNumberOfUpsellsToReturn", EmitDefaultValue=false)]
        public int? MaxNumberOfUpsellsToReturn { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:NonnegativeInteger
        /// </summary>
        /// <value>Assigned Type: c-1100:NonnegativeInteger</value>
        [DataMember(Name="numberOfDownsellsToReturn", EmitDefaultValue=false)]
        public int? NumberOfDownsellsToReturn { get; set; }

        /// <summary>
        /// Gets or Sets PassengerCriteria
        /// </summary>
        [DataMember(Name="PassengerCriteria", EmitDefaultValue=false)]
        public List<PassengerCriteria> PassengerCriteria { get; set; }

        /// <summary>
        /// Gets or Sets SearchCriteriaFlight
        /// </summary>
        [DataMember(Name="SearchCriteriaFlight", EmitDefaultValue=false)]
        public List<SearchCriteriaFlight> SearchCriteriaFlight { get; set; }

        /// <summary>
        /// Assigned Type: ctar-1100:SearchModifiersAir
        /// </summary>
        /// <value>Assigned Type: ctar-1100:SearchModifiersAir</value>
        [DataMember(Name="SearchModifiersAir", EmitDefaultValue=false)]
        public SearchModifiersAir SearchModifiersAir { get; set; }

        /// <summary>
        /// Assigned Type: ctlg-1100:PaymentCriteria
        /// </summary>
        /// <value>Assigned Type: ctlg-1100:PaymentCriteria</value>
        [DataMember(Name="PaymentCriteria", EmitDefaultValue=false)]
        public PaymentCriteria PaymentCriteria { get; set; }

        /// <summary>
        /// Assigned Type: ctar-1100:PricingModifiersAir
        /// </summary>
        /// <value>Assigned Type: ctar-1100:PricingModifiersAir</value>
        [DataMember(Name="PricingModifiersAir", EmitDefaultValue=false)]
        public PricingModifiersAir PricingModifiersAir { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:PseudoCityInfo
        /// </summary>
        /// <value>Assigned Type: c-1100:PseudoCityInfo</value>
        [DataMember(Name="PseudoCityInfo", EmitDefaultValue=false)]
        public PseudoCityInfo PseudoCityInfo { get; set; }

        /// <summary>
        /// Assigned Type: ctar-1100:SearchTypeEnum
        /// </summary>
        /// <value>Assigned Type: ctar-1100:SearchTypeEnum</value>
        [DataMember(Name="SearchType", EmitDefaultValue=false)]
        public SearchTypeEnum SearchType { get; set; }

        /// <summary>
        /// Assigned Type: ctar-1101:CustomResponseModifiersAir
        /// </summary>
        /// <value>Assigned Type: ctar-1101:CustomResponseModifiersAir</value>
        [DataMember(Name="CustomResponseModifiersAir", EmitDefaultValue=false)]
        public CustomResponseModifiersAir CustomResponseModifiersAir { get; set; }

        /// <summary>
        /// if true, brand infromation will be supressed.
        /// </summary>
        /// <value>if true, brand infromation will be supressed.</value>
        [DataMember(Name="inhibitBrandContentInd", EmitDefaultValue=false)]
        public bool? InhibitBrandContentInd { get; set; }

        /// <summary>
        /// if true, detail view should be returned
        /// </summary>
        /// <value>if true, detail view should be returned</value>
        [DataMember(Name="detailViewInd", EmitDefaultValue=false)]
        public bool? DetailViewInd { get; set; }

        /// <summary>
        /// If true, mixed brands will be inhibited from the response
        /// </summary>
        /// <value>If true, mixed brands will be inhibited from the response</value>
        [DataMember(Name="excludeMixedBrandsInd", EmitDefaultValue=false)]
        public bool? ExcludeMixedBrandsInd { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPointChoice
        /// </summary>
        [DataMember(Name="ExtensionPoint_Choice", EmitDefaultValue=false)]
        public ExtensionPointChoice ExtensionPointChoice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogProductOfferingsRequestAir {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  MaxNumberOfOffersToReturn: ").Append(MaxNumberOfOffersToReturn).Append("\n");
            sb.Append("  OffersPerPage: ").Append(OffersPerPage).Append("\n");
            sb.Append("  ContentSourceList: ").Append(ContentSourceList).Append("\n");
            sb.Append("  MaxNumberOfUpsellsToReturn: ").Append(MaxNumberOfUpsellsToReturn).Append("\n");
            sb.Append("  NumberOfDownsellsToReturn: ").Append(NumberOfDownsellsToReturn).Append("\n");
            sb.Append("  PassengerCriteria: ").Append(PassengerCriteria).Append("\n");
            sb.Append("  SearchCriteriaFlight: ").Append(SearchCriteriaFlight).Append("\n");
            sb.Append("  SearchModifiersAir: ").Append(SearchModifiersAir).Append("\n");
            sb.Append("  PaymentCriteria: ").Append(PaymentCriteria).Append("\n");
            sb.Append("  PricingModifiersAir: ").Append(PricingModifiersAir).Append("\n");
            sb.Append("  PseudoCityInfo: ").Append(PseudoCityInfo).Append("\n");
            sb.Append("  SearchType: ").Append(SearchType).Append("\n");
            sb.Append("  CustomResponseModifiersAir: ").Append(CustomResponseModifiersAir).Append("\n");
            sb.Append("  InhibitBrandContentInd: ").Append(InhibitBrandContentInd).Append("\n");
            sb.Append("  DetailViewInd: ").Append(DetailViewInd).Append("\n");
            sb.Append("  ExcludeMixedBrandsInd: ").Append(ExcludeMixedBrandsInd).Append("\n");
            sb.Append("  ExtensionPointChoice: ").Append(ExtensionPointChoice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CatalogProductOfferingsRequestAir);
        }

        /// <summary>
        /// Returns true if CatalogProductOfferingsRequestAir instances are equal
        /// </summary>
        /// <param name="input">Instance of CatalogProductOfferingsRequestAir to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogProductOfferingsRequestAir input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.MaxNumberOfOffersToReturn == input.MaxNumberOfOffersToReturn ||
                    (this.MaxNumberOfOffersToReturn != null &&
                    this.MaxNumberOfOffersToReturn.Equals(input.MaxNumberOfOffersToReturn))
                ) && base.Equals(input) && 
                (
                    this.OffersPerPage == input.OffersPerPage ||
                    (this.OffersPerPage != null &&
                    this.OffersPerPage.Equals(input.OffersPerPage))
                ) && base.Equals(input) && 
                (
                    this.ContentSourceList == input.ContentSourceList ||
                    this.ContentSourceList != null &&
                    this.ContentSourceList.SequenceEqual(input.ContentSourceList)
                ) && base.Equals(input) && 
                (
                    this.MaxNumberOfUpsellsToReturn == input.MaxNumberOfUpsellsToReturn ||
                    (this.MaxNumberOfUpsellsToReturn != null &&
                    this.MaxNumberOfUpsellsToReturn.Equals(input.MaxNumberOfUpsellsToReturn))
                ) && base.Equals(input) && 
                (
                    this.NumberOfDownsellsToReturn == input.NumberOfDownsellsToReturn ||
                    (this.NumberOfDownsellsToReturn != null &&
                    this.NumberOfDownsellsToReturn.Equals(input.NumberOfDownsellsToReturn))
                ) && base.Equals(input) && 
                (
                    this.PassengerCriteria == input.PassengerCriteria ||
                    this.PassengerCriteria != null &&
                    this.PassengerCriteria.SequenceEqual(input.PassengerCriteria)
                ) && base.Equals(input) && 
                (
                    this.SearchCriteriaFlight == input.SearchCriteriaFlight ||
                    this.SearchCriteriaFlight != null &&
                    this.SearchCriteriaFlight.SequenceEqual(input.SearchCriteriaFlight)
                ) && base.Equals(input) && 
                (
                    this.SearchModifiersAir == input.SearchModifiersAir ||
                    (this.SearchModifiersAir != null &&
                    this.SearchModifiersAir.Equals(input.SearchModifiersAir))
                ) && base.Equals(input) && 
                (
                    this.PaymentCriteria == input.PaymentCriteria ||
                    (this.PaymentCriteria != null &&
                    this.PaymentCriteria.Equals(input.PaymentCriteria))
                ) && base.Equals(input) && 
                (
                    this.PricingModifiersAir == input.PricingModifiersAir ||
                    (this.PricingModifiersAir != null &&
                    this.PricingModifiersAir.Equals(input.PricingModifiersAir))
                ) && base.Equals(input) && 
                (
                    this.PseudoCityInfo == input.PseudoCityInfo ||
                    (this.PseudoCityInfo != null &&
                    this.PseudoCityInfo.Equals(input.PseudoCityInfo))
                ) && base.Equals(input) && 
                (
                    this.SearchType == input.SearchType ||
                    (this.SearchType != null &&
                    this.SearchType.Equals(input.SearchType))
                ) && base.Equals(input) && 
                (
                    this.CustomResponseModifiersAir == input.CustomResponseModifiersAir ||
                    (this.CustomResponseModifiersAir != null &&
                    this.CustomResponseModifiersAir.Equals(input.CustomResponseModifiersAir))
                ) && base.Equals(input) && 
                (
                    this.InhibitBrandContentInd == input.InhibitBrandContentInd ||
                    (this.InhibitBrandContentInd != null &&
                    this.InhibitBrandContentInd.Equals(input.InhibitBrandContentInd))
                ) && base.Equals(input) && 
                (
                    this.DetailViewInd == input.DetailViewInd ||
                    (this.DetailViewInd != null &&
                    this.DetailViewInd.Equals(input.DetailViewInd))
                ) && base.Equals(input) && 
                (
                    this.ExcludeMixedBrandsInd == input.ExcludeMixedBrandsInd ||
                    (this.ExcludeMixedBrandsInd != null &&
                    this.ExcludeMixedBrandsInd.Equals(input.ExcludeMixedBrandsInd))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointChoice == input.ExtensionPointChoice ||
                    (this.ExtensionPointChoice != null &&
                    this.ExtensionPointChoice.Equals(input.ExtensionPointChoice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.MaxNumberOfOffersToReturn != null)
                    hashCode = hashCode * 59 + this.MaxNumberOfOffersToReturn.GetHashCode();
                if (this.OffersPerPage != null)
                    hashCode = hashCode * 59 + this.OffersPerPage.GetHashCode();
                if (this.ContentSourceList != null)
                    hashCode = hashCode * 59 + this.ContentSourceList.GetHashCode();
                if (this.MaxNumberOfUpsellsToReturn != null)
                    hashCode = hashCode * 59 + this.MaxNumberOfUpsellsToReturn.GetHashCode();
                if (this.NumberOfDownsellsToReturn != null)
                    hashCode = hashCode * 59 + this.NumberOfDownsellsToReturn.GetHashCode();
                if (this.PassengerCriteria != null)
                    hashCode = hashCode * 59 + this.PassengerCriteria.GetHashCode();
                if (this.SearchCriteriaFlight != null)
                    hashCode = hashCode * 59 + this.SearchCriteriaFlight.GetHashCode();
                if (this.SearchModifiersAir != null)
                    hashCode = hashCode * 59 + this.SearchModifiersAir.GetHashCode();
                if (this.PaymentCriteria != null)
                    hashCode = hashCode * 59 + this.PaymentCriteria.GetHashCode();
                if (this.PricingModifiersAir != null)
                    hashCode = hashCode * 59 + this.PricingModifiersAir.GetHashCode();
                if (this.PseudoCityInfo != null)
                    hashCode = hashCode * 59 + this.PseudoCityInfo.GetHashCode();
                if (this.SearchType != null)
                    hashCode = hashCode * 59 + this.SearchType.GetHashCode();
                if (this.CustomResponseModifiersAir != null)
                    hashCode = hashCode * 59 + this.CustomResponseModifiersAir.GetHashCode();
                if (this.InhibitBrandContentInd != null)
                    hashCode = hashCode * 59 + this.InhibitBrandContentInd.GetHashCode();
                if (this.DetailViewInd != null)
                    hashCode = hashCode * 59 + this.DetailViewInd.GetHashCode();
                if (this.ExcludeMixedBrandsInd != null)
                    hashCode = hashCode * 59 + this.ExcludeMixedBrandsInd.GetHashCode();
                if (this.ExtensionPointChoice != null)
                    hashCode = hashCode * 59 + this.ExtensionPointChoice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // MaxNumberOfOffersToReturn (int?) minimum
            if(this.MaxNumberOfOffersToReturn < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxNumberOfOffersToReturn, must be a value greater than or equal to 0.", new [] { "MaxNumberOfOffersToReturn" });
            }

            // OffersPerPage (int?) minimum
            if(this.OffersPerPage < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OffersPerPage, must be a value greater than or equal to 0.", new [] { "OffersPerPage" });
            }

            // MaxNumberOfUpsellsToReturn (int?) minimum
            if(this.MaxNumberOfUpsellsToReturn < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxNumberOfUpsellsToReturn, must be a value greater than or equal to 0.", new [] { "MaxNumberOfUpsellsToReturn" });
            }

            // NumberOfDownsellsToReturn (int?) minimum
            if(this.NumberOfDownsellsToReturn < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumberOfDownsellsToReturn, must be a value greater than or equal to 0.", new [] { "NumberOfDownsellsToReturn" });
            }

            yield break;
        }
    }

}
