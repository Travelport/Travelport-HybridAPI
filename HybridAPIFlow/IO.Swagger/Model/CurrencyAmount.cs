/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A monetary amount, up to 4 decimal places. Decimal place needs to be included.
    /// </summary>
    [DataContract]
    public partial class CurrencyAmount :  IEquatable<CurrencyAmount>, IValidatableObject
    {
        /// <summary>
        /// The origin of the requested currency code
        /// </summary>
        /// <value>The origin of the requested currency code</value>
        [DataMember(Name="currencySource", EmitDefaultValue=false)]
        public CurrencySourceEnum? CurrencySource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyAmount" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="code">Assigned Type: c-1100:CurrencyCodeISO.</param>
        /// <param name="minorUnit">Assigned Type: c-1100:CurrencyMinorUnit.</param>
        /// <param name="currencySource">The origin of the requested currency code.</param>
        /// <param name="approximateInd">True if the currency amount has been converted from the original amount.</param>
        public CurrencyAmount(float? value = default(float?), string code = default(string), int? minorUnit = default(int?), CurrencySourceEnum? currencySource = default(CurrencySourceEnum?), bool? approximateInd = default(bool?))
        {
            this.Value = value;
            this.Code = code;
            this.MinorUnit = minorUnit;
            this.CurrencySource = currencySource;
            this.ApproximateInd = approximateInd;
        }
        
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public float? Value { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:CurrencyCodeISO
        /// </summary>
        /// <value>Assigned Type: c-1100:CurrencyCodeISO</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:CurrencyMinorUnit
        /// </summary>
        /// <value>Assigned Type: c-1100:CurrencyMinorUnit</value>
        [DataMember(Name="minorUnit", EmitDefaultValue=false)]
        public int? MinorUnit { get; set; }


        /// <summary>
        /// True if the currency amount has been converted from the original amount
        /// </summary>
        /// <value>True if the currency amount has been converted from the original amount</value>
        [DataMember(Name="approximateInd", EmitDefaultValue=false)]
        public bool? ApproximateInd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurrencyAmount {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  MinorUnit: ").Append(MinorUnit).Append("\n");
            sb.Append("  CurrencySource: ").Append(CurrencySource).Append("\n");
            sb.Append("  ApproximateInd: ").Append(ApproximateInd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurrencyAmount);
        }

        /// <summary>
        /// Returns true if CurrencyAmount instances are equal
        /// </summary>
        /// <param name="input">Instance of CurrencyAmount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrencyAmount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.MinorUnit == input.MinorUnit ||
                    (this.MinorUnit != null &&
                    this.MinorUnit.Equals(input.MinorUnit))
                ) && 
                (
                    this.CurrencySource == input.CurrencySource ||
                    (this.CurrencySource != null &&
                    this.CurrencySource.Equals(input.CurrencySource))
                ) && 
                (
                    this.ApproximateInd == input.ApproximateInd ||
                    (this.ApproximateInd != null &&
                    this.ApproximateInd.Equals(input.ApproximateInd))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.MinorUnit != null)
                    hashCode = hashCode * 59 + this.MinorUnit.GetHashCode();
                if (this.CurrencySource != null)
                    hashCode = hashCode * 59 + this.CurrencySource.GetHashCode();
                if (this.ApproximateInd != null)
                    hashCode = hashCode * 59 + this.ApproximateInd.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Code (string) pattern
            Regex regexCode = new Regex(@"[a-zA-Z]{3}", RegexOptions.CultureInvariant);
            if (false == regexCode.Match(this.Code).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, must match a pattern of " + regexCode, new [] { "Code" });
            }

            // MinorUnit (int?) minimum
            if(this.MinorUnit < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinorUnit, must be a value greater than or equal to 0.", new [] { "MinorUnit" });
            }

            yield break;
        }
    }

}
