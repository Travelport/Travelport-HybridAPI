/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// OfferModify
    /// </summary>
    [DataContract]
    public partial class OfferModify : Offer,  IEquatable<OfferModify>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferModify" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OfferModify() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferModify" /> class.
        /// </summary>
        /// <param name="offerIdentifier">Assigned Type: ctlg-1100:Offer_ID.</param>
        /// <param name="modifyPrice">Assigned Type: c-1100:ModifyPrice (required).</param>
        /// <param name="flownStatus">Assigned Type: ctar-1100:FlownStatus.</param>
        /// <param name="scheduleChangeInd">If true the Offer_Modify is as a result of an airline initiated schedule change.</param>
        /// <param name="retainedValueInd">If true, the value will be retained on a document for future use.</param>
        /// <param name="extensionPointCustom">extensionPointCustom.</param>
        public OfferModify(OfferIdentifier offerIdentifier = default(OfferIdentifier), ModifyPrice modifyPrice = default(ModifyPrice), FlownStatus flownStatus = default(FlownStatus), bool? scheduleChangeInd = default(bool?), bool? retainedValueInd = default(bool?), ExtensionPointCustom extensionPointCustom = default(ExtensionPointCustom), string type = default(string), string id = default(string), string offerRef = default(string), Identifier identifier = default(Identifier), string parentOfferRef = default(string), List<ProductID> product = default(List<ProductID>), Price price = default(Price), List<TermsAndConditionsFullID> termsAndConditionsFull = default(List<TermsAndConditionsFullID>), bool? passiveOfferInd = default(bool?), Object extensionPoint = default(Object)) : base(parentOfferRef, product, price, termsAndConditionsFull, passiveOfferInd, extensionPoint)
        {
            // to ensure "modifyPrice" is required (not null)
            if (modifyPrice == null)
            {
                throw new InvalidDataException("modifyPrice is a required property for OfferModify and cannot be null");
            }
            else
            {
                this.ModifyPrice = modifyPrice;
            }
            this.OfferIdentifier = offerIdentifier;
            this.FlownStatus = flownStatus;
            this.ScheduleChangeInd = scheduleChangeInd;
            this.RetainedValueInd = retainedValueInd;
            this.ExtensionPointCustom = extensionPointCustom;
        }
        
        /// <summary>
        /// Assigned Type: ctlg-1100:Offer_ID
        /// </summary>
        /// <value>Assigned Type: ctlg-1100:Offer_ID</value>
        [DataMember(Name="OfferIdentifier", EmitDefaultValue=false)]
        public OfferIdentifier OfferIdentifier { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:ModifyPrice
        /// </summary>
        /// <value>Assigned Type: c-1100:ModifyPrice</value>
        [DataMember(Name="ModifyPrice", EmitDefaultValue=false)]
        public ModifyPrice ModifyPrice { get; set; }

        /// <summary>
        /// Assigned Type: ctar-1100:FlownStatus
        /// </summary>
        /// <value>Assigned Type: ctar-1100:FlownStatus</value>
        [DataMember(Name="FlownStatus", EmitDefaultValue=false)]
        public FlownStatus FlownStatus { get; set; }

        /// <summary>
        /// If true the Offer_Modify is as a result of an airline initiated schedule change
        /// </summary>
        /// <value>If true the Offer_Modify is as a result of an airline initiated schedule change</value>
        [DataMember(Name="scheduleChangeInd", EmitDefaultValue=false)]
        public bool? ScheduleChangeInd { get; set; }

        /// <summary>
        /// If true, the value will be retained on a document for future use
        /// </summary>
        /// <value>If true, the value will be retained on a document for future use</value>
        [DataMember(Name="retainedValueInd", EmitDefaultValue=false)]
        public bool? RetainedValueInd { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPointCustom
        /// </summary>
        [DataMember(Name="ExtensionPoint_Custom", EmitDefaultValue=false)]
        public ExtensionPointCustom ExtensionPointCustom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OfferModify {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  OfferIdentifier: ").Append(OfferIdentifier).Append("\n");
            sb.Append("  ModifyPrice: ").Append(ModifyPrice).Append("\n");
            sb.Append("  FlownStatus: ").Append(FlownStatus).Append("\n");
            sb.Append("  ScheduleChangeInd: ").Append(ScheduleChangeInd).Append("\n");
            sb.Append("  RetainedValueInd: ").Append(RetainedValueInd).Append("\n");
            sb.Append("  ExtensionPointCustom: ").Append(ExtensionPointCustom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OfferModify);
        }

        /// <summary>
        /// Returns true if OfferModify instances are equal
        /// </summary>
        /// <param name="input">Instance of OfferModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OfferModify input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.OfferIdentifier == input.OfferIdentifier ||
                    (this.OfferIdentifier != null &&
                    this.OfferIdentifier.Equals(input.OfferIdentifier))
                ) && base.Equals(input) && 
                (
                    this.ModifyPrice == input.ModifyPrice ||
                    (this.ModifyPrice != null &&
                    this.ModifyPrice.Equals(input.ModifyPrice))
                ) && base.Equals(input) && 
                (
                    this.FlownStatus == input.FlownStatus ||
                    (this.FlownStatus != null &&
                    this.FlownStatus.Equals(input.FlownStatus))
                ) && base.Equals(input) && 
                (
                    this.ScheduleChangeInd == input.ScheduleChangeInd ||
                    (this.ScheduleChangeInd != null &&
                    this.ScheduleChangeInd.Equals(input.ScheduleChangeInd))
                ) && base.Equals(input) && 
                (
                    this.RetainedValueInd == input.RetainedValueInd ||
                    (this.RetainedValueInd != null &&
                    this.RetainedValueInd.Equals(input.RetainedValueInd))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointCustom == input.ExtensionPointCustom ||
                    (this.ExtensionPointCustom != null &&
                    this.ExtensionPointCustom.Equals(input.ExtensionPointCustom))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.OfferIdentifier != null)
                    hashCode = hashCode * 59 + this.OfferIdentifier.GetHashCode();
                if (this.ModifyPrice != null)
                    hashCode = hashCode * 59 + this.ModifyPrice.GetHashCode();
                if (this.FlownStatus != null)
                    hashCode = hashCode * 59 + this.FlownStatus.GetHashCode();
                if (this.ScheduleChangeInd != null)
                    hashCode = hashCode * 59 + this.ScheduleChangeInd.GetHashCode();
                if (this.RetainedValueInd != null)
                    hashCode = hashCode * 59 + this.RetainedValueInd.GetHashCode();
                if (this.ExtensionPointCustom != null)
                    hashCode = hashCode * 59 + this.ExtensionPointCustom.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
