/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FlightProduct
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class FlightProduct :  IEquatable<FlightProduct>, IValidatableObject
    {
        /// <summary>
        /// The cabin
        /// </summary>
        /// <value>The cabin</value>
        [DataMember(Name="cabin", EmitDefaultValue=false)]
        public CabinAirEnum? Cabin { get; set; }
        /// <summary>
        /// Type of fare which has been returned
        /// </summary>
        /// <value>Type of fare which has been returned</value>
        [DataMember(Name="fareType", EmitDefaultValue=false)]
        public FareTypeEnum? FareType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightProduct" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlightProduct() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightProduct" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="segmentSequence">Assigned Type: c-1100:SegmentSequenceList (required).</param>
        /// <param name="classOfService">Assigned Type: c-1100:ClassOfService.</param>
        /// <param name="cabin">The cabin.</param>
        /// <param name="fareBasisCode">Assigned Type: c-1100:StringTiny.</param>
        /// <param name="fareType">Type of fare which has been returned.</param>
        /// <param name="carCode">Assigned Type: c-1100:StringTiny.</param>
        /// <param name="valueCode">Assigned Type: c-1100:StringTiny.</param>
        /// <param name="brand">Assigned Type: ctbr-1100:Brand.</param>
        /// <param name="customerLoyaltyCredit">customerLoyaltyCredit.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public FlightProduct(string type = default(string), List<int?> segmentSequence = default(List<int?>), string classOfService = default(string), CabinAirEnum? cabin = default(CabinAirEnum?), string fareBasisCode = default(string), FareTypeEnum? fareType = default(FareTypeEnum?), string carCode = default(string), string valueCode = default(string), BrandID brand = default(BrandID), List<CustomerLoyaltyCredit> customerLoyaltyCredit = default(List<CustomerLoyaltyCredit>), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for FlightProduct and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "segmentSequence" is required (not null)
            if (segmentSequence == null)
            {
                throw new InvalidDataException("segmentSequence is a required property for FlightProduct and cannot be null");
            }
            else
            {
                this.SegmentSequence = segmentSequence;
            }
            this.ClassOfService = classOfService;
            this.Cabin = cabin;
            this.FareBasisCode = fareBasisCode;
            this.FareType = fareType;
            this.CarCode = carCode;
            this.ValueCode = valueCode;
            this.Brand = brand;
            this.CustomerLoyaltyCredit = customerLoyaltyCredit;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:SegmentSequenceList
        /// </summary>
        /// <value>Assigned Type: c-1100:SegmentSequenceList</value>
        [DataMember(Name="segmentSequence", EmitDefaultValue=false)]
        public List<int?> SegmentSequence { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:ClassOfService
        /// </summary>
        /// <value>Assigned Type: c-1100:ClassOfService</value>
        [DataMember(Name="classOfService", EmitDefaultValue=false)]
        public string ClassOfService { get; set; }


        /// <summary>
        /// Assigned Type: c-1100:StringTiny
        /// </summary>
        /// <value>Assigned Type: c-1100:StringTiny</value>
        [DataMember(Name="fareBasisCode", EmitDefaultValue=false)]
        public string FareBasisCode { get; set; }


        /// <summary>
        /// Assigned Type: c-1100:StringTiny
        /// </summary>
        /// <value>Assigned Type: c-1100:StringTiny</value>
        [DataMember(Name="carCode", EmitDefaultValue=false)]
        public string CarCode { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:StringTiny
        /// </summary>
        /// <value>Assigned Type: c-1100:StringTiny</value>
        [DataMember(Name="valueCode", EmitDefaultValue=false)]
        public string ValueCode { get; set; }

        /// <summary>
        /// Assigned Type: ctbr-1100:Brand
        /// </summary>
        /// <value>Assigned Type: ctbr-1100:Brand</value>
        [DataMember(Name="Brand", EmitDefaultValue=false)]
        public BrandID Brand { get; set; }

        /// <summary>
        /// Gets or Sets CustomerLoyaltyCredit
        /// </summary>
        [DataMember(Name="CustomerLoyaltyCredit", EmitDefaultValue=false)]
        public List<CustomerLoyaltyCredit> CustomerLoyaltyCredit { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightProduct {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SegmentSequence: ").Append(SegmentSequence).Append("\n");
            sb.Append("  ClassOfService: ").Append(ClassOfService).Append("\n");
            sb.Append("  Cabin: ").Append(Cabin).Append("\n");
            sb.Append("  FareBasisCode: ").Append(FareBasisCode).Append("\n");
            sb.Append("  FareType: ").Append(FareType).Append("\n");
            sb.Append("  CarCode: ").Append(CarCode).Append("\n");
            sb.Append("  ValueCode: ").Append(ValueCode).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  CustomerLoyaltyCredit: ").Append(CustomerLoyaltyCredit).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlightProduct);
        }

        /// <summary>
        /// Returns true if FlightProduct instances are equal
        /// </summary>
        /// <param name="input">Instance of FlightProduct to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightProduct input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SegmentSequence == input.SegmentSequence ||
                    this.SegmentSequence != null &&
                    this.SegmentSequence.SequenceEqual(input.SegmentSequence)
                ) && 
                (
                    this.ClassOfService == input.ClassOfService ||
                    (this.ClassOfService != null &&
                    this.ClassOfService.Equals(input.ClassOfService))
                ) && 
                (
                    this.Cabin == input.Cabin ||
                    (this.Cabin != null &&
                    this.Cabin.Equals(input.Cabin))
                ) && 
                (
                    this.FareBasisCode == input.FareBasisCode ||
                    (this.FareBasisCode != null &&
                    this.FareBasisCode.Equals(input.FareBasisCode))
                ) && 
                (
                    this.FareType == input.FareType ||
                    (this.FareType != null &&
                    this.FareType.Equals(input.FareType))
                ) && 
                (
                    this.CarCode == input.CarCode ||
                    (this.CarCode != null &&
                    this.CarCode.Equals(input.CarCode))
                ) && 
                (
                    this.ValueCode == input.ValueCode ||
                    (this.ValueCode != null &&
                    this.ValueCode.Equals(input.ValueCode))
                ) && 
                (
                    this.Brand == input.Brand ||
                    (this.Brand != null &&
                    this.Brand.Equals(input.Brand))
                ) && 
                (
                    this.CustomerLoyaltyCredit == input.CustomerLoyaltyCredit ||
                    this.CustomerLoyaltyCredit != null &&
                    this.CustomerLoyaltyCredit.SequenceEqual(input.CustomerLoyaltyCredit)
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SegmentSequence != null)
                    hashCode = hashCode * 59 + this.SegmentSequence.GetHashCode();
                if (this.ClassOfService != null)
                    hashCode = hashCode * 59 + this.ClassOfService.GetHashCode();
                if (this.Cabin != null)
                    hashCode = hashCode * 59 + this.Cabin.GetHashCode();
                if (this.FareBasisCode != null)
                    hashCode = hashCode * 59 + this.FareBasisCode.GetHashCode();
                if (this.FareType != null)
                    hashCode = hashCode * 59 + this.FareType.GetHashCode();
                if (this.CarCode != null)
                    hashCode = hashCode * 59 + this.CarCode.GetHashCode();
                if (this.ValueCode != null)
                    hashCode = hashCode * 59 + this.ValueCode.GetHashCode();
                if (this.Brand != null)
                    hashCode = hashCode * 59 + this.Brand.GetHashCode();
                if (this.CustomerLoyaltyCredit != null)
                    hashCode = hashCode * 59 + this.CustomerLoyaltyCredit.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // ClassOfService (string) maxLength
            if(this.ClassOfService != null && this.ClassOfService.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClassOfService, length must be less than 2.", new [] { "ClassOfService" });
            }

            // ClassOfService (string) minLength
            if(this.ClassOfService != null && this.ClassOfService.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClassOfService, length must be greater than 1.", new [] { "ClassOfService" });
            }

            // ClassOfService (string) pattern
            Regex regexClassOfService = new Regex(@"([a-zA-Z0-9]{1,2})", RegexOptions.CultureInvariant);
            if (false == regexClassOfService.Match(this.ClassOfService).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClassOfService, must match a pattern of " + regexClassOfService, new [] { "ClassOfService" });
            }

            // FareBasisCode (string) maxLength
            if(this.FareBasisCode != null && this.FareBasisCode.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FareBasisCode, length must be less than 32.", new [] { "FareBasisCode" });
            }

            // CarCode (string) maxLength
            if(this.CarCode != null && this.CarCode.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CarCode, length must be less than 32.", new [] { "CarCode" });
            }

            // ValueCode (string) maxLength
            if(this.ValueCode != null && this.ValueCode.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ValueCode, length must be less than 32.", new [] { "ValueCode" });
            }

            yield break;
        }
    }

}
