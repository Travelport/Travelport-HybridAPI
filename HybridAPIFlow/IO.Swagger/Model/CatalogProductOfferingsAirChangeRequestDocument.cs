/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CatalogProductOfferingsAirChangeRequestDocument
    /// </summary>
    [DataContract]
    public partial class CatalogProductOfferingsAirChangeRequestDocument : CatalogProductOfferingsAirChangeRequest,  IEquatable<CatalogProductOfferingsAirChangeRequestDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogProductOfferingsAirChangeRequestDocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogProductOfferingsAirChangeRequestDocument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogProductOfferingsAirChangeRequestDocument" /> class.
        /// </summary>
        /// <param name="documentNumber">Assigned Type: c-1100:DocumentNumber (required).</param>
        /// <param name="extensionPointChoice">extensionPointChoice.</param>
        public CatalogProductOfferingsAirChangeRequestDocument(DocumentNumber documentNumber = default(DocumentNumber), ExtensionPointChoice extensionPointChoice = default(ExtensionPointChoice), string type = "CatalogProductOfferingsAirChangeRequestDocument", int? catalogProductOfferingsPerPage = default(int?), List<SearchCriteriaFlight> searchCriteriaFlight = default(List<SearchCriteriaFlight>), List<PassengerCriteria> passengerCriteria = default(List<PassengerCriteria>), SearchModifiersAir searchModifiersAir = default(SearchModifiersAir), PricingModifiersAirChange pricingModifiersAirChange = default(PricingModifiersAirChange), SearchControlConsoleChannelID searchControlConsoleChannelID = default(SearchControlConsoleChannelID), bool? returnBrandedFaresInd = default(bool?), bool? upsellInd = default(bool?), bool? detailViewInd = default(bool?), Object extensionPoint = default(Object)) : base(type, catalogProductOfferingsPerPage, searchCriteriaFlight, passengerCriteria, searchModifiersAir, pricingModifiersAirChange, searchControlConsoleChannelID, returnBrandedFaresInd, upsellInd, detailViewInd, extensionPoint)
        {
            // to ensure "documentNumber" is required (not null)
            if (documentNumber == null)
            {
                throw new InvalidDataException("documentNumber is a required property for CatalogProductOfferingsAirChangeRequestDocument and cannot be null");
            }
            else
            {
                this.DocumentNumber = documentNumber;
            }
            this.ExtensionPointChoice = extensionPointChoice;
        }
        
        /// <summary>
        /// Assigned Type: c-1100:DocumentNumber
        /// </summary>
        /// <value>Assigned Type: c-1100:DocumentNumber</value>
        [DataMember(Name="DocumentNumber", EmitDefaultValue=false)]
        public DocumentNumber DocumentNumber { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPointChoice
        /// </summary>
        [DataMember(Name="ExtensionPoint_Choice", EmitDefaultValue=false)]
        public ExtensionPointChoice ExtensionPointChoice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogProductOfferingsAirChangeRequestDocument {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  DocumentNumber: ").Append(DocumentNumber).Append("\n");
            sb.Append("  ExtensionPointChoice: ").Append(ExtensionPointChoice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CatalogProductOfferingsAirChangeRequestDocument);
        }

        /// <summary>
        /// Returns true if CatalogProductOfferingsAirChangeRequestDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of CatalogProductOfferingsAirChangeRequestDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogProductOfferingsAirChangeRequestDocument input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.DocumentNumber == input.DocumentNumber ||
                    (this.DocumentNumber != null &&
                    this.DocumentNumber.Equals(input.DocumentNumber))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointChoice == input.ExtensionPointChoice ||
                    (this.ExtensionPointChoice != null &&
                    this.ExtensionPointChoice.Equals(input.ExtensionPointChoice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.DocumentNumber != null)
                    hashCode = hashCode * 59 + this.DocumentNumber.GetHashCode();
                if (this.ExtensionPointChoice != null)
                    hashCode = hashCode * 59 + this.ExtensionPointChoice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
