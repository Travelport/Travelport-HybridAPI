/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TermsAndConditionsAirChange
    /// </summary>
    [DataContract]
    public partial class TermsAndConditionsAirChange : TermsAndConditionsAir,  IEquatable<TermsAndConditionsAirChange>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TermsAndConditionsAirChange" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TermsAndConditionsAirChange() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TermsAndConditionsAirChange" /> class.
        /// </summary>
        /// <param name="fulfillmentMethod">fulfillmentMethod (required).</param>
        public TermsAndConditionsAirChange(List<FulfillmentMethod> fulfillmentMethod = default(List<FulfillmentMethod>), string type = default(string), string id = default(string), string termsAndConditionsRef = default(string), Identifier identifier = default(Identifier), DateTime? expiryDate = default(DateTime?), List<CustomerLoyalty> customerLoyalty = default(List<CustomerLoyalty>), List<TravelerProduct> travelerProduct = default(List<TravelerProduct>), Object extensionPoint = default(Object), List<BaggageAllowance> baggageAllowance = default(List<BaggageAllowance>), IdentifierRef fareRuleIdentifierRef = default(IdentifierRef), List<FareRuleInfo> fareRuleInfo = default(List<FareRuleInfo>), List<Restriction> restriction = default(List<Restriction>), OrganizationInformation organizationInformation = default(OrganizationInformation), List<ValidatingAirline> validatingAirline = default(List<ValidatingAirline>), List<BaggageRecheck> baggageRecheck = default(List<BaggageRecheck>), List<TicketingAgency> ticketingAgency = default(List<TicketingAgency>), DateTime? paymentTimeLimit = default(DateTime?), PromotionalCode promotionalCode = default(PromotionalCode), List<Penalties> penalties = default(List<Penalties>), List<FareGuaranteePolicy> fareGuaranteePolicy = default(List<FareGuaranteePolicy>), bool? instantPurchaseInd = default(bool?), bool? secureFlightPassengerDataRequiredInd = default(bool?), ExtensionPointCustom extensionPointCustom = default(ExtensionPointCustom)) : base(baggageAllowance, fareRuleIdentifierRef, fareRuleInfo, restriction, organizationInformation, validatingAirline, baggageRecheck, ticketingAgency, paymentTimeLimit, promotionalCode, penalties, fareGuaranteePolicy, instantPurchaseInd, secureFlightPassengerDataRequiredInd, extensionPointCustom)
        {
            // to ensure "fulfillmentMethod" is required (not null)
            if (fulfillmentMethod == null)
            {
                throw new InvalidDataException("fulfillmentMethod is a required property for TermsAndConditionsAirChange and cannot be null");
            }
            else
            {
                this.FulfillmentMethod = fulfillmentMethod;
            }
        }
        
        /// <summary>
        /// Gets or Sets FulfillmentMethod
        /// </summary>
        [DataMember(Name="FulfillmentMethod", EmitDefaultValue=false)]
        public List<FulfillmentMethod> FulfillmentMethod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TermsAndConditionsAirChange {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  FulfillmentMethod: ").Append(FulfillmentMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TermsAndConditionsAirChange);
        }

        /// <summary>
        /// Returns true if TermsAndConditionsAirChange instances are equal
        /// </summary>
        /// <param name="input">Instance of TermsAndConditionsAirChange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TermsAndConditionsAirChange input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.FulfillmentMethod == input.FulfillmentMethod ||
                    this.FulfillmentMethod != null &&
                    this.FulfillmentMethod.SequenceEqual(input.FulfillmentMethod)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.FulfillmentMethod != null)
                    hashCode = hashCode * 59 + this.FulfillmentMethod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
