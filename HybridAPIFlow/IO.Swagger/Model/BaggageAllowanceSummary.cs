/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BaggageAllowanceSummary
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class BaggageAllowanceSummary :  IEquatable<BaggageAllowanceSummary>, IValidatableObject
    {
        /// <summary>
        /// The type of baggage that is being limmited.
        /// </summary>
        /// <value>The type of baggage that is being limmited.</value>
        [DataMember(Name="baggageType", EmitDefaultValue=false)]
        public BaggageTypeEnum? BaggageType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BaggageAllowanceSummary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BaggageAllowanceSummary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BaggageAllowanceSummary" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="passengerTypeCodes">Assigned Type: c-1100:PassengerTypeCodeList.</param>
        /// <param name="baggageType">The type of baggage that is being limmited..</param>
        /// <param name="productRef">A product is any product, service or package of products and services  that can be priced and purchased by a specific supplier..</param>
        /// <param name="baggageItem">baggageItem (required).</param>
        /// <param name="segmentSequenceList">Segment sequence is only to be used when the baggage allowance differs between segments within a product. If so, then the ProducRef must be specified..</param>
        /// <param name="text">text.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public BaggageAllowanceSummary(string type = default(string), List<string> passengerTypeCodes = default(List<string>), BaggageTypeEnum? baggageType = default(BaggageTypeEnum?), List<string> productRef = default(List<string>), List<BaggageItem> baggageItem = default(List<BaggageItem>), List<int?> segmentSequenceList = default(List<int?>), List<string> text = default(List<string>), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for BaggageAllowanceSummary and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "baggageItem" is required (not null)
            if (baggageItem == null)
            {
                throw new InvalidDataException("baggageItem is a required property for BaggageAllowanceSummary and cannot be null");
            }
            else
            {
                this.BaggageItem = baggageItem;
            }
            this.PassengerTypeCodes = passengerTypeCodes;
            this.BaggageType = baggageType;
            this.ProductRef = productRef;
            this.SegmentSequenceList = segmentSequenceList;
            this.Text = text;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:PassengerTypeCodeList
        /// </summary>
        /// <value>Assigned Type: c-1100:PassengerTypeCodeList</value>
        [DataMember(Name="passengerTypeCodes", EmitDefaultValue=false)]
        public List<string> PassengerTypeCodes { get; set; }


        /// <summary>
        /// A product is any product, service or package of products and services  that can be priced and purchased by a specific supplier.
        /// </summary>
        /// <value>A product is any product, service or package of products and services  that can be priced and purchased by a specific supplier.</value>
        [DataMember(Name="ProductRef", EmitDefaultValue=false)]
        public List<string> ProductRef { get; set; }

        /// <summary>
        /// Gets or Sets BaggageItem
        /// </summary>
        [DataMember(Name="BaggageItem", EmitDefaultValue=false)]
        public List<BaggageItem> BaggageItem { get; set; }

        /// <summary>
        /// Segment sequence is only to be used when the baggage allowance differs between segments within a product. If so, then the ProducRef must be specified.
        /// </summary>
        /// <value>Segment sequence is only to be used when the baggage allowance differs between segments within a product. If so, then the ProducRef must be specified.</value>
        [DataMember(Name="SegmentSequenceList", EmitDefaultValue=false)]
        public List<int?> SegmentSequenceList { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="Text", EmitDefaultValue=false)]
        public List<string> Text { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaggageAllowanceSummary {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PassengerTypeCodes: ").Append(PassengerTypeCodes).Append("\n");
            sb.Append("  BaggageType: ").Append(BaggageType).Append("\n");
            sb.Append("  ProductRef: ").Append(ProductRef).Append("\n");
            sb.Append("  BaggageItem: ").Append(BaggageItem).Append("\n");
            sb.Append("  SegmentSequenceList: ").Append(SegmentSequenceList).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BaggageAllowanceSummary);
        }

        /// <summary>
        /// Returns true if BaggageAllowanceSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of BaggageAllowanceSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaggageAllowanceSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.PassengerTypeCodes == input.PassengerTypeCodes ||
                    this.PassengerTypeCodes != null &&
                    this.PassengerTypeCodes.SequenceEqual(input.PassengerTypeCodes)
                ) && 
                (
                    this.BaggageType == input.BaggageType ||
                    (this.BaggageType != null &&
                    this.BaggageType.Equals(input.BaggageType))
                ) && 
                (
                    this.ProductRef == input.ProductRef ||
                    this.ProductRef != null &&
                    this.ProductRef.SequenceEqual(input.ProductRef)
                ) && 
                (
                    this.BaggageItem == input.BaggageItem ||
                    this.BaggageItem != null &&
                    this.BaggageItem.SequenceEqual(input.BaggageItem)
                ) && 
                (
                    this.SegmentSequenceList == input.SegmentSequenceList ||
                    this.SegmentSequenceList != null &&
                    this.SegmentSequenceList.SequenceEqual(input.SegmentSequenceList)
                ) && 
                (
                    this.Text == input.Text ||
                    this.Text != null &&
                    this.Text.SequenceEqual(input.Text)
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.PassengerTypeCodes != null)
                    hashCode = hashCode * 59 + this.PassengerTypeCodes.GetHashCode();
                if (this.BaggageType != null)
                    hashCode = hashCode * 59 + this.BaggageType.GetHashCode();
                if (this.ProductRef != null)
                    hashCode = hashCode * 59 + this.ProductRef.GetHashCode();
                if (this.BaggageItem != null)
                    hashCode = hashCode * 59 + this.BaggageItem.GetHashCode();
                if (this.SegmentSequenceList != null)
                    hashCode = hashCode * 59 + this.SegmentSequenceList.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
