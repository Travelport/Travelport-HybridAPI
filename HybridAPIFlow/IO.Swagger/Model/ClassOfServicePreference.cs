/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ClassOfServicePreference
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class ClassOfServicePreference :  IEquatable<ClassOfServicePreference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClassOfServicePreference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ClassOfServicePreference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClassOfServicePreference" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="legSequence">Assigned Type: c-1100:SegmentSequenceList.</param>
        /// <param name="classesOfService">Allows user to specify which class(s) of service they want returned in CatalogOfferings (required).</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public ClassOfServicePreference(string type = default(string), List<int?> legSequence = default(List<int?>), List<string> classesOfService = default(List<string>), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ClassOfServicePreference and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "classesOfService" is required (not null)
            if (classesOfService == null)
            {
                throw new InvalidDataException("classesOfService is a required property for ClassOfServicePreference and cannot be null");
            }
            else
            {
                this.ClassesOfService = classesOfService;
            }
            this.LegSequence = legSequence;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:SegmentSequenceList
        /// </summary>
        /// <value>Assigned Type: c-1100:SegmentSequenceList</value>
        [DataMember(Name="legSequence", EmitDefaultValue=false)]
        public List<int?> LegSequence { get; set; }

        /// <summary>
        /// Allows user to specify which class(s) of service they want returned in CatalogOfferings
        /// </summary>
        /// <value>Allows user to specify which class(s) of service they want returned in CatalogOfferings</value>
        [DataMember(Name="ClassesOfService", EmitDefaultValue=false)]
        public List<string> ClassesOfService { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClassOfServicePreference {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  LegSequence: ").Append(LegSequence).Append("\n");
            sb.Append("  ClassesOfService: ").Append(ClassesOfService).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClassOfServicePreference);
        }

        /// <summary>
        /// Returns true if ClassOfServicePreference instances are equal
        /// </summary>
        /// <param name="input">Instance of ClassOfServicePreference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClassOfServicePreference input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.LegSequence == input.LegSequence ||
                    this.LegSequence != null &&
                    this.LegSequence.SequenceEqual(input.LegSequence)
                ) && 
                (
                    this.ClassesOfService == input.ClassesOfService ||
                    this.ClassesOfService != null &&
                    this.ClassesOfService.SequenceEqual(input.ClassesOfService)
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.LegSequence != null)
                    hashCode = hashCode * 59 + this.LegSequence.GetHashCode();
                if (this.ClassesOfService != null)
                    hashCode = hashCode * 59 + this.ClassesOfService.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
