/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// StopoverRestriction
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class StopoverRestriction :  IEquatable<StopoverRestriction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StopoverRestriction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StopoverRestriction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StopoverRestriction" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="stopoverChargeRef">Reference to the Stopover Charge (required).</param>
        /// <param name="journeyTypes">journeyTypes.</param>
        /// <param name="departureCarrier">Assigned Type: c-1100:AirlineCode.</param>
        /// <param name="arrivalAirline">Assigned Type: c-1100:AirlineCode.</param>
        /// <param name="geographicRestriction">geographicRestriction.</param>
        /// <param name="onlineStopoverOnlyInd">If true, the stopover may only take place when the arriving and departing airline are the same.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public StopoverRestriction(string type = default(string), string stopoverChargeRef = default(string), List<JourneyTypeEnum> journeyTypes = default(List<JourneyTypeEnum>), string departureCarrier = default(string), string arrivalAirline = default(string), List<GeographicRestriction> geographicRestriction = default(List<GeographicRestriction>), bool? onlineStopoverOnlyInd = default(bool?), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for StopoverRestriction and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "stopoverChargeRef" is required (not null)
            if (stopoverChargeRef == null)
            {
                throw new InvalidDataException("stopoverChargeRef is a required property for StopoverRestriction and cannot be null");
            }
            else
            {
                this.StopoverChargeRef = stopoverChargeRef;
            }
            this.JourneyTypes = journeyTypes;
            this.DepartureCarrier = departureCarrier;
            this.ArrivalAirline = arrivalAirline;
            this.GeographicRestriction = geographicRestriction;
            this.OnlineStopoverOnlyInd = onlineStopoverOnlyInd;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Reference to the Stopover Charge
        /// </summary>
        /// <value>Reference to the Stopover Charge</value>
        [DataMember(Name="stopoverChargeRef", EmitDefaultValue=false)]
        public string StopoverChargeRef { get; set; }

        /// <summary>
        /// Gets or Sets JourneyTypes
        /// </summary>
        [DataMember(Name="journeyTypes", EmitDefaultValue=false)]
        public List<JourneyTypeEnum> JourneyTypes { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:AirlineCode
        /// </summary>
        /// <value>Assigned Type: c-1100:AirlineCode</value>
        [DataMember(Name="departureCarrier", EmitDefaultValue=false)]
        public string DepartureCarrier { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:AirlineCode
        /// </summary>
        /// <value>Assigned Type: c-1100:AirlineCode</value>
        [DataMember(Name="arrivalAirline", EmitDefaultValue=false)]
        public string ArrivalAirline { get; set; }

        /// <summary>
        /// Gets or Sets GeographicRestriction
        /// </summary>
        [DataMember(Name="GeographicRestriction", EmitDefaultValue=false)]
        public List<GeographicRestriction> GeographicRestriction { get; set; }

        /// <summary>
        /// If true, the stopover may only take place when the arriving and departing airline are the same
        /// </summary>
        /// <value>If true, the stopover may only take place when the arriving and departing airline are the same</value>
        [DataMember(Name="onlineStopoverOnlyInd", EmitDefaultValue=false)]
        public bool? OnlineStopoverOnlyInd { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StopoverRestriction {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  StopoverChargeRef: ").Append(StopoverChargeRef).Append("\n");
            sb.Append("  JourneyTypes: ").Append(JourneyTypes).Append("\n");
            sb.Append("  DepartureCarrier: ").Append(DepartureCarrier).Append("\n");
            sb.Append("  ArrivalAirline: ").Append(ArrivalAirline).Append("\n");
            sb.Append("  GeographicRestriction: ").Append(GeographicRestriction).Append("\n");
            sb.Append("  OnlineStopoverOnlyInd: ").Append(OnlineStopoverOnlyInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StopoverRestriction);
        }

        /// <summary>
        /// Returns true if StopoverRestriction instances are equal
        /// </summary>
        /// <param name="input">Instance of StopoverRestriction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StopoverRestriction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.StopoverChargeRef == input.StopoverChargeRef ||
                    (this.StopoverChargeRef != null &&
                    this.StopoverChargeRef.Equals(input.StopoverChargeRef))
                ) && 
                (
                    this.JourneyTypes == input.JourneyTypes ||
                    this.JourneyTypes != null &&
                    this.JourneyTypes.SequenceEqual(input.JourneyTypes)
                ) && 
                (
                    this.DepartureCarrier == input.DepartureCarrier ||
                    (this.DepartureCarrier != null &&
                    this.DepartureCarrier.Equals(input.DepartureCarrier))
                ) && 
                (
                    this.ArrivalAirline == input.ArrivalAirline ||
                    (this.ArrivalAirline != null &&
                    this.ArrivalAirline.Equals(input.ArrivalAirline))
                ) && 
                (
                    this.GeographicRestriction == input.GeographicRestriction ||
                    this.GeographicRestriction != null &&
                    this.GeographicRestriction.SequenceEqual(input.GeographicRestriction)
                ) && 
                (
                    this.OnlineStopoverOnlyInd == input.OnlineStopoverOnlyInd ||
                    (this.OnlineStopoverOnlyInd != null &&
                    this.OnlineStopoverOnlyInd.Equals(input.OnlineStopoverOnlyInd))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.StopoverChargeRef != null)
                    hashCode = hashCode * 59 + this.StopoverChargeRef.GetHashCode();
                if (this.JourneyTypes != null)
                    hashCode = hashCode * 59 + this.JourneyTypes.GetHashCode();
                if (this.DepartureCarrier != null)
                    hashCode = hashCode * 59 + this.DepartureCarrier.GetHashCode();
                if (this.ArrivalAirline != null)
                    hashCode = hashCode * 59 + this.ArrivalAirline.GetHashCode();
                if (this.GeographicRestriction != null)
                    hashCode = hashCode * 59 + this.GeographicRestriction.GetHashCode();
                if (this.OnlineStopoverOnlyInd != null)
                    hashCode = hashCode * 59 + this.OnlineStopoverOnlyInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // DepartureCarrier (string) pattern
            Regex regexDepartureCarrier = new Regex(@"([a-zA-Z0-9]{2,3})", RegexOptions.CultureInvariant);
            if (false == regexDepartureCarrier.Match(this.DepartureCarrier).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DepartureCarrier, must match a pattern of " + regexDepartureCarrier, new [] { "DepartureCarrier" });
            }

            // ArrivalAirline (string) pattern
            Regex regexArrivalAirline = new Regex(@"([a-zA-Z0-9]{2,3})", RegexOptions.CultureInvariant);
            if (false == regexArrivalAirline.Match(this.ArrivalAirline).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ArrivalAirline, must match a pattern of " + regexArrivalAirline, new [] { "ArrivalAirline" });
            }

            yield break;
        }
    }

}
