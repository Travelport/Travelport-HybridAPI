/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CancelPermitted
    /// </summary>
    [DataContract]
    public partial class CancelPermitted : Cancel,  IEquatable<CancelPermitted>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CancelPermitted" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CancelPermitted() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CancelPermitted" /> class.
        /// </summary>
        /// <param name="penaltyTypes">penaltyTypes (required).</param>
        /// <param name="penaltyAppliesTo">Assigned Type: ctar-1100:PenaltyAppliesToEnum (required).</param>
        /// <param name="penalty">penalty (required).</param>
        /// <param name="higherPenatltyAppliesInd">If true, when an amount and a percent are specified in the Penalty then the higher of these apply.</param>
        /// <param name="extensionPointChoice">extensionPointChoice.</param>
        public CancelPermitted(List<PenaltyTypeEnum> penaltyTypes = default(List<PenaltyTypeEnum>), PenaltyAppliesToEnum penaltyAppliesTo = default(PenaltyAppliesToEnum), List<Penalty> penalty = default(List<Penalty>), bool? higherPenatltyAppliesInd = default(bool?), ExtensionPointChoice extensionPointChoice = default(ExtensionPointChoice), string type = "CancelPermitted", Object extensionPoint = default(Object)) : base(type, extensionPoint)
        {
            // to ensure "penaltyTypes" is required (not null)
            if (penaltyTypes == null)
            {
                throw new InvalidDataException("penaltyTypes is a required property for CancelPermitted and cannot be null");
            }
            else
            {
                this.PenaltyTypes = penaltyTypes;
            }
            // to ensure "penaltyAppliesTo" is required (not null)
            if (penaltyAppliesTo == null)
            {
                throw new InvalidDataException("penaltyAppliesTo is a required property for CancelPermitted and cannot be null");
            }
            else
            {
                this.PenaltyAppliesTo = penaltyAppliesTo;
            }
            // to ensure "penalty" is required (not null)
            if (penalty == null)
            {
                throw new InvalidDataException("penalty is a required property for CancelPermitted and cannot be null");
            }
            else
            {
                this.Penalty = penalty;
            }
            this.HigherPenatltyAppliesInd = higherPenatltyAppliesInd;
            this.ExtensionPointChoice = extensionPointChoice;
        }
        
        /// <summary>
        /// Gets or Sets PenaltyTypes
        /// </summary>
        [DataMember(Name="penaltyTypes", EmitDefaultValue=false)]
        public List<PenaltyTypeEnum> PenaltyTypes { get; set; }

        /// <summary>
        /// Assigned Type: ctar-1100:PenaltyAppliesToEnum
        /// </summary>
        /// <value>Assigned Type: ctar-1100:PenaltyAppliesToEnum</value>
        [DataMember(Name="PenaltyAppliesTo", EmitDefaultValue=false)]
        public PenaltyAppliesToEnum PenaltyAppliesTo { get; set; }

        /// <summary>
        /// Gets or Sets Penalty
        /// </summary>
        [DataMember(Name="Penalty", EmitDefaultValue=false)]
        public List<Penalty> Penalty { get; set; }

        /// <summary>
        /// If true, when an amount and a percent are specified in the Penalty then the higher of these apply
        /// </summary>
        /// <value>If true, when an amount and a percent are specified in the Penalty then the higher of these apply</value>
        [DataMember(Name="higherPenatltyAppliesInd", EmitDefaultValue=false)]
        public bool? HigherPenatltyAppliesInd { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPointChoice
        /// </summary>
        [DataMember(Name="ExtensionPoint_Choice", EmitDefaultValue=false)]
        public ExtensionPointChoice ExtensionPointChoice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CancelPermitted {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  PenaltyTypes: ").Append(PenaltyTypes).Append("\n");
            sb.Append("  PenaltyAppliesTo: ").Append(PenaltyAppliesTo).Append("\n");
            sb.Append("  Penalty: ").Append(Penalty).Append("\n");
            sb.Append("  HigherPenatltyAppliesInd: ").Append(HigherPenatltyAppliesInd).Append("\n");
            sb.Append("  ExtensionPointChoice: ").Append(ExtensionPointChoice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CancelPermitted);
        }

        /// <summary>
        /// Returns true if CancelPermitted instances are equal
        /// </summary>
        /// <param name="input">Instance of CancelPermitted to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CancelPermitted input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.PenaltyTypes == input.PenaltyTypes ||
                    this.PenaltyTypes != null &&
                    this.PenaltyTypes.SequenceEqual(input.PenaltyTypes)
                ) && base.Equals(input) && 
                (
                    this.PenaltyAppliesTo == input.PenaltyAppliesTo ||
                    (this.PenaltyAppliesTo != null &&
                    this.PenaltyAppliesTo.Equals(input.PenaltyAppliesTo))
                ) && base.Equals(input) && 
                (
                    this.Penalty == input.Penalty ||
                    this.Penalty != null &&
                    this.Penalty.SequenceEqual(input.Penalty)
                ) && base.Equals(input) && 
                (
                    this.HigherPenatltyAppliesInd == input.HigherPenatltyAppliesInd ||
                    (this.HigherPenatltyAppliesInd != null &&
                    this.HigherPenatltyAppliesInd.Equals(input.HigherPenatltyAppliesInd))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointChoice == input.ExtensionPointChoice ||
                    (this.ExtensionPointChoice != null &&
                    this.ExtensionPointChoice.Equals(input.ExtensionPointChoice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.PenaltyTypes != null)
                    hashCode = hashCode * 59 + this.PenaltyTypes.GetHashCode();
                if (this.PenaltyAppliesTo != null)
                    hashCode = hashCode * 59 + this.PenaltyAppliesTo.GetHashCode();
                if (this.Penalty != null)
                    hashCode = hashCode * 59 + this.Penalty.GetHashCode();
                if (this.HigherPenatltyAppliesInd != null)
                    hashCode = hashCode * 59 + this.HigherPenatltyAppliesInd.GetHashCode();
                if (this.ExtensionPointChoice != null)
                    hashCode = hashCode * 59 + this.ExtensionPointChoice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
