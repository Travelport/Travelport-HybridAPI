/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SearchModifiersAir
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class SearchModifiersAir :  IEquatable<SearchModifiersAir>, IValidatableObject
    {
        /// <summary>
        /// A type of ground transportation that is to be excluded for the response
        /// </summary>
        /// <value>A type of ground transportation that is to be excluded for the response</value>
        [DataMember(Name="excludeGround", EmitDefaultValue=false)]
        public ExcludeGroundTypeEnum? ExcludeGround { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchModifiersAir" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchModifiersAir() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchModifiersAir" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="excludeGround">A type of ground transportation that is to be excluded for the response.</param>
        /// <param name="carrierPreference">carrierPreference.</param>
        /// <param name="cabinPreference">cabinPreference.</param>
        /// <param name="classOfServicePreference">classOfServicePreference.</param>
        /// <param name="productInclusionPreference">productInclusionPreference.</param>
        /// <param name="connectionPreferences">connectionPreferences.</param>
        /// <param name="prohibitChangeOfAirportInd">If present and true, connections that require a change of airports are not returned.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public SearchModifiersAir(string type = default(string), ExcludeGroundTypeEnum? excludeGround = default(ExcludeGroundTypeEnum?), List<CarrierPreference> carrierPreference = default(List<CarrierPreference>), List<CabinPreference> cabinPreference = default(List<CabinPreference>), List<ClassOfServicePreference> classOfServicePreference = default(List<ClassOfServicePreference>), List<ProductInclusionPreference> productInclusionPreference = default(List<ProductInclusionPreference>), List<ConnectionPreferences> connectionPreferences = default(List<ConnectionPreferences>), bool? prohibitChangeOfAirportInd = default(bool?), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for SearchModifiersAir and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.ExcludeGround = excludeGround;
            this.CarrierPreference = carrierPreference;
            this.CabinPreference = cabinPreference;
            this.ClassOfServicePreference = classOfServicePreference;
            this.ProductInclusionPreference = productInclusionPreference;
            this.ConnectionPreferences = connectionPreferences;
            this.ProhibitChangeOfAirportInd = prohibitChangeOfAirportInd;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }


        /// <summary>
        /// Gets or Sets CarrierPreference
        /// </summary>
        [DataMember(Name="CarrierPreference", EmitDefaultValue=false)]
        public List<CarrierPreference> CarrierPreference { get; set; }

        /// <summary>
        /// Gets or Sets CabinPreference
        /// </summary>
        [DataMember(Name="CabinPreference", EmitDefaultValue=false)]
        public List<CabinPreference> CabinPreference { get; set; }

        /// <summary>
        /// Gets or Sets ClassOfServicePreference
        /// </summary>
        [DataMember(Name="ClassOfServicePreference", EmitDefaultValue=false)]
        public List<ClassOfServicePreference> ClassOfServicePreference { get; set; }

        /// <summary>
        /// Gets or Sets ProductInclusionPreference
        /// </summary>
        [DataMember(Name="ProductInclusionPreference", EmitDefaultValue=false)]
        public List<ProductInclusionPreference> ProductInclusionPreference { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionPreferences
        /// </summary>
        [DataMember(Name="ConnectionPreferences", EmitDefaultValue=false)]
        public List<ConnectionPreferences> ConnectionPreferences { get; set; }

        /// <summary>
        /// If present and true, connections that require a change of airports are not returned
        /// </summary>
        /// <value>If present and true, connections that require a change of airports are not returned</value>
        [DataMember(Name="prohibitChangeOfAirportInd", EmitDefaultValue=false)]
        public bool? ProhibitChangeOfAirportInd { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchModifiersAir {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ExcludeGround: ").Append(ExcludeGround).Append("\n");
            sb.Append("  CarrierPreference: ").Append(CarrierPreference).Append("\n");
            sb.Append("  CabinPreference: ").Append(CabinPreference).Append("\n");
            sb.Append("  ClassOfServicePreference: ").Append(ClassOfServicePreference).Append("\n");
            sb.Append("  ProductInclusionPreference: ").Append(ProductInclusionPreference).Append("\n");
            sb.Append("  ConnectionPreferences: ").Append(ConnectionPreferences).Append("\n");
            sb.Append("  ProhibitChangeOfAirportInd: ").Append(ProhibitChangeOfAirportInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchModifiersAir);
        }

        /// <summary>
        /// Returns true if SearchModifiersAir instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchModifiersAir to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchModifiersAir input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ExcludeGround == input.ExcludeGround ||
                    (this.ExcludeGround != null &&
                    this.ExcludeGround.Equals(input.ExcludeGround))
                ) && 
                (
                    this.CarrierPreference == input.CarrierPreference ||
                    this.CarrierPreference != null &&
                    this.CarrierPreference.SequenceEqual(input.CarrierPreference)
                ) && 
                (
                    this.CabinPreference == input.CabinPreference ||
                    this.CabinPreference != null &&
                    this.CabinPreference.SequenceEqual(input.CabinPreference)
                ) && 
                (
                    this.ClassOfServicePreference == input.ClassOfServicePreference ||
                    this.ClassOfServicePreference != null &&
                    this.ClassOfServicePreference.SequenceEqual(input.ClassOfServicePreference)
                ) && 
                (
                    this.ProductInclusionPreference == input.ProductInclusionPreference ||
                    this.ProductInclusionPreference != null &&
                    this.ProductInclusionPreference.SequenceEqual(input.ProductInclusionPreference)
                ) && 
                (
                    this.ConnectionPreferences == input.ConnectionPreferences ||
                    this.ConnectionPreferences != null &&
                    this.ConnectionPreferences.SequenceEqual(input.ConnectionPreferences)
                ) && 
                (
                    this.ProhibitChangeOfAirportInd == input.ProhibitChangeOfAirportInd ||
                    (this.ProhibitChangeOfAirportInd != null &&
                    this.ProhibitChangeOfAirportInd.Equals(input.ProhibitChangeOfAirportInd))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ExcludeGround != null)
                    hashCode = hashCode * 59 + this.ExcludeGround.GetHashCode();
                if (this.CarrierPreference != null)
                    hashCode = hashCode * 59 + this.CarrierPreference.GetHashCode();
                if (this.CabinPreference != null)
                    hashCode = hashCode * 59 + this.CabinPreference.GetHashCode();
                if (this.ClassOfServicePreference != null)
                    hashCode = hashCode * 59 + this.ClassOfServicePreference.GetHashCode();
                if (this.ProductInclusionPreference != null)
                    hashCode = hashCode * 59 + this.ProductInclusionPreference.GetHashCode();
                if (this.ConnectionPreferences != null)
                    hashCode = hashCode * 59 + this.ConnectionPreferences.GetHashCode();
                if (this.ProhibitChangeOfAirportInd != null)
                    hashCode = hashCode * 59 + this.ProhibitChangeOfAirportInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
