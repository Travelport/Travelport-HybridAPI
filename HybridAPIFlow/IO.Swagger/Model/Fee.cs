/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Fee
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class Fee :  IEquatable<Fee>, IValidatableObject
    {
        /// <summary>
        /// When the fee must be applied
        /// </summary>
        /// <value>When the fee must be applied</value>
        [DataMember(Name="feeApplication", EmitDefaultValue=false)]
        public ApplicationEnum? FeeApplication { get; set; }
        /// <summary>
        /// The frequency the fee is applied
        /// </summary>
        /// <value>The frequency the fee is applied</value>
        [DataMember(Name="feeFrequency", EmitDefaultValue=false)]
        public FrequencyEnum? FeeFrequency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Fee" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Fee() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Fee" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="feeCode">Assigned Type: c-1100:StringTiny.</param>
        /// <param name="reportingAuthority">Assigned Type: c-1100:StringTiny.</param>
        /// <param name="purpose">Assigned Type: c-1100:StringTiny.</param>
        /// <param name="description">Assigned Type: c-1100:String.</param>
        /// <param name="feeApplication">When the fee must be applied.</param>
        /// <param name="feeFrequency">The frequency the fee is applied.</param>
        /// <param name="feeAmountOrPercent">Assigned Type: c-1100:FeeAmountOrPercent (required).</param>
        /// <param name="tax">tax.</param>
        /// <param name="includedinBaseInd">If the fee is included in the Base Price.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public Fee(string type = default(string), string feeCode = default(string), string reportingAuthority = default(string), string purpose = default(string), string description = default(string), ApplicationEnum? feeApplication = default(ApplicationEnum?), FrequencyEnum? feeFrequency = default(FrequencyEnum?), FeeAmountOrPercent feeAmountOrPercent = default(FeeAmountOrPercent), List<Tax> tax = default(List<Tax>), bool? includedinBaseInd = default(bool?), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Fee and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "feeAmountOrPercent" is required (not null)
            if (feeAmountOrPercent == null)
            {
                throw new InvalidDataException("feeAmountOrPercent is a required property for Fee and cannot be null");
            }
            else
            {
                this.FeeAmountOrPercent = feeAmountOrPercent;
            }
            this.FeeCode = feeCode;
            this.ReportingAuthority = reportingAuthority;
            this.Purpose = purpose;
            this.Description = description;
            this.FeeApplication = feeApplication;
            this.FeeFrequency = feeFrequency;
            this.Tax = tax;
            this.IncludedinBaseInd = includedinBaseInd;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:StringTiny
        /// </summary>
        /// <value>Assigned Type: c-1100:StringTiny</value>
        [DataMember(Name="feeCode", EmitDefaultValue=false)]
        public string FeeCode { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:StringTiny
        /// </summary>
        /// <value>Assigned Type: c-1100:StringTiny</value>
        [DataMember(Name="reportingAuthority", EmitDefaultValue=false)]
        public string ReportingAuthority { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:StringTiny
        /// </summary>
        /// <value>Assigned Type: c-1100:StringTiny</value>
        [DataMember(Name="purpose", EmitDefaultValue=false)]
        public string Purpose { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:String
        /// </summary>
        /// <value>Assigned Type: c-1100:String</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }



        /// <summary>
        /// Assigned Type: c-1100:FeeAmountOrPercent
        /// </summary>
        /// <value>Assigned Type: c-1100:FeeAmountOrPercent</value>
        [DataMember(Name="FeeAmountOrPercent", EmitDefaultValue=false)]
        public FeeAmountOrPercent FeeAmountOrPercent { get; set; }

        /// <summary>
        /// Gets or Sets Tax
        /// </summary>
        [DataMember(Name="Tax", EmitDefaultValue=false)]
        public List<Tax> Tax { get; set; }

        /// <summary>
        /// If the fee is included in the Base Price
        /// </summary>
        /// <value>If the fee is included in the Base Price</value>
        [DataMember(Name="includedinBaseInd", EmitDefaultValue=false)]
        public bool? IncludedinBaseInd { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Fee {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FeeCode: ").Append(FeeCode).Append("\n");
            sb.Append("  ReportingAuthority: ").Append(ReportingAuthority).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FeeApplication: ").Append(FeeApplication).Append("\n");
            sb.Append("  FeeFrequency: ").Append(FeeFrequency).Append("\n");
            sb.Append("  FeeAmountOrPercent: ").Append(FeeAmountOrPercent).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  IncludedinBaseInd: ").Append(IncludedinBaseInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Fee);
        }

        /// <summary>
        /// Returns true if Fee instances are equal
        /// </summary>
        /// <param name="input">Instance of Fee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Fee input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.FeeCode == input.FeeCode ||
                    (this.FeeCode != null &&
                    this.FeeCode.Equals(input.FeeCode))
                ) && 
                (
                    this.ReportingAuthority == input.ReportingAuthority ||
                    (this.ReportingAuthority != null &&
                    this.ReportingAuthority.Equals(input.ReportingAuthority))
                ) && 
                (
                    this.Purpose == input.Purpose ||
                    (this.Purpose != null &&
                    this.Purpose.Equals(input.Purpose))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FeeApplication == input.FeeApplication ||
                    (this.FeeApplication != null &&
                    this.FeeApplication.Equals(input.FeeApplication))
                ) && 
                (
                    this.FeeFrequency == input.FeeFrequency ||
                    (this.FeeFrequency != null &&
                    this.FeeFrequency.Equals(input.FeeFrequency))
                ) && 
                (
                    this.FeeAmountOrPercent == input.FeeAmountOrPercent ||
                    (this.FeeAmountOrPercent != null &&
                    this.FeeAmountOrPercent.Equals(input.FeeAmountOrPercent))
                ) && 
                (
                    this.Tax == input.Tax ||
                    this.Tax != null &&
                    this.Tax.SequenceEqual(input.Tax)
                ) && 
                (
                    this.IncludedinBaseInd == input.IncludedinBaseInd ||
                    (this.IncludedinBaseInd != null &&
                    this.IncludedinBaseInd.Equals(input.IncludedinBaseInd))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.FeeCode != null)
                    hashCode = hashCode * 59 + this.FeeCode.GetHashCode();
                if (this.ReportingAuthority != null)
                    hashCode = hashCode * 59 + this.ReportingAuthority.GetHashCode();
                if (this.Purpose != null)
                    hashCode = hashCode * 59 + this.Purpose.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.FeeApplication != null)
                    hashCode = hashCode * 59 + this.FeeApplication.GetHashCode();
                if (this.FeeFrequency != null)
                    hashCode = hashCode * 59 + this.FeeFrequency.GetHashCode();
                if (this.FeeAmountOrPercent != null)
                    hashCode = hashCode * 59 + this.FeeAmountOrPercent.GetHashCode();
                if (this.Tax != null)
                    hashCode = hashCode * 59 + this.Tax.GetHashCode();
                if (this.IncludedinBaseInd != null)
                    hashCode = hashCode * 59 + this.IncludedinBaseInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // FeeCode (string) maxLength
            if(this.FeeCode != null && this.FeeCode.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FeeCode, length must be less than 32.", new [] { "FeeCode" });
            }

            // ReportingAuthority (string) maxLength
            if(this.ReportingAuthority != null && this.ReportingAuthority.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReportingAuthority, length must be less than 32.", new [] { "ReportingAuthority" });
            }

            // Purpose (string) maxLength
            if(this.Purpose != null && this.Purpose.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Purpose, length must be less than 32.", new [] { "Purpose" });
            }

            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 512.", new [] { "Description" });
            }

            yield break;
        }
    }

}
