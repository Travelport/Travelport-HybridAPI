/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Specifies the ID for the membership program.
    /// </summary>
    [DataContract]
    public partial class CustomerLoyalty :  IEquatable<CustomerLoyalty>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerLoyalty" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="id">Customer Loyality Id.</param>
        /// <param name="priority">Assigned Type: c-1100:Priority.</param>
        /// <param name="programId">Assigned Type: c-1100:StringShort.</param>
        /// <param name="programName">Assigned Type: c-1100:LoyaltyProgramName.</param>
        /// <param name="supplierType">Assigned Type: c-1100:LoyaltySupplierType.</param>
        /// <param name="supplier">Assigned Type: c-1100:LoyaltySupplier.</param>
        /// <param name="tier">Assigned Type: c-1100:StringTiny.</param>
        /// <param name="shareWithSupplier">Assigned Type: c-1100:TinyStrings.</param>
        /// <param name="cardHolderName">Assigned Type: c-1100:StringShort.</param>
        /// <param name="validatedInd">Customer loyalty number has been validated by the supplier.</param>
        public CustomerLoyalty(string value = default(string), string id = default(string), int? priority = default(int?), string programId = default(string), string programName = default(string), string supplierType = default(string), string supplier = default(string), string tier = default(string), List<string> shareWithSupplier = default(List<string>), string cardHolderName = default(string), bool? validatedInd = default(bool?))
        {
            this.Value = value;
            this.Id = id;
            this.Priority = priority;
            this.ProgramId = programId;
            this.ProgramName = programName;
            this.SupplierType = supplierType;
            this.Supplier = supplier;
            this.Tier = tier;
            this.ShareWithSupplier = shareWithSupplier;
            this.CardHolderName = cardHolderName;
            this.ValidatedInd = validatedInd;
        }
        
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Customer Loyality Id
        /// </summary>
        /// <value>Customer Loyality Id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:Priority
        /// </summary>
        /// <value>Assigned Type: c-1100:Priority</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:StringShort
        /// </summary>
        /// <value>Assigned Type: c-1100:StringShort</value>
        [DataMember(Name="programId", EmitDefaultValue=false)]
        public string ProgramId { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:LoyaltyProgramName
        /// </summary>
        /// <value>Assigned Type: c-1100:LoyaltyProgramName</value>
        [DataMember(Name="programName", EmitDefaultValue=false)]
        public string ProgramName { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:LoyaltySupplierType
        /// </summary>
        /// <value>Assigned Type: c-1100:LoyaltySupplierType</value>
        [DataMember(Name="supplierType", EmitDefaultValue=false)]
        public string SupplierType { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:LoyaltySupplier
        /// </summary>
        /// <value>Assigned Type: c-1100:LoyaltySupplier</value>
        [DataMember(Name="supplier", EmitDefaultValue=false)]
        public string Supplier { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:StringTiny
        /// </summary>
        /// <value>Assigned Type: c-1100:StringTiny</value>
        [DataMember(Name="tier", EmitDefaultValue=false)]
        public string Tier { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:TinyStrings
        /// </summary>
        /// <value>Assigned Type: c-1100:TinyStrings</value>
        [DataMember(Name="shareWithSupplier", EmitDefaultValue=false)]
        public List<string> ShareWithSupplier { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:StringShort
        /// </summary>
        /// <value>Assigned Type: c-1100:StringShort</value>
        [DataMember(Name="cardHolderName", EmitDefaultValue=false)]
        public string CardHolderName { get; set; }

        /// <summary>
        /// Customer loyalty number has been validated by the supplier
        /// </summary>
        /// <value>Customer loyalty number has been validated by the supplier</value>
        [DataMember(Name="validatedInd", EmitDefaultValue=false)]
        public bool? ValidatedInd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerLoyalty {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  ProgramId: ").Append(ProgramId).Append("\n");
            sb.Append("  ProgramName: ").Append(ProgramName).Append("\n");
            sb.Append("  SupplierType: ").Append(SupplierType).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  ShareWithSupplier: ").Append(ShareWithSupplier).Append("\n");
            sb.Append("  CardHolderName: ").Append(CardHolderName).Append("\n");
            sb.Append("  ValidatedInd: ").Append(ValidatedInd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerLoyalty);
        }

        /// <summary>
        /// Returns true if CustomerLoyalty instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerLoyalty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerLoyalty input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.ProgramId == input.ProgramId ||
                    (this.ProgramId != null &&
                    this.ProgramId.Equals(input.ProgramId))
                ) && 
                (
                    this.ProgramName == input.ProgramName ||
                    (this.ProgramName != null &&
                    this.ProgramName.Equals(input.ProgramName))
                ) && 
                (
                    this.SupplierType == input.SupplierType ||
                    (this.SupplierType != null &&
                    this.SupplierType.Equals(input.SupplierType))
                ) && 
                (
                    this.Supplier == input.Supplier ||
                    (this.Supplier != null &&
                    this.Supplier.Equals(input.Supplier))
                ) && 
                (
                    this.Tier == input.Tier ||
                    (this.Tier != null &&
                    this.Tier.Equals(input.Tier))
                ) && 
                (
                    this.ShareWithSupplier == input.ShareWithSupplier ||
                    this.ShareWithSupplier != null &&
                    this.ShareWithSupplier.SequenceEqual(input.ShareWithSupplier)
                ) && 
                (
                    this.CardHolderName == input.CardHolderName ||
                    (this.CardHolderName != null &&
                    this.CardHolderName.Equals(input.CardHolderName))
                ) && 
                (
                    this.ValidatedInd == input.ValidatedInd ||
                    (this.ValidatedInd != null &&
                    this.ValidatedInd.Equals(input.ValidatedInd))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.ProgramId != null)
                    hashCode = hashCode * 59 + this.ProgramId.GetHashCode();
                if (this.ProgramName != null)
                    hashCode = hashCode * 59 + this.ProgramName.GetHashCode();
                if (this.SupplierType != null)
                    hashCode = hashCode * 59 + this.SupplierType.GetHashCode();
                if (this.Supplier != null)
                    hashCode = hashCode * 59 + this.Supplier.GetHashCode();
                if (this.Tier != null)
                    hashCode = hashCode * 59 + this.Tier.GetHashCode();
                if (this.ShareWithSupplier != null)
                    hashCode = hashCode * 59 + this.ShareWithSupplier.GetHashCode();
                if (this.CardHolderName != null)
                    hashCode = hashCode * 59 + this.CardHolderName.GetHashCode();
                if (this.ValidatedInd != null)
                    hashCode = hashCode * 59 + this.ValidatedInd.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if(this.Value != null && this.Value.Length > 1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 1000.", new [] { "Value" });
            }

            // Value (string) minLength
            if(this.Value != null && this.Value.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be greater than 1.", new [] { "Value" });
            }

            // Priority (int?) maximum
            if(this.Priority > (int?)300)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Priority, must be a value less than or equal to 300.", new [] { "Priority" });
            }

            // Priority (int?) minimum
            if(this.Priority < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Priority, must be a value greater than or equal to 0.", new [] { "Priority" });
            }

            // ProgramId (string) maxLength
            if(this.ProgramId != null && this.ProgramId.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramId, length must be less than 128.", new [] { "ProgramId" });
            }

            // ProgramName (string) maxLength
            if(this.ProgramName != null && this.ProgramName.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramName, length must be less than 128.", new [] { "ProgramName" });
            }

            // SupplierType (string) maxLength
            if(this.SupplierType != null && this.SupplierType.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SupplierType, length must be less than 32.", new [] { "SupplierType" });
            }

            // Supplier (string) maxLength
            if(this.Supplier != null && this.Supplier.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Supplier, length must be less than 128.", new [] { "Supplier" });
            }

            // Tier (string) maxLength
            if(this.Tier != null && this.Tier.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Tier, length must be less than 32.", new [] { "Tier" });
            }

            // CardHolderName (string) maxLength
            if(this.CardHolderName != null && this.CardHolderName.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardHolderName, length must be less than 128.", new [] { "CardHolderName" });
            }

            yield break;
        }
    }

}
