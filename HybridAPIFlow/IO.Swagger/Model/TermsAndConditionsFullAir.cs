/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TermsAndConditionsFullAir
    /// </summary>
    [DataContract]
    public partial class TermsAndConditionsFullAir : TermsAndConditionsFull,  IEquatable<TermsAndConditionsFullAir>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TermsAndConditionsFullAir" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TermsAndConditionsFullAir() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TermsAndConditionsFullAir" /> class.
        /// </summary>
        /// <param name="baggageAllowance">baggageAllowance.</param>
        /// <param name="fareRuleIdentifierRef">Assigned Type: c-1100:IdentifierRef.</param>
        /// <param name="fareRuleInfo">fareRuleInfo.</param>
        /// <param name="restriction">restriction.</param>
        /// <param name="organizationInformation">Assigned Type: ctar-1100:OrganizationInformation.</param>
        /// <param name="validatingAirline">validatingAirline.</param>
        /// <param name="baggageRecheck">baggageRecheck.</param>
        /// <param name="ticketingAgency">ticketingAgency.</param>
        /// <param name="paymentTimeLimit">The date and time by which the Offer must be paid for once the Reservation is completed.</param>
        /// <param name="promotionalCode">Assigned Type: c-1100:PromotionalCode.</param>
        /// <param name="penalties">penalties.</param>
        /// <param name="fareGuaranteePolicy">fareGuaranteePolicy.</param>
        /// <param name="instantPurchaseInd">If true the Offer/Offering must be paid for at the same time as creating the Reservation.</param>
        /// <param name="secureFlightPassengerDataRequiredInd">If true, Secure Flight Passenger Data must be input for all Travelers to complete the Reservation.</param>
        /// <param name="extensionPointCustom">extensionPointCustom.</param>
        public TermsAndConditionsFullAir(List<BaggageAllowance> baggageAllowance = default(List<BaggageAllowance>), IdentifierRef fareRuleIdentifierRef = default(IdentifierRef), List<FareRuleInfo> fareRuleInfo = default(List<FareRuleInfo>), List<Restriction> restriction = default(List<Restriction>), OrganizationInformation organizationInformation = default(OrganizationInformation), List<ValidatingAirline> validatingAirline = default(List<ValidatingAirline>), List<BaggageRecheck> baggageRecheck = default(List<BaggageRecheck>), List<TicketingAgency> ticketingAgency = default(List<TicketingAgency>), DateTime? paymentTimeLimit = default(DateTime?), PromotionalCode promotionalCode = default(PromotionalCode), List<Penalties> penalties = default(List<Penalties>), List<FareGuaranteePolicy> fareGuaranteePolicy = default(List<FareGuaranteePolicy>), bool? instantPurchaseInd = default(bool?), bool? secureFlightPassengerDataRequiredInd = default(bool?), ExtensionPointCustom extensionPointCustom = default(ExtensionPointCustom), string type = default(string), string id = default(string), string termsAndConditionsRef = default(string), Identifier identifier = default(Identifier), DateTime? expiryDate = default(DateTime?), List<CustomerLoyalty> customerLoyalty = default(List<CustomerLoyalty>), List<TravelerProduct> travelerProduct = default(List<TravelerProduct>), List<TextBlock> textBlock = default(List<TextBlock>), Object extensionPoint = default(Object)) : base(expiryDate, customerLoyalty, travelerProduct, textBlock, extensionPoint)
        {
            this.BaggageAllowance = baggageAllowance;
            this.FareRuleIdentifierRef = fareRuleIdentifierRef;
            this.FareRuleInfo = fareRuleInfo;
            this.Restriction = restriction;
            this.OrganizationInformation = organizationInformation;
            this.ValidatingAirline = validatingAirline;
            this.BaggageRecheck = baggageRecheck;
            this.TicketingAgency = ticketingAgency;
            this.PaymentTimeLimit = paymentTimeLimit;
            this.PromotionalCode = promotionalCode;
            this.Penalties = penalties;
            this.FareGuaranteePolicy = fareGuaranteePolicy;
            this.InstantPurchaseInd = instantPurchaseInd;
            this.SecureFlightPassengerDataRequiredInd = secureFlightPassengerDataRequiredInd;
            this.ExtensionPointCustom = extensionPointCustom;
        }
        
        /// <summary>
        /// Gets or Sets BaggageAllowance
        /// </summary>
        [DataMember(Name="BaggageAllowance", EmitDefaultValue=false)]
        public List<BaggageAllowance> BaggageAllowance { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:IdentifierRef
        /// </summary>
        /// <value>Assigned Type: c-1100:IdentifierRef</value>
        [DataMember(Name="FareRuleIdentifierRef", EmitDefaultValue=false)]
        public IdentifierRef FareRuleIdentifierRef { get; set; }

        /// <summary>
        /// Gets or Sets FareRuleInfo
        /// </summary>
        [DataMember(Name="FareRuleInfo", EmitDefaultValue=false)]
        public List<FareRuleInfo> FareRuleInfo { get; set; }

        /// <summary>
        /// Gets or Sets Restriction
        /// </summary>
        [DataMember(Name="Restriction", EmitDefaultValue=false)]
        public List<Restriction> Restriction { get; set; }

        /// <summary>
        /// Assigned Type: ctar-1100:OrganizationInformation
        /// </summary>
        /// <value>Assigned Type: ctar-1100:OrganizationInformation</value>
        [DataMember(Name="OrganizationInformation", EmitDefaultValue=false)]
        public OrganizationInformation OrganizationInformation { get; set; }

        /// <summary>
        /// Gets or Sets ValidatingAirline
        /// </summary>
        [DataMember(Name="ValidatingAirline", EmitDefaultValue=false)]
        public List<ValidatingAirline> ValidatingAirline { get; set; }

        /// <summary>
        /// Gets or Sets BaggageRecheck
        /// </summary>
        [DataMember(Name="BaggageRecheck", EmitDefaultValue=false)]
        public List<BaggageRecheck> BaggageRecheck { get; set; }

        /// <summary>
        /// Gets or Sets TicketingAgency
        /// </summary>
        [DataMember(Name="TicketingAgency", EmitDefaultValue=false)]
        public List<TicketingAgency> TicketingAgency { get; set; }

        /// <summary>
        /// The date and time by which the Offer must be paid for once the Reservation is completed
        /// </summary>
        /// <value>The date and time by which the Offer must be paid for once the Reservation is completed</value>
        [DataMember(Name="PaymentTimeLimit", EmitDefaultValue=false)]
        public DateTime? PaymentTimeLimit { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:PromotionalCode
        /// </summary>
        /// <value>Assigned Type: c-1100:PromotionalCode</value>
        [DataMember(Name="PromotionalCode", EmitDefaultValue=false)]
        public PromotionalCode PromotionalCode { get; set; }

        /// <summary>
        /// Gets or Sets Penalties
        /// </summary>
        [DataMember(Name="Penalties", EmitDefaultValue=false)]
        public List<Penalties> Penalties { get; set; }

        /// <summary>
        /// Gets or Sets FareGuaranteePolicy
        /// </summary>
        [DataMember(Name="FareGuaranteePolicy", EmitDefaultValue=false)]
        public List<FareGuaranteePolicy> FareGuaranteePolicy { get; set; }

        /// <summary>
        /// If true the Offer/Offering must be paid for at the same time as creating the Reservation
        /// </summary>
        /// <value>If true the Offer/Offering must be paid for at the same time as creating the Reservation</value>
        [DataMember(Name="instantPurchaseInd", EmitDefaultValue=false)]
        public bool? InstantPurchaseInd { get; set; }

        /// <summary>
        /// If true, Secure Flight Passenger Data must be input for all Travelers to complete the Reservation
        /// </summary>
        /// <value>If true, Secure Flight Passenger Data must be input for all Travelers to complete the Reservation</value>
        [DataMember(Name="secureFlightPassengerDataRequiredInd", EmitDefaultValue=false)]
        public bool? SecureFlightPassengerDataRequiredInd { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPointCustom
        /// </summary>
        [DataMember(Name="ExtensionPoint_Custom", EmitDefaultValue=false)]
        public ExtensionPointCustom ExtensionPointCustom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TermsAndConditionsFullAir {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BaggageAllowance: ").Append(BaggageAllowance).Append("\n");
            sb.Append("  FareRuleIdentifierRef: ").Append(FareRuleIdentifierRef).Append("\n");
            sb.Append("  FareRuleInfo: ").Append(FareRuleInfo).Append("\n");
            sb.Append("  Restriction: ").Append(Restriction).Append("\n");
            sb.Append("  OrganizationInformation: ").Append(OrganizationInformation).Append("\n");
            sb.Append("  ValidatingAirline: ").Append(ValidatingAirline).Append("\n");
            sb.Append("  BaggageRecheck: ").Append(BaggageRecheck).Append("\n");
            sb.Append("  TicketingAgency: ").Append(TicketingAgency).Append("\n");
            sb.Append("  PaymentTimeLimit: ").Append(PaymentTimeLimit).Append("\n");
            sb.Append("  PromotionalCode: ").Append(PromotionalCode).Append("\n");
            sb.Append("  Penalties: ").Append(Penalties).Append("\n");
            sb.Append("  FareGuaranteePolicy: ").Append(FareGuaranteePolicy).Append("\n");
            sb.Append("  InstantPurchaseInd: ").Append(InstantPurchaseInd).Append("\n");
            sb.Append("  SecureFlightPassengerDataRequiredInd: ").Append(SecureFlightPassengerDataRequiredInd).Append("\n");
            sb.Append("  ExtensionPointCustom: ").Append(ExtensionPointCustom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TermsAndConditionsFullAir);
        }

        /// <summary>
        /// Returns true if TermsAndConditionsFullAir instances are equal
        /// </summary>
        /// <param name="input">Instance of TermsAndConditionsFullAir to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TermsAndConditionsFullAir input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.BaggageAllowance == input.BaggageAllowance ||
                    this.BaggageAllowance != null &&
                    this.BaggageAllowance.SequenceEqual(input.BaggageAllowance)
                ) && base.Equals(input) && 
                (
                    this.FareRuleIdentifierRef == input.FareRuleIdentifierRef ||
                    (this.FareRuleIdentifierRef != null &&
                    this.FareRuleIdentifierRef.Equals(input.FareRuleIdentifierRef))
                ) && base.Equals(input) && 
                (
                    this.FareRuleInfo == input.FareRuleInfo ||
                    this.FareRuleInfo != null &&
                    this.FareRuleInfo.SequenceEqual(input.FareRuleInfo)
                ) && base.Equals(input) && 
                (
                    this.Restriction == input.Restriction ||
                    this.Restriction != null &&
                    this.Restriction.SequenceEqual(input.Restriction)
                ) && base.Equals(input) && 
                (
                    this.OrganizationInformation == input.OrganizationInformation ||
                    (this.OrganizationInformation != null &&
                    this.OrganizationInformation.Equals(input.OrganizationInformation))
                ) && base.Equals(input) && 
                (
                    this.ValidatingAirline == input.ValidatingAirline ||
                    this.ValidatingAirline != null &&
                    this.ValidatingAirline.SequenceEqual(input.ValidatingAirline)
                ) && base.Equals(input) && 
                (
                    this.BaggageRecheck == input.BaggageRecheck ||
                    this.BaggageRecheck != null &&
                    this.BaggageRecheck.SequenceEqual(input.BaggageRecheck)
                ) && base.Equals(input) && 
                (
                    this.TicketingAgency == input.TicketingAgency ||
                    this.TicketingAgency != null &&
                    this.TicketingAgency.SequenceEqual(input.TicketingAgency)
                ) && base.Equals(input) && 
                (
                    this.PaymentTimeLimit == input.PaymentTimeLimit ||
                    (this.PaymentTimeLimit != null &&
                    this.PaymentTimeLimit.Equals(input.PaymentTimeLimit))
                ) && base.Equals(input) && 
                (
                    this.PromotionalCode == input.PromotionalCode ||
                    (this.PromotionalCode != null &&
                    this.PromotionalCode.Equals(input.PromotionalCode))
                ) && base.Equals(input) && 
                (
                    this.Penalties == input.Penalties ||
                    this.Penalties != null &&
                    this.Penalties.SequenceEqual(input.Penalties)
                ) && base.Equals(input) && 
                (
                    this.FareGuaranteePolicy == input.FareGuaranteePolicy ||
                    this.FareGuaranteePolicy != null &&
                    this.FareGuaranteePolicy.SequenceEqual(input.FareGuaranteePolicy)
                ) && base.Equals(input) && 
                (
                    this.InstantPurchaseInd == input.InstantPurchaseInd ||
                    (this.InstantPurchaseInd != null &&
                    this.InstantPurchaseInd.Equals(input.InstantPurchaseInd))
                ) && base.Equals(input) && 
                (
                    this.SecureFlightPassengerDataRequiredInd == input.SecureFlightPassengerDataRequiredInd ||
                    (this.SecureFlightPassengerDataRequiredInd != null &&
                    this.SecureFlightPassengerDataRequiredInd.Equals(input.SecureFlightPassengerDataRequiredInd))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointCustom == input.ExtensionPointCustom ||
                    (this.ExtensionPointCustom != null &&
                    this.ExtensionPointCustom.Equals(input.ExtensionPointCustom))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.BaggageAllowance != null)
                    hashCode = hashCode * 59 + this.BaggageAllowance.GetHashCode();
                if (this.FareRuleIdentifierRef != null)
                    hashCode = hashCode * 59 + this.FareRuleIdentifierRef.GetHashCode();
                if (this.FareRuleInfo != null)
                    hashCode = hashCode * 59 + this.FareRuleInfo.GetHashCode();
                if (this.Restriction != null)
                    hashCode = hashCode * 59 + this.Restriction.GetHashCode();
                if (this.OrganizationInformation != null)
                    hashCode = hashCode * 59 + this.OrganizationInformation.GetHashCode();
                if (this.ValidatingAirline != null)
                    hashCode = hashCode * 59 + this.ValidatingAirline.GetHashCode();
                if (this.BaggageRecheck != null)
                    hashCode = hashCode * 59 + this.BaggageRecheck.GetHashCode();
                if (this.TicketingAgency != null)
                    hashCode = hashCode * 59 + this.TicketingAgency.GetHashCode();
                if (this.PaymentTimeLimit != null)
                    hashCode = hashCode * 59 + this.PaymentTimeLimit.GetHashCode();
                if (this.PromotionalCode != null)
                    hashCode = hashCode * 59 + this.PromotionalCode.GetHashCode();
                if (this.Penalties != null)
                    hashCode = hashCode * 59 + this.Penalties.GetHashCode();
                if (this.FareGuaranteePolicy != null)
                    hashCode = hashCode * 59 + this.FareGuaranteePolicy.GetHashCode();
                if (this.InstantPurchaseInd != null)
                    hashCode = hashCode * 59 + this.InstantPurchaseInd.GetHashCode();
                if (this.SecureFlightPassengerDataRequiredInd != null)
                    hashCode = hashCode * 59 + this.SecureFlightPassengerDataRequiredInd.GetHashCode();
                if (this.ExtensionPointCustom != null)
                    hashCode = hashCode * 59 + this.ExtensionPointCustom.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
