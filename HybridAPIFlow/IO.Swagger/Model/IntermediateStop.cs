/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// An intermediate stop location and duration
    /// </summary>
    [DataContract]
    public partial class IntermediateStop :  IEquatable<IntermediateStop>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IntermediateStop" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="arrivalFlightDuration">arrivalFlightDuration.</param>
        /// <param name="departureFlightDuration">departureFlightDuration.</param>
        /// <param name="duration">Duration stopped at this location.</param>
        /// <param name="equipment">Assigned Type: c-1100:AirEquipCodeIATA.</param>
        /// <param name="arrivalDate">Assigned Type: ota2:LocalDate.</param>
        /// <param name="departureDate">Assigned Type: ota2:LocalDate.</param>
        /// <param name="arrivalTime">Assigned Type: ota2:LocalTime.</param>
        /// <param name="departurelTime">Assigned Type: ota2:LocalTime.</param>
        /// <param name="arrivalTerminal">Assigned Type: c-1100:StringAlphaNumeric.</param>
        /// <param name="departureTerminal">Assigned Type: c-1100:StringAlphaNumeric.</param>
        public IntermediateStop(string value = default(string), string arrivalFlightDuration = default(string), string departureFlightDuration = default(string), string duration = default(string), string equipment = default(string), string arrivalDate = default(string), string departureDate = default(string), string arrivalTime = default(string), string departurelTime = default(string), string arrivalTerminal = default(string), string departureTerminal = default(string))
        {
            this.Value = value;
            this.ArrivalFlightDuration = arrivalFlightDuration;
            this.DepartureFlightDuration = departureFlightDuration;
            this.Duration = duration;
            this.Equipment = equipment;
            this.ArrivalDate = arrivalDate;
            this.DepartureDate = departureDate;
            this.ArrivalTime = arrivalTime;
            this.DeparturelTime = departurelTime;
            this.ArrivalTerminal = arrivalTerminal;
            this.DepartureTerminal = departureTerminal;
        }
        
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets ArrivalFlightDuration
        /// </summary>
        [DataMember(Name="arrivalFlightDuration", EmitDefaultValue=false)]
        public string ArrivalFlightDuration { get; set; }

        /// <summary>
        /// Gets or Sets DepartureFlightDuration
        /// </summary>
        [DataMember(Name="departureFlightDuration", EmitDefaultValue=false)]
        public string DepartureFlightDuration { get; set; }

        /// <summary>
        /// Duration stopped at this location
        /// </summary>
        /// <value>Duration stopped at this location</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public string Duration { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:AirEquipCodeIATA
        /// </summary>
        /// <value>Assigned Type: c-1100:AirEquipCodeIATA</value>
        [DataMember(Name="equipment", EmitDefaultValue=false)]
        public string Equipment { get; set; }

        /// <summary>
        /// Assigned Type: ota2:LocalDate
        /// </summary>
        /// <value>Assigned Type: ota2:LocalDate</value>
        [DataMember(Name="arrivalDate", EmitDefaultValue=false)]
        public string ArrivalDate { get; set; }

        /// <summary>
        /// Assigned Type: ota2:LocalDate
        /// </summary>
        /// <value>Assigned Type: ota2:LocalDate</value>
        [DataMember(Name="departureDate", EmitDefaultValue=false)]
        public string DepartureDate { get; set; }

        /// <summary>
        /// Assigned Type: ota2:LocalTime
        /// </summary>
        /// <value>Assigned Type: ota2:LocalTime</value>
        [DataMember(Name="arrivalTime", EmitDefaultValue=false)]
        public string ArrivalTime { get; set; }

        /// <summary>
        /// Assigned Type: ota2:LocalTime
        /// </summary>
        /// <value>Assigned Type: ota2:LocalTime</value>
        [DataMember(Name="departurelTime", EmitDefaultValue=false)]
        public string DeparturelTime { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:StringAlphaNumeric
        /// </summary>
        /// <value>Assigned Type: c-1100:StringAlphaNumeric</value>
        [DataMember(Name="arrivalTerminal", EmitDefaultValue=false)]
        public string ArrivalTerminal { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:StringAlphaNumeric
        /// </summary>
        /// <value>Assigned Type: c-1100:StringAlphaNumeric</value>
        [DataMember(Name="departureTerminal", EmitDefaultValue=false)]
        public string DepartureTerminal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IntermediateStop {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ArrivalFlightDuration: ").Append(ArrivalFlightDuration).Append("\n");
            sb.Append("  DepartureFlightDuration: ").Append(DepartureFlightDuration).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Equipment: ").Append(Equipment).Append("\n");
            sb.Append("  ArrivalDate: ").Append(ArrivalDate).Append("\n");
            sb.Append("  DepartureDate: ").Append(DepartureDate).Append("\n");
            sb.Append("  ArrivalTime: ").Append(ArrivalTime).Append("\n");
            sb.Append("  DeparturelTime: ").Append(DeparturelTime).Append("\n");
            sb.Append("  ArrivalTerminal: ").Append(ArrivalTerminal).Append("\n");
            sb.Append("  DepartureTerminal: ").Append(DepartureTerminal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IntermediateStop);
        }

        /// <summary>
        /// Returns true if IntermediateStop instances are equal
        /// </summary>
        /// <param name="input">Instance of IntermediateStop to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IntermediateStop input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.ArrivalFlightDuration == input.ArrivalFlightDuration ||
                    (this.ArrivalFlightDuration != null &&
                    this.ArrivalFlightDuration.Equals(input.ArrivalFlightDuration))
                ) && 
                (
                    this.DepartureFlightDuration == input.DepartureFlightDuration ||
                    (this.DepartureFlightDuration != null &&
                    this.DepartureFlightDuration.Equals(input.DepartureFlightDuration))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.Equipment == input.Equipment ||
                    (this.Equipment != null &&
                    this.Equipment.Equals(input.Equipment))
                ) && 
                (
                    this.ArrivalDate == input.ArrivalDate ||
                    (this.ArrivalDate != null &&
                    this.ArrivalDate.Equals(input.ArrivalDate))
                ) && 
                (
                    this.DepartureDate == input.DepartureDate ||
                    (this.DepartureDate != null &&
                    this.DepartureDate.Equals(input.DepartureDate))
                ) && 
                (
                    this.ArrivalTime == input.ArrivalTime ||
                    (this.ArrivalTime != null &&
                    this.ArrivalTime.Equals(input.ArrivalTime))
                ) && 
                (
                    this.DeparturelTime == input.DeparturelTime ||
                    (this.DeparturelTime != null &&
                    this.DeparturelTime.Equals(input.DeparturelTime))
                ) && 
                (
                    this.ArrivalTerminal == input.ArrivalTerminal ||
                    (this.ArrivalTerminal != null &&
                    this.ArrivalTerminal.Equals(input.ArrivalTerminal))
                ) && 
                (
                    this.DepartureTerminal == input.DepartureTerminal ||
                    (this.DepartureTerminal != null &&
                    this.DepartureTerminal.Equals(input.DepartureTerminal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.ArrivalFlightDuration != null)
                    hashCode = hashCode * 59 + this.ArrivalFlightDuration.GetHashCode();
                if (this.DepartureFlightDuration != null)
                    hashCode = hashCode * 59 + this.DepartureFlightDuration.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.Equipment != null)
                    hashCode = hashCode * 59 + this.Equipment.GetHashCode();
                if (this.ArrivalDate != null)
                    hashCode = hashCode * 59 + this.ArrivalDate.GetHashCode();
                if (this.DepartureDate != null)
                    hashCode = hashCode * 59 + this.DepartureDate.GetHashCode();
                if (this.ArrivalTime != null)
                    hashCode = hashCode * 59 + this.ArrivalTime.GetHashCode();
                if (this.DeparturelTime != null)
                    hashCode = hashCode * 59 + this.DeparturelTime.GetHashCode();
                if (this.ArrivalTerminal != null)
                    hashCode = hashCode * 59 + this.ArrivalTerminal.GetHashCode();
                if (this.DepartureTerminal != null)
                    hashCode = hashCode * 59 + this.DepartureTerminal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if(this.Value != null && this.Value.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 3.", new [] { "Value" });
            }

            // Value (string) minLength
            if(this.Value != null && this.Value.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be greater than 3.", new [] { "Value" });
            }

            // Value (string) pattern
            Regex regexValue = new Regex(@"([a-zA-Z]{3})", RegexOptions.CultureInvariant);
            if (false == regexValue.Match(this.Value).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, must match a pattern of " + regexValue, new [] { "Value" });
            }

            // Equipment (string) pattern
            Regex regexEquipment = new Regex(@"([A-Z0-9]{3})?", RegexOptions.CultureInvariant);
            if (false == regexEquipment.Match(this.Equipment).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Equipment, must match a pattern of " + regexEquipment, new [] { "Equipment" });
            }

            // ArrivalDate (string) pattern
            Regex regexArrivalDate = new Regex(@"(\\d{4}-\\d{2}-\\d{2})", RegexOptions.CultureInvariant);
            if (false == regexArrivalDate.Match(this.ArrivalDate).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ArrivalDate, must match a pattern of " + regexArrivalDate, new [] { "ArrivalDate" });
            }

            // DepartureDate (string) pattern
            Regex regexDepartureDate = new Regex(@"(\\d{4}-\\d{2}-\\d{2})", RegexOptions.CultureInvariant);
            if (false == regexDepartureDate.Match(this.DepartureDate).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DepartureDate, must match a pattern of " + regexDepartureDate, new [] { "DepartureDate" });
            }

            // ArrivalTime (string) pattern
            Regex regexArrivalTime = new Regex(@"(([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)((:?)[0-5]\\d)?([\\.,]\\d+(?!:))?", RegexOptions.CultureInvariant);
            if (false == regexArrivalTime.Match(this.ArrivalTime).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ArrivalTime, must match a pattern of " + regexArrivalTime, new [] { "ArrivalTime" });
            }

            // DeparturelTime (string) pattern
            Regex regexDeparturelTime = new Regex(@"(([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)((:?)[0-5]\\d)?([\\.,]\\d+(?!:))?", RegexOptions.CultureInvariant);
            if (false == regexDeparturelTime.Match(this.DeparturelTime).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeparturelTime, must match a pattern of " + regexDeparturelTime, new [] { "DeparturelTime" });
            }

            // ArrivalTerminal (string) maxLength
            if(this.ArrivalTerminal != null && this.ArrivalTerminal.Length > 4096)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ArrivalTerminal, length must be less than 4096.", new [] { "ArrivalTerminal" });
            }

            // ArrivalTerminal (string) pattern
            Regex regexArrivalTerminal = new Regex(@"([0-9a-zA-Z]+)?", RegexOptions.CultureInvariant);
            if (false == regexArrivalTerminal.Match(this.ArrivalTerminal).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ArrivalTerminal, must match a pattern of " + regexArrivalTerminal, new [] { "ArrivalTerminal" });
            }

            // DepartureTerminal (string) maxLength
            if(this.DepartureTerminal != null && this.DepartureTerminal.Length > 4096)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DepartureTerminal, length must be less than 4096.", new [] { "DepartureTerminal" });
            }

            // DepartureTerminal (string) pattern
            Regex regexDepartureTerminal = new Regex(@"([0-9a-zA-Z]+)?", RegexOptions.CultureInvariant);
            if (false == regexDepartureTerminal.Match(this.DepartureTerminal).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DepartureTerminal, must match a pattern of " + regexDepartureTerminal, new [] { "DepartureTerminal" });
            }

            yield break;
        }
    }

}
