/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CatalogProductOfferings
    /// </summary>
    [DataContract]
    public partial class CatalogProductOfferings : CatalogProductOfferingsID,  IEquatable<CatalogProductOfferings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogProductOfferings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogProductOfferings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogProductOfferings" /> class.
        /// </summary>
        /// <param name="catalogProductOffering">catalogProductOffering.</param>
        /// <param name="upsellOffering">upsellOffering.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public CatalogProductOfferings(List<CatalogProductOfferingID> catalogProductOffering = default(List<CatalogProductOfferingID>), List<UpsellOfferingID> upsellOffering = default(List<UpsellOfferingID>), Object extensionPoint = default(Object), string type = "CatalogProductOfferings", string id = default(string), Identifier identifier = default(Identifier)) : base(type, id, identifier)
        {
            this.CatalogProductOffering = catalogProductOffering;
            this.UpsellOffering = upsellOffering;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets CatalogProductOffering
        /// </summary>
        [DataMember(Name="CatalogProductOffering", EmitDefaultValue=false)]
        public List<CatalogProductOfferingID> CatalogProductOffering { get; set; }

        /// <summary>
        /// Gets or Sets UpsellOffering
        /// </summary>
        [DataMember(Name="UpsellOffering", EmitDefaultValue=false)]
        public List<UpsellOfferingID> UpsellOffering { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogProductOfferings {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  CatalogProductOffering: ").Append(CatalogProductOffering).Append("\n");
            sb.Append("  UpsellOffering: ").Append(UpsellOffering).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CatalogProductOfferings);
        }

        /// <summary>
        /// Returns true if CatalogProductOfferings instances are equal
        /// </summary>
        /// <param name="input">Instance of CatalogProductOfferings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogProductOfferings input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.CatalogProductOffering == input.CatalogProductOffering ||
                    this.CatalogProductOffering != null &&
                    this.CatalogProductOffering.SequenceEqual(input.CatalogProductOffering)
                ) && base.Equals(input) && 
                (
                    this.UpsellOffering == input.UpsellOffering ||
                    this.UpsellOffering != null &&
                    this.UpsellOffering.SequenceEqual(input.UpsellOffering)
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.CatalogProductOffering != null)
                    hashCode = hashCode * 59 + this.CatalogProductOffering.GetHashCode();
                if (this.UpsellOffering != null)
                    hashCode = hashCode * 59 + this.UpsellOffering.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
