/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AdvanceReservationRequired
    /// </summary>
    [DataContract]
    public partial class AdvanceReservationRequired : AdvanceReservation,  IEquatable<AdvanceReservationRequired>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdvanceReservationRequired" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AdvanceReservationRequired() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdvanceReservationRequired" /> class.
        /// </summary>
        /// <param name="instantPurchase">instantPurchase (required).</param>
        /// <param name="standby">standby (required).</param>
        /// <param name="waiverDate">Assigned Type: ota2:LocalDate.</param>
        /// <param name="reservationTravelSegmentIndicatorATPCO">The ATPCO travel segment geographic indicator. Example \\\&quot;55\\\&quot; &#x3D; 1st segment over the water.</param>
        /// <param name="confirmedStatus">confirmedStatus.</param>
        /// <param name="waitlistStandbyCondition">waitlistStandbyCondition.</param>
        /// <param name="firstReservation">Assigned Type: ctar-1100:FirstReservation (required).</param>
        /// <param name="lastReservation">Assigned Type: ctar-1100:LastReservation (required).</param>
        /// <param name="extensionPointChoice">extensionPointChoice.</param>
        public AdvanceReservationRequired(YesNoUnknownEnum instantPurchase = default(YesNoUnknownEnum), YesNoUnknownEnum standby = default(YesNoUnknownEnum), string waiverDate = default(string), int? reservationTravelSegmentIndicatorATPCO = default(int?), List<ConfirmedStatusEnum> confirmedStatus = default(List<ConfirmedStatusEnum>), List<WaitlistStandbyConditionEnum> waitlistStandbyCondition = default(List<WaitlistStandbyConditionEnum>), FirstReservation firstReservation = default(FirstReservation), LastReservation lastReservation = default(LastReservation), ExtensionPointChoice extensionPointChoice = default(ExtensionPointChoice), string type = "AdvanceReservationRequired", Object extensionPoint = default(Object)) : base(type, extensionPoint)
        {
            // to ensure "instantPurchase" is required (not null)
            if (instantPurchase == null)
            {
                throw new InvalidDataException("instantPurchase is a required property for AdvanceReservationRequired and cannot be null");
            }
            else
            {
                this.InstantPurchase = instantPurchase;
            }
            // to ensure "standby" is required (not null)
            if (standby == null)
            {
                throw new InvalidDataException("standby is a required property for AdvanceReservationRequired and cannot be null");
            }
            else
            {
                this.Standby = standby;
            }
            // to ensure "firstReservation" is required (not null)
            if (firstReservation == null)
            {
                throw new InvalidDataException("firstReservation is a required property for AdvanceReservationRequired and cannot be null");
            }
            else
            {
                this.FirstReservation = firstReservation;
            }
            // to ensure "lastReservation" is required (not null)
            if (lastReservation == null)
            {
                throw new InvalidDataException("lastReservation is a required property for AdvanceReservationRequired and cannot be null");
            }
            else
            {
                this.LastReservation = lastReservation;
            }
            this.WaiverDate = waiverDate;
            this.ReservationTravelSegmentIndicatorATPCO = reservationTravelSegmentIndicatorATPCO;
            this.ConfirmedStatus = confirmedStatus;
            this.WaitlistStandbyCondition = waitlistStandbyCondition;
            this.ExtensionPointChoice = extensionPointChoice;
        }
        
        /// <summary>
        /// Gets or Sets InstantPurchase
        /// </summary>
        [DataMember(Name="instantPurchase", EmitDefaultValue=false)]
        public YesNoUnknownEnum InstantPurchase { get; set; }

        /// <summary>
        /// Gets or Sets Standby
        /// </summary>
        [DataMember(Name="standby", EmitDefaultValue=false)]
        public YesNoUnknownEnum Standby { get; set; }

        /// <summary>
        /// Assigned Type: ota2:LocalDate
        /// </summary>
        /// <value>Assigned Type: ota2:LocalDate</value>
        [DataMember(Name="waiverDate", EmitDefaultValue=false)]
        public string WaiverDate { get; set; }

        /// <summary>
        /// The ATPCO travel segment geographic indicator. Example \\\&quot;55\\\&quot; &#x3D; 1st segment over the water
        /// </summary>
        /// <value>The ATPCO travel segment geographic indicator. Example \\\&quot;55\\\&quot; &#x3D; 1st segment over the water</value>
        [DataMember(Name="ReservationTravelSegmentIndicatorATPCO", EmitDefaultValue=false)]
        public int? ReservationTravelSegmentIndicatorATPCO { get; set; }

        /// <summary>
        /// Gets or Sets ConfirmedStatus
        /// </summary>
        [DataMember(Name="ConfirmedStatus", EmitDefaultValue=false)]
        public List<ConfirmedStatusEnum> ConfirmedStatus { get; set; }

        /// <summary>
        /// Gets or Sets WaitlistStandbyCondition
        /// </summary>
        [DataMember(Name="WaitlistStandbyCondition", EmitDefaultValue=false)]
        public List<WaitlistStandbyConditionEnum> WaitlistStandbyCondition { get; set; }

        /// <summary>
        /// Assigned Type: ctar-1100:FirstReservation
        /// </summary>
        /// <value>Assigned Type: ctar-1100:FirstReservation</value>
        [DataMember(Name="FirstReservation", EmitDefaultValue=false)]
        public FirstReservation FirstReservation { get; set; }

        /// <summary>
        /// Assigned Type: ctar-1100:LastReservation
        /// </summary>
        /// <value>Assigned Type: ctar-1100:LastReservation</value>
        [DataMember(Name="LastReservation", EmitDefaultValue=false)]
        public LastReservation LastReservation { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPointChoice
        /// </summary>
        [DataMember(Name="ExtensionPoint_Choice", EmitDefaultValue=false)]
        public ExtensionPointChoice ExtensionPointChoice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdvanceReservationRequired {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  InstantPurchase: ").Append(InstantPurchase).Append("\n");
            sb.Append("  Standby: ").Append(Standby).Append("\n");
            sb.Append("  WaiverDate: ").Append(WaiverDate).Append("\n");
            sb.Append("  ReservationTravelSegmentIndicatorATPCO: ").Append(ReservationTravelSegmentIndicatorATPCO).Append("\n");
            sb.Append("  ConfirmedStatus: ").Append(ConfirmedStatus).Append("\n");
            sb.Append("  WaitlistStandbyCondition: ").Append(WaitlistStandbyCondition).Append("\n");
            sb.Append("  FirstReservation: ").Append(FirstReservation).Append("\n");
            sb.Append("  LastReservation: ").Append(LastReservation).Append("\n");
            sb.Append("  ExtensionPointChoice: ").Append(ExtensionPointChoice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdvanceReservationRequired);
        }

        /// <summary>
        /// Returns true if AdvanceReservationRequired instances are equal
        /// </summary>
        /// <param name="input">Instance of AdvanceReservationRequired to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdvanceReservationRequired input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.InstantPurchase == input.InstantPurchase ||
                    (this.InstantPurchase != null &&
                    this.InstantPurchase.Equals(input.InstantPurchase))
                ) && base.Equals(input) && 
                (
                    this.Standby == input.Standby ||
                    (this.Standby != null &&
                    this.Standby.Equals(input.Standby))
                ) && base.Equals(input) && 
                (
                    this.WaiverDate == input.WaiverDate ||
                    (this.WaiverDate != null &&
                    this.WaiverDate.Equals(input.WaiverDate))
                ) && base.Equals(input) && 
                (
                    this.ReservationTravelSegmentIndicatorATPCO == input.ReservationTravelSegmentIndicatorATPCO ||
                    (this.ReservationTravelSegmentIndicatorATPCO != null &&
                    this.ReservationTravelSegmentIndicatorATPCO.Equals(input.ReservationTravelSegmentIndicatorATPCO))
                ) && base.Equals(input) && 
                (
                    this.ConfirmedStatus == input.ConfirmedStatus ||
                    this.ConfirmedStatus != null &&
                    this.ConfirmedStatus.SequenceEqual(input.ConfirmedStatus)
                ) && base.Equals(input) && 
                (
                    this.WaitlistStandbyCondition == input.WaitlistStandbyCondition ||
                    this.WaitlistStandbyCondition != null &&
                    this.WaitlistStandbyCondition.SequenceEqual(input.WaitlistStandbyCondition)
                ) && base.Equals(input) && 
                (
                    this.FirstReservation == input.FirstReservation ||
                    (this.FirstReservation != null &&
                    this.FirstReservation.Equals(input.FirstReservation))
                ) && base.Equals(input) && 
                (
                    this.LastReservation == input.LastReservation ||
                    (this.LastReservation != null &&
                    this.LastReservation.Equals(input.LastReservation))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointChoice == input.ExtensionPointChoice ||
                    (this.ExtensionPointChoice != null &&
                    this.ExtensionPointChoice.Equals(input.ExtensionPointChoice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.InstantPurchase != null)
                    hashCode = hashCode * 59 + this.InstantPurchase.GetHashCode();
                if (this.Standby != null)
                    hashCode = hashCode * 59 + this.Standby.GetHashCode();
                if (this.WaiverDate != null)
                    hashCode = hashCode * 59 + this.WaiverDate.GetHashCode();
                if (this.ReservationTravelSegmentIndicatorATPCO != null)
                    hashCode = hashCode * 59 + this.ReservationTravelSegmentIndicatorATPCO.GetHashCode();
                if (this.ConfirmedStatus != null)
                    hashCode = hashCode * 59 + this.ConfirmedStatus.GetHashCode();
                if (this.WaitlistStandbyCondition != null)
                    hashCode = hashCode * 59 + this.WaitlistStandbyCondition.GetHashCode();
                if (this.FirstReservation != null)
                    hashCode = hashCode * 59 + this.FirstReservation.GetHashCode();
                if (this.LastReservation != null)
                    hashCode = hashCode * 59 + this.LastReservation.GetHashCode();
                if (this.ExtensionPointChoice != null)
                    hashCode = hashCode * 59 + this.ExtensionPointChoice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // WaiverDate (string) pattern
            Regex regexWaiverDate = new Regex(@"(\\d{4}-\\d{2}-\\d{2})", RegexOptions.CultureInvariant);
            if (false == regexWaiverDate.Match(this.WaiverDate).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WaiverDate, must match a pattern of " + regexWaiverDate, new [] { "WaiverDate" });
            }

            // ReservationTravelSegmentIndicatorATPCO (int?) minimum
            if(this.ReservationTravelSegmentIndicatorATPCO < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReservationTravelSegmentIndicatorATPCO, must be a value greater than or equal to 0.", new [] { "ReservationTravelSegmentIndicatorATPCO" });
            }

            yield break;
        }
    }

}
