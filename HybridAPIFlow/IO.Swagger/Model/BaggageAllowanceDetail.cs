/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BaggageAllowanceDetail
    /// </summary>
    [DataContract]
    public partial class BaggageAllowanceDetail : BaggageAllowance,  IEquatable<BaggageAllowanceDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BaggageAllowanceDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BaggageAllowanceDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BaggageAllowanceDetail" /> class.
        /// </summary>
        /// <param name="url">Url for the airline&#39;s baggage information web site.</param>
        /// <param name="extensionPointDetail">extensionPointDetail.</param>
        public BaggageAllowanceDetail(string url = default(string), ExtensionPointDetail extensionPointDetail = default(ExtensionPointDetail), string type = "BaggageAllowanceDetail", List<string> passengerTypeCodes = default(List<string>), BaggageTypeEnum? baggageType = default(BaggageTypeEnum?), List<string> productRef = default(List<string>), List<BaggageItem> baggageItem = default(List<BaggageItem>), List<int?> segmentSequenceList = default(List<int?>), List<string> text = default(List<string>), Object extensionPoint = default(Object)) : base(type, passengerTypeCodes, baggageType, productRef, baggageItem, segmentSequenceList, text, extensionPoint)
        {
            this.Url = url;
            this.ExtensionPointDetail = extensionPointDetail;
        }
        
        /// <summary>
        /// Url for the airline&#39;s baggage information web site
        /// </summary>
        /// <value>Url for the airline&#39;s baggage information web site</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPointDetail
        /// </summary>
        [DataMember(Name="ExtensionPoint_Detail", EmitDefaultValue=false)]
        public ExtensionPointDetail ExtensionPointDetail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaggageAllowanceDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ExtensionPointDetail: ").Append(ExtensionPointDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BaggageAllowanceDetail);
        }

        /// <summary>
        /// Returns true if BaggageAllowanceDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of BaggageAllowanceDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaggageAllowanceDetail input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointDetail == input.ExtensionPointDetail ||
                    (this.ExtensionPointDetail != null &&
                    this.ExtensionPointDetail.Equals(input.ExtensionPointDetail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.ExtensionPointDetail != null)
                    hashCode = hashCode * 59 + this.ExtensionPointDetail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
