/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FareSelectionDetail
    /// </summary>
    [DataContract]
    public partial class FareSelectionDetail : FareSelection,  IEquatable<FareSelectionDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FareSelectionDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FareSelectionDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FareSelectionDetail" /> class.
        /// </summary>
        /// <param name="validatingCarrier">Assigned Type: c-1100:AirlineCode (required).</param>
        /// <param name="prohibitMinStayFaresInd">If present and true, fares with minimum stays will not be returned.</param>
        /// <param name="prohibitMaxStayFaresInd">If present and true, fares with maximum stays will not be returned.</param>
        /// <param name="refundableOnlyInd">If present and true, only refundable fares will be returned.</param>
        /// <param name="prohibitAdvancePurchaseFaresInd">If present and true, fares with advance purchase requirements will not be returned.</param>
        /// <param name="prohibitUnbundledFaresInd">prohibitUnbundledFaresInd.</param>
        /// <param name="prohibitRefundableFaresInd">Allows user to prohibit refundable fares from being offered.</param>
        /// <param name="extensionPointDetail">extensionPointDetail.</param>
        public FareSelectionDetail(string validatingCarrier = default(string), bool? prohibitMinStayFaresInd = default(bool?), bool? prohibitMaxStayFaresInd = default(bool?), bool? refundableOnlyInd = default(bool?), bool? prohibitAdvancePurchaseFaresInd = default(bool?), bool? prohibitUnbundledFaresInd = default(bool?), bool? prohibitRefundableFaresInd = default(bool?), ExtensionPointDetail extensionPointDetail = default(ExtensionPointDetail), string type = "FareSelectionDetail", FaresFilterEnum? fareType = default(FaresFilterEnum?), Object extensionPoint = default(Object)) : base(type, fareType, extensionPoint)
        {
            // to ensure "validatingCarrier" is required (not null)
            if (validatingCarrier == null)
            {
                throw new InvalidDataException("validatingCarrier is a required property for FareSelectionDetail and cannot be null");
            }
            else
            {
                this.ValidatingCarrier = validatingCarrier;
            }
            this.ProhibitMinStayFaresInd = prohibitMinStayFaresInd;
            this.ProhibitMaxStayFaresInd = prohibitMaxStayFaresInd;
            this.RefundableOnlyInd = refundableOnlyInd;
            this.ProhibitAdvancePurchaseFaresInd = prohibitAdvancePurchaseFaresInd;
            this.ProhibitUnbundledFaresInd = prohibitUnbundledFaresInd;
            this.ProhibitRefundableFaresInd = prohibitRefundableFaresInd;
            this.ExtensionPointDetail = extensionPointDetail;
        }
        
        /// <summary>
        /// Assigned Type: c-1100:AirlineCode
        /// </summary>
        /// <value>Assigned Type: c-1100:AirlineCode</value>
        [DataMember(Name="validatingCarrier", EmitDefaultValue=false)]
        public string ValidatingCarrier { get; set; }

        /// <summary>
        /// If present and true, fares with minimum stays will not be returned
        /// </summary>
        /// <value>If present and true, fares with minimum stays will not be returned</value>
        [DataMember(Name="prohibitMinStayFaresInd", EmitDefaultValue=false)]
        public bool? ProhibitMinStayFaresInd { get; set; }

        /// <summary>
        /// If present and true, fares with maximum stays will not be returned
        /// </summary>
        /// <value>If present and true, fares with maximum stays will not be returned</value>
        [DataMember(Name="prohibitMaxStayFaresInd", EmitDefaultValue=false)]
        public bool? ProhibitMaxStayFaresInd { get; set; }

        /// <summary>
        /// If present and true, only refundable fares will be returned
        /// </summary>
        /// <value>If present and true, only refundable fares will be returned</value>
        [DataMember(Name="refundableOnlyInd", EmitDefaultValue=false)]
        public bool? RefundableOnlyInd { get; set; }

        /// <summary>
        /// If present and true, fares with advance purchase requirements will not be returned
        /// </summary>
        /// <value>If present and true, fares with advance purchase requirements will not be returned</value>
        [DataMember(Name="prohibitAdvancePurchaseFaresInd", EmitDefaultValue=false)]
        public bool? ProhibitAdvancePurchaseFaresInd { get; set; }

        /// <summary>
        /// Gets or Sets ProhibitUnbundledFaresInd
        /// </summary>
        [DataMember(Name="prohibitUnbundledFaresInd", EmitDefaultValue=false)]
        public bool? ProhibitUnbundledFaresInd { get; set; }

        /// <summary>
        /// Allows user to prohibit refundable fares from being offered
        /// </summary>
        /// <value>Allows user to prohibit refundable fares from being offered</value>
        [DataMember(Name="prohibitRefundableFaresInd", EmitDefaultValue=false)]
        public bool? ProhibitRefundableFaresInd { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPointDetail
        /// </summary>
        [DataMember(Name="ExtensionPoint_Detail", EmitDefaultValue=false)]
        public ExtensionPointDetail ExtensionPointDetail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FareSelectionDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ValidatingCarrier: ").Append(ValidatingCarrier).Append("\n");
            sb.Append("  ProhibitMinStayFaresInd: ").Append(ProhibitMinStayFaresInd).Append("\n");
            sb.Append("  ProhibitMaxStayFaresInd: ").Append(ProhibitMaxStayFaresInd).Append("\n");
            sb.Append("  RefundableOnlyInd: ").Append(RefundableOnlyInd).Append("\n");
            sb.Append("  ProhibitAdvancePurchaseFaresInd: ").Append(ProhibitAdvancePurchaseFaresInd).Append("\n");
            sb.Append("  ProhibitUnbundledFaresInd: ").Append(ProhibitUnbundledFaresInd).Append("\n");
            sb.Append("  ProhibitRefundableFaresInd: ").Append(ProhibitRefundableFaresInd).Append("\n");
            sb.Append("  ExtensionPointDetail: ").Append(ExtensionPointDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FareSelectionDetail);
        }

        /// <summary>
        /// Returns true if FareSelectionDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of FareSelectionDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FareSelectionDetail input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.ValidatingCarrier == input.ValidatingCarrier ||
                    (this.ValidatingCarrier != null &&
                    this.ValidatingCarrier.Equals(input.ValidatingCarrier))
                ) && base.Equals(input) && 
                (
                    this.ProhibitMinStayFaresInd == input.ProhibitMinStayFaresInd ||
                    (this.ProhibitMinStayFaresInd != null &&
                    this.ProhibitMinStayFaresInd.Equals(input.ProhibitMinStayFaresInd))
                ) && base.Equals(input) && 
                (
                    this.ProhibitMaxStayFaresInd == input.ProhibitMaxStayFaresInd ||
                    (this.ProhibitMaxStayFaresInd != null &&
                    this.ProhibitMaxStayFaresInd.Equals(input.ProhibitMaxStayFaresInd))
                ) && base.Equals(input) && 
                (
                    this.RefundableOnlyInd == input.RefundableOnlyInd ||
                    (this.RefundableOnlyInd != null &&
                    this.RefundableOnlyInd.Equals(input.RefundableOnlyInd))
                ) && base.Equals(input) && 
                (
                    this.ProhibitAdvancePurchaseFaresInd == input.ProhibitAdvancePurchaseFaresInd ||
                    (this.ProhibitAdvancePurchaseFaresInd != null &&
                    this.ProhibitAdvancePurchaseFaresInd.Equals(input.ProhibitAdvancePurchaseFaresInd))
                ) && base.Equals(input) && 
                (
                    this.ProhibitUnbundledFaresInd == input.ProhibitUnbundledFaresInd ||
                    (this.ProhibitUnbundledFaresInd != null &&
                    this.ProhibitUnbundledFaresInd.Equals(input.ProhibitUnbundledFaresInd))
                ) && base.Equals(input) && 
                (
                    this.ProhibitRefundableFaresInd == input.ProhibitRefundableFaresInd ||
                    (this.ProhibitRefundableFaresInd != null &&
                    this.ProhibitRefundableFaresInd.Equals(input.ProhibitRefundableFaresInd))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointDetail == input.ExtensionPointDetail ||
                    (this.ExtensionPointDetail != null &&
                    this.ExtensionPointDetail.Equals(input.ExtensionPointDetail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ValidatingCarrier != null)
                    hashCode = hashCode * 59 + this.ValidatingCarrier.GetHashCode();
                if (this.ProhibitMinStayFaresInd != null)
                    hashCode = hashCode * 59 + this.ProhibitMinStayFaresInd.GetHashCode();
                if (this.ProhibitMaxStayFaresInd != null)
                    hashCode = hashCode * 59 + this.ProhibitMaxStayFaresInd.GetHashCode();
                if (this.RefundableOnlyInd != null)
                    hashCode = hashCode * 59 + this.RefundableOnlyInd.GetHashCode();
                if (this.ProhibitAdvancePurchaseFaresInd != null)
                    hashCode = hashCode * 59 + this.ProhibitAdvancePurchaseFaresInd.GetHashCode();
                if (this.ProhibitUnbundledFaresInd != null)
                    hashCode = hashCode * 59 + this.ProhibitUnbundledFaresInd.GetHashCode();
                if (this.ProhibitRefundableFaresInd != null)
                    hashCode = hashCode * 59 + this.ProhibitRefundableFaresInd.GetHashCode();
                if (this.ExtensionPointDetail != null)
                    hashCode = hashCode * 59 + this.ExtensionPointDetail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // ValidatingCarrier (string) pattern
            Regex regexValidatingCarrier = new Regex(@"([a-zA-Z0-9]{2,3})", RegexOptions.CultureInvariant);
            if (false == regexValidatingCarrier.Match(this.ValidatingCarrier).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ValidatingCarrier, must match a pattern of " + regexValidatingCarrier, new [] { "ValidatingCarrier" });
            }

            yield break;
        }
    }

}
