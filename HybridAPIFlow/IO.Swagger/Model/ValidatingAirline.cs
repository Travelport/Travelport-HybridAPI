/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ValidatingAirline
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class ValidatingAirline :  IEquatable<ValidatingAirline>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidatingAirline" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ValidatingAirline() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidatingAirline" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="segmentSequenceList">The segmentSequenceList the validatingCarrier applies to.</param>
        /// <param name="validatingAirline">Represents the airline responsible for ticketing/fulfillment of this Offer (required).</param>
        /// <param name="productRef">The productRef the validatingCarrier applies to.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public ValidatingAirline(string type = default(string), List<int?> segmentSequenceList = default(List<int?>), string validatingAirline = default(string), List<string> productRef = default(List<string>), Object extensionPoint = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ValidatingAirline and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "validatingAirline" is required (not null)
            if (validatingAirline == null)
            {
                throw new InvalidDataException("validatingAirline is a required property for ValidatingAirline and cannot be null");
            }
            else
            {
                this._ValidatingAirline = validatingAirline;
            }
            this.SegmentSequenceList = segmentSequenceList;
            this.ProductRef = productRef;
            this.ExtensionPoint = extensionPoint;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The segmentSequenceList the validatingCarrier applies to
        /// </summary>
        /// <value>The segmentSequenceList the validatingCarrier applies to</value>
        [DataMember(Name="SegmentSequenceList", EmitDefaultValue=false)]
        public List<int?> SegmentSequenceList { get; set; }

        /// <summary>
        /// Represents the airline responsible for ticketing/fulfillment of this Offer
        /// </summary>
        /// <value>Represents the airline responsible for ticketing/fulfillment of this Offer</value>
        [DataMember(Name="ValidatingAirline", EmitDefaultValue=false)]
        public string _ValidatingAirline { get; set; }

        /// <summary>
        /// The productRef the validatingCarrier applies to
        /// </summary>
        /// <value>The productRef the validatingCarrier applies to</value>
        [DataMember(Name="ProductRef", EmitDefaultValue=false)]
        public List<string> ProductRef { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public Object ExtensionPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValidatingAirline {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SegmentSequenceList: ").Append(SegmentSequenceList).Append("\n");
            sb.Append("  _ValidatingAirline: ").Append(_ValidatingAirline).Append("\n");
            sb.Append("  ProductRef: ").Append(ProductRef).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValidatingAirline);
        }

        /// <summary>
        /// Returns true if ValidatingAirline instances are equal
        /// </summary>
        /// <param name="input">Instance of ValidatingAirline to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidatingAirline input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SegmentSequenceList == input.SegmentSequenceList ||
                    this.SegmentSequenceList != null &&
                    this.SegmentSequenceList.SequenceEqual(input.SegmentSequenceList)
                ) && 
                (
                    this._ValidatingAirline == input._ValidatingAirline ||
                    (this._ValidatingAirline != null &&
                    this._ValidatingAirline.Equals(input._ValidatingAirline))
                ) && 
                (
                    this.ProductRef == input.ProductRef ||
                    this.ProductRef != null &&
                    this.ProductRef.SequenceEqual(input.ProductRef)
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SegmentSequenceList != null)
                    hashCode = hashCode * 59 + this.SegmentSequenceList.GetHashCode();
                if (this._ValidatingAirline != null)
                    hashCode = hashCode * 59 + this._ValidatingAirline.GetHashCode();
                if (this.ProductRef != null)
                    hashCode = hashCode * 59 + this.ProductRef.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // _ValidatingAirline (string) pattern
            Regex regex_ValidatingAirline = new Regex(@"([a-zA-Z0-9]{2,3})", RegexOptions.CultureInvariant);
            if (false == regex_ValidatingAirline.Match(this._ValidatingAirline).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for _ValidatingAirline, must match a pattern of " + regex_ValidatingAirline, new [] { "_ValidatingAirline" });
            }

            yield break;
        }
    }

}
