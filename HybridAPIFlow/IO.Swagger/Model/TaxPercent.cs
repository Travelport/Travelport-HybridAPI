/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TaxPercent
    /// </summary>
    [DataContract]
    public partial class TaxPercent :  IEquatable<TaxPercent>, IValidatableObject
    {
        /// <summary>
        /// If the tax is included in the Base
        /// </summary>
        /// <value>If the tax is included in the Base</value>
        [DataMember(Name="includedInBase", EmitDefaultValue=false)]
        public YesNoUnknownEnum? IncludedInBase { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxPercent" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="taxCode">Assigned Type: c-1100:String.</param>
        /// <param name="reportingAuthority">Assigned Type: c-1100:String.</param>
        /// <param name="purpose">Assigned Type: c-1100:String.</param>
        /// <param name="description">Assigned Type: c-1100:StringLong.</param>
        /// <param name="includedInBase">If the tax is included in the Base.</param>
        public TaxPercent(float? value = default(float?), string taxCode = default(string), string reportingAuthority = default(string), string purpose = default(string), string description = default(string), YesNoUnknownEnum? includedInBase = default(YesNoUnknownEnum?))
        {
            this.Value = value;
            this.TaxCode = taxCode;
            this.ReportingAuthority = reportingAuthority;
            this.Purpose = purpose;
            this.Description = description;
            this.IncludedInBase = includedInBase;
        }
        
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public float? Value { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:String
        /// </summary>
        /// <value>Assigned Type: c-1100:String</value>
        [DataMember(Name="taxCode", EmitDefaultValue=false)]
        public string TaxCode { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:String
        /// </summary>
        /// <value>Assigned Type: c-1100:String</value>
        [DataMember(Name="reportingAuthority", EmitDefaultValue=false)]
        public string ReportingAuthority { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:String
        /// </summary>
        /// <value>Assigned Type: c-1100:String</value>
        [DataMember(Name="purpose", EmitDefaultValue=false)]
        public string Purpose { get; set; }

        /// <summary>
        /// Assigned Type: c-1100:StringLong
        /// </summary>
        /// <value>Assigned Type: c-1100:StringLong</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxPercent {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("  ReportingAuthority: ").Append(ReportingAuthority).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IncludedInBase: ").Append(IncludedInBase).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxPercent);
        }

        /// <summary>
        /// Returns true if TaxPercent instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxPercent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxPercent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.TaxCode == input.TaxCode ||
                    (this.TaxCode != null &&
                    this.TaxCode.Equals(input.TaxCode))
                ) && 
                (
                    this.ReportingAuthority == input.ReportingAuthority ||
                    (this.ReportingAuthority != null &&
                    this.ReportingAuthority.Equals(input.ReportingAuthority))
                ) && 
                (
                    this.Purpose == input.Purpose ||
                    (this.Purpose != null &&
                    this.Purpose.Equals(input.Purpose))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.IncludedInBase == input.IncludedInBase ||
                    (this.IncludedInBase != null &&
                    this.IncludedInBase.Equals(input.IncludedInBase))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.TaxCode != null)
                    hashCode = hashCode * 59 + this.TaxCode.GetHashCode();
                if (this.ReportingAuthority != null)
                    hashCode = hashCode * 59 + this.ReportingAuthority.GetHashCode();
                if (this.Purpose != null)
                    hashCode = hashCode * 59 + this.Purpose.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.IncludedInBase != null)
                    hashCode = hashCode * 59 + this.IncludedInBase.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (float?) minimum
            if(this.Value < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, must be a value greater than or equal to 0.", new [] { "Value" });
            }

            // TaxCode (string) maxLength
            if(this.TaxCode != null && this.TaxCode.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaxCode, length must be less than 512.", new [] { "TaxCode" });
            }

            // ReportingAuthority (string) maxLength
            if(this.ReportingAuthority != null && this.ReportingAuthority.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReportingAuthority, length must be less than 512.", new [] { "ReportingAuthority" });
            }

            // Purpose (string) maxLength
            if(this.Purpose != null && this.Purpose.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Purpose, length must be less than 512.", new [] { "Purpose" });
            }

            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 4096)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 4096.", new [] { "Description" });
            }

            yield break;
        }
    }

}
