/* 
 * CatalogProductOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AdvancePaymentRequired
    /// </summary>
    [DataContract]
    public partial class AdvancePaymentRequired : AdvancePayment,  IEquatable<AdvancePaymentRequired>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdvancePaymentRequired" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AdvancePaymentRequired() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdvancePaymentRequired" /> class.
        /// </summary>
        /// <param name="waverDate">Assigned Type: ota2:LocalDate.</param>
        /// <param name="paymentAfterReservation">Assigned Type: ctar-1100:PaymentAfterReservation (required).</param>
        /// <param name="paymentBeforeDeparture">Assigned Type: ctar-1100:PaymentBeforeDeparture (required).</param>
        /// <param name="paymentTravelSegmentIndicatorATPCO">The ATPCO paymentgeographic indicator. Example \\\&quot;55\\\&quot; &#x3D; 1st segment over the water between area 2 and 3.</param>
        /// <param name="instantPaymentInd">if true, the Offer must be paid at the same time as the reservation is created.</param>
        /// <param name="ealierAppliesInd">If true, the earlier of the payment restrictions apply.</param>
        /// <param name="laterAppliesInd">If true, the later of the payment restrictions apply.</param>
        /// <param name="extensionPointChoice">extensionPointChoice.</param>
        public AdvancePaymentRequired(string waverDate = default(string), PaymentAfterReservation paymentAfterReservation = default(PaymentAfterReservation), PaymentBeforeDeparture paymentBeforeDeparture = default(PaymentBeforeDeparture), int? paymentTravelSegmentIndicatorATPCO = default(int?), bool? instantPaymentInd = default(bool?), bool? ealierAppliesInd = default(bool?), bool? laterAppliesInd = default(bool?), ExtensionPointChoice extensionPointChoice = default(ExtensionPointChoice), string type = "AdvancePaymentRequired", Object extensionPoint = default(Object)) : base(type, extensionPoint)
        {
            // to ensure "paymentAfterReservation" is required (not null)
            if (paymentAfterReservation == null)
            {
                throw new InvalidDataException("paymentAfterReservation is a required property for AdvancePaymentRequired and cannot be null");
            }
            else
            {
                this.PaymentAfterReservation = paymentAfterReservation;
            }
            // to ensure "paymentBeforeDeparture" is required (not null)
            if (paymentBeforeDeparture == null)
            {
                throw new InvalidDataException("paymentBeforeDeparture is a required property for AdvancePaymentRequired and cannot be null");
            }
            else
            {
                this.PaymentBeforeDeparture = paymentBeforeDeparture;
            }
            this.WaverDate = waverDate;
            this.PaymentTravelSegmentIndicatorATPCO = paymentTravelSegmentIndicatorATPCO;
            this.InstantPaymentInd = instantPaymentInd;
            this.EalierAppliesInd = ealierAppliesInd;
            this.LaterAppliesInd = laterAppliesInd;
            this.ExtensionPointChoice = extensionPointChoice;
        }
        
        /// <summary>
        /// Assigned Type: ota2:LocalDate
        /// </summary>
        /// <value>Assigned Type: ota2:LocalDate</value>
        [DataMember(Name="waverDate", EmitDefaultValue=false)]
        public string WaverDate { get; set; }

        /// <summary>
        /// Assigned Type: ctar-1100:PaymentAfterReservation
        /// </summary>
        /// <value>Assigned Type: ctar-1100:PaymentAfterReservation</value>
        [DataMember(Name="PaymentAfterReservation", EmitDefaultValue=false)]
        public PaymentAfterReservation PaymentAfterReservation { get; set; }

        /// <summary>
        /// Assigned Type: ctar-1100:PaymentBeforeDeparture
        /// </summary>
        /// <value>Assigned Type: ctar-1100:PaymentBeforeDeparture</value>
        [DataMember(Name="PaymentBeforeDeparture", EmitDefaultValue=false)]
        public PaymentBeforeDeparture PaymentBeforeDeparture { get; set; }

        /// <summary>
        /// The ATPCO paymentgeographic indicator. Example \\\&quot;55\\\&quot; &#x3D; 1st segment over the water between area 2 and 3
        /// </summary>
        /// <value>The ATPCO paymentgeographic indicator. Example \\\&quot;55\\\&quot; &#x3D; 1st segment over the water between area 2 and 3</value>
        [DataMember(Name="PaymentTravelSegmentIndicatorATPCO", EmitDefaultValue=false)]
        public int? PaymentTravelSegmentIndicatorATPCO { get; set; }

        /// <summary>
        /// if true, the Offer must be paid at the same time as the reservation is created
        /// </summary>
        /// <value>if true, the Offer must be paid at the same time as the reservation is created</value>
        [DataMember(Name="instantPaymentInd", EmitDefaultValue=false)]
        public bool? InstantPaymentInd { get; set; }

        /// <summary>
        /// If true, the earlier of the payment restrictions apply
        /// </summary>
        /// <value>If true, the earlier of the payment restrictions apply</value>
        [DataMember(Name="ealierAppliesInd", EmitDefaultValue=false)]
        public bool? EalierAppliesInd { get; set; }

        /// <summary>
        /// If true, the later of the payment restrictions apply
        /// </summary>
        /// <value>If true, the later of the payment restrictions apply</value>
        [DataMember(Name="laterAppliesInd", EmitDefaultValue=false)]
        public bool? LaterAppliesInd { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionPointChoice
        /// </summary>
        [DataMember(Name="ExtensionPoint_Choice", EmitDefaultValue=false)]
        public ExtensionPointChoice ExtensionPointChoice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdvancePaymentRequired {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  WaverDate: ").Append(WaverDate).Append("\n");
            sb.Append("  PaymentAfterReservation: ").Append(PaymentAfterReservation).Append("\n");
            sb.Append("  PaymentBeforeDeparture: ").Append(PaymentBeforeDeparture).Append("\n");
            sb.Append("  PaymentTravelSegmentIndicatorATPCO: ").Append(PaymentTravelSegmentIndicatorATPCO).Append("\n");
            sb.Append("  InstantPaymentInd: ").Append(InstantPaymentInd).Append("\n");
            sb.Append("  EalierAppliesInd: ").Append(EalierAppliesInd).Append("\n");
            sb.Append("  LaterAppliesInd: ").Append(LaterAppliesInd).Append("\n");
            sb.Append("  ExtensionPointChoice: ").Append(ExtensionPointChoice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdvancePaymentRequired);
        }

        /// <summary>
        /// Returns true if AdvancePaymentRequired instances are equal
        /// </summary>
        /// <param name="input">Instance of AdvancePaymentRequired to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdvancePaymentRequired input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.WaverDate == input.WaverDate ||
                    (this.WaverDate != null &&
                    this.WaverDate.Equals(input.WaverDate))
                ) && base.Equals(input) && 
                (
                    this.PaymentAfterReservation == input.PaymentAfterReservation ||
                    (this.PaymentAfterReservation != null &&
                    this.PaymentAfterReservation.Equals(input.PaymentAfterReservation))
                ) && base.Equals(input) && 
                (
                    this.PaymentBeforeDeparture == input.PaymentBeforeDeparture ||
                    (this.PaymentBeforeDeparture != null &&
                    this.PaymentBeforeDeparture.Equals(input.PaymentBeforeDeparture))
                ) && base.Equals(input) && 
                (
                    this.PaymentTravelSegmentIndicatorATPCO == input.PaymentTravelSegmentIndicatorATPCO ||
                    (this.PaymentTravelSegmentIndicatorATPCO != null &&
                    this.PaymentTravelSegmentIndicatorATPCO.Equals(input.PaymentTravelSegmentIndicatorATPCO))
                ) && base.Equals(input) && 
                (
                    this.InstantPaymentInd == input.InstantPaymentInd ||
                    (this.InstantPaymentInd != null &&
                    this.InstantPaymentInd.Equals(input.InstantPaymentInd))
                ) && base.Equals(input) && 
                (
                    this.EalierAppliesInd == input.EalierAppliesInd ||
                    (this.EalierAppliesInd != null &&
                    this.EalierAppliesInd.Equals(input.EalierAppliesInd))
                ) && base.Equals(input) && 
                (
                    this.LaterAppliesInd == input.LaterAppliesInd ||
                    (this.LaterAppliesInd != null &&
                    this.LaterAppliesInd.Equals(input.LaterAppliesInd))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointChoice == input.ExtensionPointChoice ||
                    (this.ExtensionPointChoice != null &&
                    this.ExtensionPointChoice.Equals(input.ExtensionPointChoice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.WaverDate != null)
                    hashCode = hashCode * 59 + this.WaverDate.GetHashCode();
                if (this.PaymentAfterReservation != null)
                    hashCode = hashCode * 59 + this.PaymentAfterReservation.GetHashCode();
                if (this.PaymentBeforeDeparture != null)
                    hashCode = hashCode * 59 + this.PaymentBeforeDeparture.GetHashCode();
                if (this.PaymentTravelSegmentIndicatorATPCO != null)
                    hashCode = hashCode * 59 + this.PaymentTravelSegmentIndicatorATPCO.GetHashCode();
                if (this.InstantPaymentInd != null)
                    hashCode = hashCode * 59 + this.InstantPaymentInd.GetHashCode();
                if (this.EalierAppliesInd != null)
                    hashCode = hashCode * 59 + this.EalierAppliesInd.GetHashCode();
                if (this.LaterAppliesInd != null)
                    hashCode = hashCode * 59 + this.LaterAppliesInd.GetHashCode();
                if (this.ExtensionPointChoice != null)
                    hashCode = hashCode * 59 + this.ExtensionPointChoice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // WaverDate (string) pattern
            Regex regexWaverDate = new Regex(@"(\\d{4}-\\d{2}-\\d{2})", RegexOptions.CultureInvariant);
            if (false == regexWaverDate.Match(this.WaverDate).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WaverDate, must match a pattern of " + regexWaverDate, new [] { "WaverDate" });
            }

            // PaymentTravelSegmentIndicatorATPCO (int?) minimum
            if(this.PaymentTravelSegmentIndicatorATPCO < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentTravelSegmentIndicatorATPCO, must be a value greater than or equal to 0.", new [] { "PaymentTravelSegmentIndicatorATPCO" });
            }

            yield break;
        }
    }

}
